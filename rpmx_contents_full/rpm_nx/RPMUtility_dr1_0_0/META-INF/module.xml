<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE module [<!ENTITY components SYSTEM "components.xml">]>
<dev:module xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dev="http://www.amx.com/duet/devicesdk"  xsi:schemaLocation="http://www.amx.com/duet/devicesdk/module.xsd">
	<dev:header>
		<dev:manifest-version>1.0.0</dev:manifest-version>
		<dev:amx-type>Duet</dev:amx-type>
		<dev:bundle-name>RPMUtility_dr1_0_0</dev:bundle-name>
		<dev:device-make>AMX</dev:device-make>
		<dev:duet-firmware-version>v3.21.343</dev:duet-firmware-version>
		<dev:device-channels>255</dev:device-channels>
		<dev:device-levels>8</dev:device-levels>
		<dev:device-models>
			<dev:device-model>RPMUtility</dev:device-model>
		</dev:device-models>
		<dev:device-category>other</dev:device-category>
		<dev:device-sdkclass>com.amx.duet.devicesdk.Utility</dev:device-sdkclass>
		<dev:device-sdkinterface>com.amx.duet.devicesdk.IUtility</dev:device-sdkinterface>
		<dev:device-class>com.amx.rpmutility.dr1_0_0.AMXRPMUtility</dev:device-class>
		<dev:device-revision>1.0.0</dev:device-revision>
		<dev:router-service>com.amx.duet.routers.snapi.ISNAPIRouter</dev:router-service>
		<dev:bundle-activator>com.amx.rpmutility.dr1_0_0.Activator</dev:bundle-activator>
		<dev:bundle-version>1.0.3</dev:bundle-version>
		<dev:bundle-vendor>AMX Corporation</dev:bundle-vendor>
		<dev:bundle-copyright>(C) Copyright AMX Corp. 2004-2007. All Rights Reserved.</dev:bundle-copyright>
		<dev:import-packages>
			<dev:import-package>org.osgi.service.http</dev:import-package>
			<dev:import-package>org.osgi.service.device</dev:import-package>
			<dev:import-package>com.amx.duet.driver</dev:import-package>
			<dev:import-package>com.amx.duet.da</dev:import-package>
			<dev:import-package>com.amx.duet.core.osgi</dev:import-package>
			<dev:import-package>com.amx.duet.devicesdk</dev:import-package>
			<dev:import-package>com.amx.duet.devicesdk.base</dev:import-package>
			<dev:import-package>com.amx.duet.devicesdk.component</dev:import-package>
			<dev:import-package>com.amx.duet.devicesdk.type</dev:import-package>
			<dev:import-package>com.amx.duet.util.metadata</dev:import-package>
			<dev:import-package>com.amx.duet.util</dev:import-package>
		</dev:import-packages>
		<dev:export-packages>
			<dev:export-package version="1.0.0">com.amx.rpmutility.dr1_0_0</dev:export-package>
		</dev:export-packages>
		<dev:file-dependencies>
			<dev:file-dependency version="1.15.0">snapirouter.jar</dev:file-dependency>
			<dev:file-dependency version="1.15.0">devicesdkrt.jar</dev:file-dependency>
		</dev:file-dependencies>
		<dev:user-defined-entries>
			<dev:user-defined-entry>
				<dev:user-defined-entry-name>DynamicImport-Package</dev:user-defined-entry-name>
				<dev:user-defined-entry-value>*</dev:user-defined-entry-value>
			</dev:user-defined-entry>
		</dev:user-defined-entries>
		<dev:module-init-entries></dev:module-init-entries>
	</dev:header>
	<dev:type-info>
	<dev:class name="com.amx.rpmutility.dr1_0_0.AMXRPMUtility" serializable="true" superclass="com.amx.duet.devicesdk.Utility">
		<dev:extends>
			<dev:extend name="com.amx.rpmutility.dr1_0_0.ICmdProcess"></dev:extend>
		</dev:extends>
		<dev:fields>
			<dev:field final="true" fulltype="java.lang.Integer" name="POLL_TIME_12HOURS" static="true" type="Integer" visibility="public"></dev:field>
			<dev:field final="true" fulltype="java.lang.Integer" name="POLL_TIME_24HOURS" static="true" type="Integer" visibility="public"></dev:field>
			<dev:field final="true" fulltype="java.lang.Integer" name="POLL_TIME_WEEK" static="true" type="Integer" visibility="public"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor name="AMXRPMUtility" visibility="public"></dev:constructor>
			<dev:constructor name="AMXRPMUtility" visibility="public">
				<dev:params>
					<dev:param name="bctxt" type="org.osgi.framework.BundleContext"></dev:param>
					<dev:param name="nd" type="com.amx.duet.da.NetLinxDevice"></dev:param>
					<dev:param name="props" type="java.util.Properties"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="isDeviceOnLine" type="boolean" visibility="public"></dev:method>
			<dev:method name="isDataInitialized" type="boolean" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.beans.VetoableChangeListener">
		<dev:extends>
			<dev:extend name="java.util.EventListener"></dev:extend>
		</dev:extends>
	</dev:class>
	<dev:class name="com.amx.common.util.beans.PropertyVetoException" serializable="true" superclass="java.lang.Exception">
		<dev:methods>
			<dev:constructor name="PropertyVetoException" visibility="public">
				<dev:params>
					<dev:param comment="Descriptive message" name="mess" type="java.lang.String"></dev:param>
					<dev:param comment="A PropertyChangeEvent describing the vetoed change." name="evt" type="com.amx.common.util.beans.PropertyChangeEvent"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="getPropertyChangeEvent" returncomment="A PropertyChangeEvent describing the vetoed change." type="com.amx.common.util.beans.PropertyChangeEvent" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.beans.PropertyChangeListener">
		<dev:extends>
			<dev:extend name="java.util.EventListener"></dev:extend>
		</dev:extends>
	</dev:class>
	<dev:class name="com.amx.common.util.beans.PropertyChangeEvent" serializable="true" superclass="java.util.EventObject">
		<dev:methods>
			<dev:constructor name="PropertyChangeEvent" visibility="public">
				<dev:params>
					<dev:param comment="The bean that fired the event." name="source" type="java.lang.Object"></dev:param>
					<dev:param comment="The programmatic name of the property that was changed." name="propertyName" type="java.lang.String"></dev:param>
					<dev:param comment="The old value of the property." name="oldValue" type="java.lang.Object"></dev:param>
					<dev:param comment="The new value of the property." name="newValue" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="getNewValue" returncomment="The new value for the property, expressed as an Object. May be null if multiple properties have changed." type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="getOldValue" returncomment="The old value for the property, expressed as an Object. May be null if multiple properties have changed." type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="getPropagationId" returncomment="the propagationId object associated with a bound/constrained property update." type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="getPropertyName" returncomment="The programmatic name of the property that was changed. May be null if multiple properties have changed." type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="setPropagationId" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The propagationId object for the event." name="propagationId" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.WriterPreferenceReadWriteLock" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.ReadWriteLock"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="WriterPreferenceReadWriteLock" visibility="public"></dev:constructor>
			<dev:method name="readLock" type="com.amx.common.util.concurrent.Sync" visibility="public"></dev:method>
			<dev:method name="writeLock" type="com.amx.common.util.concurrent.Sync" visibility="public"></dev:method>
		</dev:methods>
		<dev:class name="com.amx.common.util.concurrent.WriterPreferenceReadWriteLock.ReaderLock" superclass="com.amx.common.util.concurrent.WriterPreferenceReadWriteLock.Signaller">
			<dev:extends>
				<dev:extend name="com.amx.common.util.concurrent.Sync"></dev:extend>
			</dev:extends>
			<dev:methods>
				<dev:method name="acquire" type="void" visibility="public"></dev:method>
				<dev:method name="attempt" type="boolean" visibility="public">
					<dev:params>
						<dev:param name="msecs" type="long"></dev:param>
					</dev:params>
				</dev:method>
				<dev:method name="release" type="void" visibility="public"></dev:method>
			</dev:methods>
		</dev:class>
		<dev:class abstract="true" name="com.amx.common.util.concurrent.WriterPreferenceReadWriteLock.Signaller" superclass="java.lang.Object"></dev:class>
		<dev:class name="com.amx.common.util.concurrent.WriterPreferenceReadWriteLock.WriterLock" superclass="com.amx.common.util.concurrent.WriterPreferenceReadWriteLock.Signaller">
			<dev:extends>
				<dev:extend name="com.amx.common.util.concurrent.Sync"></dev:extend>
			</dev:extends>
			<dev:methods>
				<dev:method name="acquire" type="void" visibility="public"></dev:method>
				<dev:method name="attempt" type="boolean" visibility="public">
					<dev:params>
						<dev:param name="msecs" type="long"></dev:param>
					</dev:params>
				</dev:method>
				<dev:method name="release" type="void" visibility="public"></dev:method>
			</dev:methods>
		</dev:class>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.WriterPreferenceReadWriteLock.ReaderLock" superclass="com.amx.common.util.concurrent.WriterPreferenceReadWriteLock.Signaller">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Sync"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:method name="acquire" type="void" visibility="public"></dev:method>
			<dev:method name="attempt" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="release" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.concurrent.WriterPreferenceReadWriteLock.Signaller" superclass="java.lang.Object"></dev:class>
	<dev:class name="com.amx.common.util.concurrent.WriterPreferenceReadWriteLock.WriterLock" superclass="com.amx.common.util.concurrent.WriterPreferenceReadWriteLock.Signaller">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Sync"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:method name="acquire" type="void" visibility="public"></dev:method>
			<dev:method name="attempt" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="release" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.WaitFreeQueue" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Channel"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="WaitFreeQueue" visibility="public"></dev:constructor>
			<dev:method name="offer" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="x" type="java.lang.Object"></dev:param>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="peek" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="poll" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="put" type="void" visibility="public">
				<dev:params>
					<dev:param name="x" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="take" type="java.lang.Object" visibility="public"></dev:method>
		</dev:methods>
		<dev:class name="com.amx.common.util.concurrent.WaitFreeQueue.Node" superclass="java.lang.Object">
			<dev:fields></dev:fields>
			<dev:methods></dev:methods>
		</dev:class>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.WaitFreeQueue.Node" superclass="java.lang.Object">
		<dev:fields></dev:fields>
		<dev:methods></dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.WaiterPreferenceSemaphore" superclass="com.amx.common.util.concurrent.Semaphore">
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="WaiterPreferenceSemaphore" visibility="public">
				<dev:params>
					<dev:param name="initial" type="long"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="acquire" type="void" visibility="public"></dev:method>
			<dev:method name="attempt" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="release" type="void" visibility="public"></dev:method>
			<dev:method name="release" type="void" visibility="public">
				<dev:params>
					<dev:param name="n" type="long"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.WaitableShort" superclass="com.amx.common.util.concurrent.SynchronizedShort">
		<dev:methods>
			<dev:constructor name="WaitableShort" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="short"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="WaitableShort" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="short"></dev:param>
					<dev:param name="lock" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="add" type="short" visibility="public">
				<dev:params>
					<dev:param name="amount" type="short"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="and" returncomment="the new value" type="short" visibility="public">
				<dev:params>
					<dev:param name="b" type="short"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="commit" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="assumedValue" type="short"></dev:param>
					<dev:param name="newValue" type="short"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="complement" returncomment="the new value" type="short" visibility="public"></dev:method>
			<dev:method name="decrement" type="short" visibility="public"></dev:method>
			<dev:method name="divide" type="short" visibility="public">
				<dev:params>
					<dev:param name="factor" type="short"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="increment" type="short" visibility="public"></dev:method>
			<dev:method name="multiply" type="short" visibility="public">
				<dev:params>
					<dev:param name="factor" type="short"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="or" returncomment="the new value" type="short" visibility="public">
				<dev:params>
					<dev:param name="b" type="short"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" type="short" visibility="public">
				<dev:params>
					<dev:param name="newValue" type="short"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="subtract" type="short" visibility="public">
				<dev:params>
					<dev:param name="amount" type="short"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="short"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenGreater" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="short"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenGreaterEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="short"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenLess" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="short"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenLessEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="short"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenNotEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="short"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="xor" returncomment="the new value" type="short" visibility="public">
				<dev:params>
					<dev:param name="b" type="short"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.WaitableRef" superclass="com.amx.common.util.concurrent.SynchronizedRef">
		<dev:methods>
			<dev:constructor name="WaitableRef" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="WaitableRef" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="java.lang.Object"></dev:param>
					<dev:param name="lock" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="commit" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="assumedValue" type="java.lang.Object"></dev:param>
					<dev:param name="newValue" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="newValue" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="java.lang.Object"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenNotEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="java.lang.Object"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenNotNull" type="void" visibility="public">
				<dev:params>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenNull" type="void" visibility="public">
				<dev:params>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.WaitableLong" superclass="com.amx.common.util.concurrent.SynchronizedLong">
		<dev:methods>
			<dev:constructor name="WaitableLong" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="long"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="WaitableLong" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="long"></dev:param>
					<dev:param name="lock" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="add" type="long" visibility="public">
				<dev:params>
					<dev:param name="amount" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="and" returncomment="the new value" type="long" visibility="public">
				<dev:params>
					<dev:param name="b" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="commit" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="assumedValue" type="long"></dev:param>
					<dev:param name="newValue" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="complement" returncomment="the new value" type="long" visibility="public"></dev:method>
			<dev:method name="decrement" type="long" visibility="public"></dev:method>
			<dev:method name="divide" type="long" visibility="public">
				<dev:params>
					<dev:param name="factor" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="increment" type="long" visibility="public"></dev:method>
			<dev:method name="multiply" type="long" visibility="public">
				<dev:params>
					<dev:param name="factor" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="or" returncomment="the new value" type="long" visibility="public">
				<dev:params>
					<dev:param name="b" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" type="long" visibility="public">
				<dev:params>
					<dev:param name="newValue" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="subtract" type="long" visibility="public">
				<dev:params>
					<dev:param name="amount" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="long"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenGreater" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="long"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenGreaterEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="long"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenLess" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="long"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenLessEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="long"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenNotEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="long"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="xor" returncomment="the new value" type="long" visibility="public">
				<dev:params>
					<dev:param name="b" type="long"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.WaitableInt" superclass="com.amx.common.util.concurrent.SynchronizedInt">
		<dev:methods>
			<dev:constructor name="WaitableInt" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="int"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="WaitableInt" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="int"></dev:param>
					<dev:param name="lock" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="add" type="int" visibility="public">
				<dev:params>
					<dev:param name="amount" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="and" returncomment="the new value" type="int" visibility="public">
				<dev:params>
					<dev:param name="b" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="commit" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="assumedValue" type="int"></dev:param>
					<dev:param name="newValue" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="complement" returncomment="the new value" type="int" visibility="public"></dev:method>
			<dev:method name="decrement" type="int" visibility="public"></dev:method>
			<dev:method name="divide" type="int" visibility="public">
				<dev:params>
					<dev:param name="factor" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="increment" type="int" visibility="public"></dev:method>
			<dev:method name="multiply" type="int" visibility="public">
				<dev:params>
					<dev:param name="factor" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="or" returncomment="the new value" type="int" visibility="public">
				<dev:params>
					<dev:param name="b" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" type="int" visibility="public">
				<dev:params>
					<dev:param name="newValue" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="subtract" type="int" visibility="public">
				<dev:params>
					<dev:param name="amount" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="int"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenGreater" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="int"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenGreaterEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="int"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenLess" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="int"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenLessEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="int"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenNotEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="int"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="xor" returncomment="the new value" type="int" visibility="public">
				<dev:params>
					<dev:param name="b" type="int"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.WaitableFloat" superclass="com.amx.common.util.concurrent.SynchronizedFloat">
		<dev:methods>
			<dev:constructor name="WaitableFloat" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="float"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="WaitableFloat" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="float"></dev:param>
					<dev:param name="lock" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="add" type="float" visibility="public">
				<dev:params>
					<dev:param name="amount" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="commit" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="assumedValue" type="float"></dev:param>
					<dev:param name="newValue" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="divide" type="float" visibility="public">
				<dev:params>
					<dev:param name="factor" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="multiply" type="float" visibility="public">
				<dev:params>
					<dev:param name="factor" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" type="float" visibility="public">
				<dev:params>
					<dev:param name="newValue" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="subtract" type="float" visibility="public">
				<dev:params>
					<dev:param name="amount" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="float"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenGreater" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="float"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenGreaterEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="float"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenLess" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="float"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenLessEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="float"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenNotEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="float"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.WaitableDouble" superclass="com.amx.common.util.concurrent.SynchronizedDouble">
		<dev:methods>
			<dev:constructor name="WaitableDouble" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="double"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="WaitableDouble" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="double"></dev:param>
					<dev:param name="lock" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="add" type="double" visibility="public">
				<dev:params>
					<dev:param name="amount" type="double"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="commit" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="assumedValue" type="double"></dev:param>
					<dev:param name="newValue" type="double"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="divide" type="double" visibility="public">
				<dev:params>
					<dev:param name="factor" type="double"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="multiply" type="double" visibility="public">
				<dev:params>
					<dev:param name="factor" type="double"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" type="double" visibility="public">
				<dev:params>
					<dev:param name="newValue" type="double"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="subtract" type="double" visibility="public">
				<dev:params>
					<dev:param name="amount" type="double"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="double"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenGreater" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="double"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenGreaterEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="double"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenLess" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="double"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenLessEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="double"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenNotEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="double"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.WaitableChar" superclass="com.amx.common.util.concurrent.SynchronizedChar">
		<dev:methods>
			<dev:constructor name="WaitableChar" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="char"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="WaitableChar" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="char"></dev:param>
					<dev:param name="lock" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="add" type="char" visibility="public">
				<dev:params>
					<dev:param name="amount" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="commit" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="assumedValue" type="char"></dev:param>
					<dev:param name="newValue" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="divide" type="char" visibility="public">
				<dev:params>
					<dev:param name="factor" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="multiply" type="char" visibility="public">
				<dev:params>
					<dev:param name="factor" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" type="char" visibility="public">
				<dev:params>
					<dev:param name="newValue" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="subtract" type="char" visibility="public">
				<dev:params>
					<dev:param name="amount" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="char"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenGreater" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="char"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenGreaterEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="char"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenLess" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="char"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenLessEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="char"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenNotEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="char"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.WaitableByte" superclass="com.amx.common.util.concurrent.SynchronizedByte">
		<dev:methods>
			<dev:constructor name="WaitableByte" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="byte"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="WaitableByte" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="byte"></dev:param>
					<dev:param name="lock" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="add" type="byte" visibility="public">
				<dev:params>
					<dev:param name="amount" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="and" returncomment="the new value" type="byte" visibility="public">
				<dev:params>
					<dev:param name="b" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="commit" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="assumedValue" type="byte"></dev:param>
					<dev:param name="newValue" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="complement" returncomment="the new value" type="byte" visibility="public"></dev:method>
			<dev:method name="decrement" type="byte" visibility="public"></dev:method>
			<dev:method name="divide" type="byte" visibility="public">
				<dev:params>
					<dev:param name="factor" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="increment" type="byte" visibility="public"></dev:method>
			<dev:method name="multiply" type="byte" visibility="public">
				<dev:params>
					<dev:param name="factor" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="or" returncomment="the new value" type="byte" visibility="public">
				<dev:params>
					<dev:param name="b" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" type="byte" visibility="public">
				<dev:params>
					<dev:param name="newValue" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="subtract" type="byte" visibility="public">
				<dev:params>
					<dev:param name="amount" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="byte"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenGreater" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="byte"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenGreaterEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="byte"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenLess" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="byte"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenLessEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="byte"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenNotEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="byte"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="xor" returncomment="the new value" type="byte" visibility="public">
				<dev:params>
					<dev:param name="b" type="byte"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.WaitableBoolean" superclass="com.amx.common.util.concurrent.SynchronizedBoolean">
		<dev:methods>
			<dev:constructor name="WaitableBoolean" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="boolean"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="WaitableBoolean" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="boolean"></dev:param>
					<dev:param name="lock" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="and" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="b" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="commit" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="assumedValue" type="boolean"></dev:param>
					<dev:param name="newValue" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="complement" type="boolean" visibility="public"></dev:method>
			<dev:method name="or" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="b" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="newValue" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="boolean"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenFalse" type="void" visibility="public">
				<dev:params>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenNotEqual" type="void" visibility="public">
				<dev:params>
					<dev:param name="c" type="boolean"></dev:param>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="whenTrue" type="void" visibility="public">
				<dev:params>
					<dev:param name="action" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="xor" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="b" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.VetoableChangeMulticaster" serializable="true" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.io.Serializable"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="VetoableChangeMulticaster" visibility="public">
				<dev:params>
					<dev:param comment="The bean to be given as the source for any events." name="sourceBean" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="addVetoableChangeListener" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The name of the property to listen on." name="propertyName" type="java.lang.String"></dev:param>
					<dev:param comment="The VetoableChangeListener to be added" name="listener" type="com.amx.common.util.beans.VetoableChangeListener"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="addVetoableChangeListener" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The VetoableChangeListener to be added" name="listener" type="com.amx.common.util.beans.VetoableChangeListener"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="addVetoableChangeListenerIfAbsent" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The name of the property to listen on." name="propertyName" type="java.lang.String"></dev:param>
					<dev:param comment="The VetoableChangeListener to be added" name="listener" type="com.amx.common.util.beans.VetoableChangeListener"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="addVetoableChangeListenerIfAbsent" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The PropertyChangeListener to be added" name="listener" type="com.amx.common.util.beans.VetoableChangeListener"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="fireVetoableChange" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The PropertyChangeEvent object." name="evt" type="com.amx.common.util.beans.PropertyChangeEvent"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="fireVetoableChange" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The programmatic name of the property that was changed." name="propertyName" type="java.lang.String"></dev:param>
					<dev:param comment="The old value of the property." name="oldValue" type="boolean"></dev:param>
					<dev:param comment="The new value of the property." name="newValue" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="fireVetoableChange" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The programmatic name of the property that was changed." name="propertyName" type="java.lang.String"></dev:param>
					<dev:param comment="The old value of the property." name="oldValue" type="int"></dev:param>
					<dev:param comment="The new value of the property." name="newValue" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="fireVetoableChange" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The programmatic name of the property that was changed." name="propertyName" type="java.lang.String"></dev:param>
					<dev:param comment="The old value of the property." name="oldValue" type="java.lang.Object"></dev:param>
					<dev:param comment="The new value of the property." name="newValue" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="hasListeners" returncomment="true if there are one or more listeners for the given property" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the property name." name="propertyName" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="removeVetoableChangeListener" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The name of the property that was listened on." name="propertyName" type="java.lang.String"></dev:param>
					<dev:param comment="The VetoableChangeListener to be removed" name="listener" type="com.amx.common.util.beans.VetoableChangeListener"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="removeVetoableChangeListener" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The VetoableChangeListener to be removed" name="listener" type="com.amx.common.util.beans.VetoableChangeListener"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.TimeoutSync" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Sync"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="TimeoutSync" visibility="public">
				<dev:params>
					<dev:param name="sync" type="com.amx.common.util.concurrent.Sync"></dev:param>
					<dev:param name="timeout" type="long"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="acquire" type="void" visibility="public"></dev:method>
			<dev:method name="attempt" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="release" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.TimeoutException" serializable="true" superclass="java.lang.InterruptedException">
		<dev:fields>
			<dev:field final="true" fulltype="long" name="duration" type="long" visibility="public"></dev:field>
		</dev:fields>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.TimedCallable" superclass="com.amx.common.util.concurrent.ThreadFactoryUser">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Callable"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor name="TimedCallable" visibility="public">
				<dev:params>
					<dev:param name="function" type="com.amx.common.util.concurrent.Callable"></dev:param>
					<dev:param name="millis" type="long"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="call" type="java.lang.Object" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ThreadFactoryUser" superclass="java.lang.Object">
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="ThreadFactoryUser" visibility="public"></dev:constructor>
			<dev:method name="getThreadFactory" type="com.amx.common.util.concurrent.ThreadFactory" visibility="public"></dev:method>
			<dev:method name="setThreadFactory" returncomment="the previous factory" type="com.amx.common.util.concurrent.ThreadFactory" visibility="public">
				<dev:params>
					<dev:param comment="the factory to use" name="factory" type="com.amx.common.util.concurrent.ThreadFactory"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
		<dev:class name="com.amx.common.util.concurrent.ThreadFactoryUser.DefaultThreadFactory" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="com.amx.common.util.concurrent.ThreadFactory"></dev:extend>
			</dev:extends>
			<dev:methods>
				<dev:method name="newThread" type="java.lang.Thread" visibility="public">
					<dev:params>
						<dev:param name="command" type="java.lang.Runnable"></dev:param>
					</dev:params>
				</dev:method>
			</dev:methods>
		</dev:class>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ThreadFactoryUser.DefaultThreadFactory" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.ThreadFactory"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:method name="newThread" type="java.lang.Thread" visibility="public">
				<dev:params>
					<dev:param name="command" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.concurrent.ThreadFactory"></dev:class>
	<dev:class name="com.amx.common.util.concurrent.ThreadedExecutor" superclass="com.amx.common.util.concurrent.ThreadFactoryUser">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Executor"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor name="ThreadedExecutor" visibility="public"></dev:constructor>
			<dev:method name="execute" type="void" visibility="public">
				<dev:params>
					<dev:param name="command" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.concurrent.Takable"></dev:class>
	<dev:class name="com.amx.common.util.concurrent.SyncSortedSet" superclass="com.amx.common.util.concurrent.SyncSet">
		<dev:extends>
			<dev:extend name="java.util.SortedSet"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor name="SyncSortedSet" visibility="public">
				<dev:params>
					<dev:param name="set" type="java.util.SortedSet"></dev:param>
					<dev:param name="rwl" type="com.amx.common.util.concurrent.ReadWriteLock"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SyncSortedSet" visibility="public">
				<dev:params>
					<dev:param name="set" type="java.util.SortedSet"></dev:param>
					<dev:param name="sync" type="com.amx.common.util.concurrent.Sync"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SyncSortedSet" visibility="public">
				<dev:params>
					<dev:param name="set" type="java.util.SortedSet"></dev:param>
					<dev:param name="readLock" type="com.amx.common.util.concurrent.Sync"></dev:param>
					<dev:param name="writeLock" type="com.amx.common.util.concurrent.Sync"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="comparator" type="java.util.Comparator" visibility="public"></dev:method>
			<dev:method name="first" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="headSet" type="java.util.SortedSet" visibility="public">
				<dev:params>
					<dev:param name="toElement" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="last" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="subSet" type="java.util.SortedSet" visibility="public">
				<dev:params>
					<dev:param name="fromElement" type="java.lang.Object"></dev:param>
					<dev:param name="toElement" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="tailSet" type="java.util.SortedSet" visibility="public">
				<dev:params>
					<dev:param name="fromElement" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.SyncSortedMap" superclass="com.amx.common.util.concurrent.SyncMap">
		<dev:extends>
			<dev:extend name="java.util.SortedMap"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor name="SyncSortedMap" visibility="public">
				<dev:params>
					<dev:param name="map" type="java.util.SortedMap"></dev:param>
					<dev:param name="rwl" type="com.amx.common.util.concurrent.ReadWriteLock"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SyncSortedMap" visibility="public">
				<dev:params>
					<dev:param name="map" type="java.util.SortedMap"></dev:param>
					<dev:param name="sync" type="com.amx.common.util.concurrent.Sync"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SyncSortedMap" visibility="public">
				<dev:params>
					<dev:param name="map" type="java.util.SortedMap"></dev:param>
					<dev:param name="readLock" type="com.amx.common.util.concurrent.Sync"></dev:param>
					<dev:param name="writeLock" type="com.amx.common.util.concurrent.Sync"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="comparator" type="java.util.Comparator" visibility="public"></dev:method>
			<dev:method name="firstKey" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="headMap" type="java.util.SortedMap" visibility="public">
				<dev:params>
					<dev:param name="toElement" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="lastKey" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="subMap" type="java.util.SortedMap" visibility="public">
				<dev:params>
					<dev:param name="fromElement" type="java.lang.Object"></dev:param>
					<dev:param name="toElement" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="tailMap" type="java.util.SortedMap" visibility="public">
				<dev:params>
					<dev:param name="fromElement" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.SyncSet" superclass="com.amx.common.util.concurrent.SyncCollection">
		<dev:extends>
			<dev:extend name="java.util.Set"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor name="SyncSet" visibility="public">
				<dev:params>
					<dev:param name="set" type="java.util.Set"></dev:param>
					<dev:param name="rwl" type="com.amx.common.util.concurrent.ReadWriteLock"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SyncSet" visibility="public">
				<dev:params>
					<dev:param name="set" type="java.util.Set"></dev:param>
					<dev:param name="sync" type="com.amx.common.util.concurrent.Sync"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SyncSet" visibility="public">
				<dev:params>
					<dev:param name="set" type="java.util.Set"></dev:param>
					<dev:param name="readLock" type="com.amx.common.util.concurrent.Sync"></dev:param>
					<dev:param name="writeLock" type="com.amx.common.util.concurrent.Sync"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="equals" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="hashCode" type="int" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.SyncMap" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.util.Map"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="SyncMap" visibility="public">
				<dev:params>
					<dev:param name="map" type="java.util.Map"></dev:param>
					<dev:param name="rwl" type="com.amx.common.util.concurrent.ReadWriteLock"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SyncMap" visibility="public">
				<dev:params>
					<dev:param name="map" type="java.util.Map"></dev:param>
					<dev:param name="sync" type="com.amx.common.util.concurrent.Sync"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SyncMap" visibility="public">
				<dev:params>
					<dev:param name="map" type="java.util.Map"></dev:param>
					<dev:param name="readLock" type="com.amx.common.util.concurrent.Sync"></dev:param>
					<dev:param name="writeLock" type="com.amx.common.util.concurrent.Sync"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="clear" type="void" visibility="public"></dev:method>
			<dev:method name="containsKey" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="containsValue" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="entrySet" type="java.util.Set" visibility="public"></dev:method>
			<dev:method name="equals" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="get" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="key" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="hashCode" type="int" visibility="public"></dev:method>
			<dev:method name="isEmpty" type="boolean" visibility="public"></dev:method>
			<dev:method name="keySet" type="java.util.Set" visibility="public"></dev:method>
			<dev:method name="put" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="key" type="java.lang.Object"></dev:param>
					<dev:param name="value" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="putAll" type="void" visibility="public">
				<dev:params>
					<dev:param name="coll" type="java.util.Map"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="readerSync" type="com.amx.common.util.concurrent.Sync" visibility="public"></dev:method>
			<dev:method name="remove" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="key" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="size" type="int" visibility="public"></dev:method>
			<dev:method name="syncFailures" type="long" visibility="public"></dev:method>
			<dev:method name="values" type="java.util.Collection" visibility="public"></dev:method>
			<dev:method name="writerSync" type="com.amx.common.util.concurrent.Sync" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.SyncList" superclass="com.amx.common.util.concurrent.SyncCollection">
		<dev:extends>
			<dev:extend name="java.util.List"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor name="SyncList" visibility="public">
				<dev:params>
					<dev:param name="list" type="java.util.List"></dev:param>
					<dev:param name="rwl" type="com.amx.common.util.concurrent.ReadWriteLock"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SyncList" visibility="public">
				<dev:params>
					<dev:param name="list" type="java.util.List"></dev:param>
					<dev:param name="sync" type="com.amx.common.util.concurrent.Sync"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SyncList" visibility="public">
				<dev:params>
					<dev:param name="list" type="java.util.List"></dev:param>
					<dev:param name="readLock" type="com.amx.common.util.concurrent.Sync"></dev:param>
					<dev:param name="writeLock" type="com.amx.common.util.concurrent.Sync"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="add" type="void" visibility="public">
				<dev:params>
					<dev:param name="index" type="int"></dev:param>
					<dev:param name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="addAll" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="index" type="int"></dev:param>
					<dev:param name="coll" type="java.util.Collection"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="equals" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="get" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="hashCode" type="int" visibility="public"></dev:method>
			<dev:method name="indexOf" type="int" visibility="public">
				<dev:params>
					<dev:param name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="lastIndexOf" type="int" visibility="public">
				<dev:params>
					<dev:param name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="listIterator" type="java.util.ListIterator" visibility="public"></dev:method>
			<dev:method name="listIterator" type="java.util.ListIterator" visibility="public">
				<dev:params>
					<dev:param name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="remove" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="index" type="int"></dev:param>
					<dev:param name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="subList" type="java.util.List" visibility="public">
				<dev:params>
					<dev:param name="fromIndex" type="int"></dev:param>
					<dev:param name="toIndex" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="unprotectedListIterator" type="java.util.ListIterator" visibility="public"></dev:method>
			<dev:method name="unprotectedListIterator" type="java.util.ListIterator" visibility="public">
				<dev:params>
					<dev:param name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
		<dev:class name="com.amx.common.util.concurrent.SyncList.SyncCollectionListIterator" superclass="com.amx.common.util.concurrent.SyncCollection.SyncCollectionIterator">
			<dev:extends>
				<dev:extend name="java.util.ListIterator"></dev:extend>
			</dev:extends>
		</dev:class>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.SyncList.SyncCollectionListIterator" superclass="com.amx.common.util.concurrent.SyncCollection.SyncCollectionIterator">
		<dev:extends>
			<dev:extend name="java.util.ListIterator"></dev:extend>
		</dev:extends>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.SynchronousChannel" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.BoundedChannel"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="SynchronousChannel" visibility="public"></dev:constructor>
			<dev:method name="capacity" returncomment="zero -- Synchronous channels have no internal capacity." type="int" visibility="public"></dev:method>
			<dev:method name="offer" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="x" type="java.lang.Object"></dev:param>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="peek" returncomment="null -- Synchronous channels do not hold contents unless actively taken" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="poll" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="put" type="void" visibility="public">
				<dev:params>
					<dev:param name="x" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="take" type="java.lang.Object" visibility="public"></dev:method>
		</dev:methods>
		<dev:class name="com.amx.common.util.concurrent.SynchronousChannel.Queue" superclass="java.lang.Object">
			<dev:fields></dev:fields>
			<dev:methods></dev:methods>
		</dev:class>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.SynchronousChannel.Queue" superclass="java.lang.Object">
		<dev:fields></dev:fields>
		<dev:methods></dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.SynchronizedVariable" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Executor"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="SynchronizedVariable" visibility="public"></dev:constructor>
			<dev:constructor name="SynchronizedVariable" visibility="public">
				<dev:params>
					<dev:param name="lock" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="execute" type="void" visibility="public">
				<dev:params>
					<dev:param name="command" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getLock" type="java.lang.Object" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.SynchronizedShort" superclass="com.amx.common.util.concurrent.SynchronizedVariable">
		<dev:extends>
			<dev:extend name="java.lang.Comparable"></dev:extend>
			<dev:extend name="java.lang.Cloneable"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="SynchronizedShort" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="short"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SynchronizedShort" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="short"></dev:param>
					<dev:param name="lock" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="add" returncomment="the new value" type="short" visibility="public">
				<dev:params>
					<dev:param name="amount" type="short"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="and" returncomment="the new value" type="short" visibility="public">
				<dev:params>
					<dev:param name="b" type="short"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="commit" returncomment="true if successful" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="assumedValue" type="short"></dev:param>
					<dev:param name="newValue" type="short"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="short"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="com.amx.common.util.concurrent.SynchronizedShort"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="complement" returncomment="the new value" type="short" visibility="public"></dev:method>
			<dev:method name="decrement" returncomment="the new value" type="short" visibility="public"></dev:method>
			<dev:method name="divide" returncomment="the new value" type="short" visibility="public">
				<dev:params>
					<dev:param name="factor" type="short"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="equals" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="other" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="get" type="short" visibility="public"></dev:method>
			<dev:method name="hashCode" type="int" visibility="public"></dev:method>
			<dev:method name="increment" returncomment="the new value" type="short" visibility="public"></dev:method>
			<dev:method name="multiply" returncomment="the new value" type="short" visibility="public">
				<dev:params>
					<dev:param name="factor" type="short"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="negate" returncomment="the new value" type="short" visibility="public"></dev:method>
			<dev:method name="or" returncomment="the new value" type="short" visibility="public">
				<dev:params>
					<dev:param name="b" type="short"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="the old value" type="short" visibility="public">
				<dev:params>
					<dev:param name="newValue" type="short"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="subtract" returncomment="the new value" type="short" visibility="public">
				<dev:params>
					<dev:param name="amount" type="short"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="swap" returncomment="the new value" type="short" visibility="public">
				<dev:params>
					<dev:param name="other" type="com.amx.common.util.concurrent.SynchronizedShort"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toString" type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="xor" returncomment="the new value" type="short" visibility="public">
				<dev:params>
					<dev:param name="b" type="short"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.SynchronizedRef" superclass="com.amx.common.util.concurrent.SynchronizedVariable">
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="SynchronizedRef" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SynchronizedRef" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="java.lang.Object"></dev:param>
					<dev:param name="lock" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="commit" returncomment="true if successful" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="assumedValue" type="java.lang.Object"></dev:param>
					<dev:param name="newValue" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="get" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="set" returncomment="the old value" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="newValue" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="swap" returncomment="the new value" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="other" type="com.amx.common.util.concurrent.SynchronizedRef"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.SynchronizedLong" superclass="com.amx.common.util.concurrent.SynchronizedVariable">
		<dev:extends>
			<dev:extend name="java.lang.Comparable"></dev:extend>
			<dev:extend name="java.lang.Cloneable"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="SynchronizedLong" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="long"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SynchronizedLong" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="long"></dev:param>
					<dev:param name="lock" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="add" returncomment="the new value" type="long" visibility="public">
				<dev:params>
					<dev:param name="amount" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="and" returncomment="the new value" type="long" visibility="public">
				<dev:params>
					<dev:param name="b" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="commit" returncomment="true if successful" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="assumedValue" type="long"></dev:param>
					<dev:param name="newValue" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="com.amx.common.util.concurrent.SynchronizedLong"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="complement" returncomment="the new value" type="long" visibility="public"></dev:method>
			<dev:method name="decrement" returncomment="the new value" type="long" visibility="public"></dev:method>
			<dev:method name="divide" returncomment="the new value" type="long" visibility="public">
				<dev:params>
					<dev:param name="factor" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="equals" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="other" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="get" type="long" visibility="public"></dev:method>
			<dev:method name="hashCode" type="int" visibility="public"></dev:method>
			<dev:method name="increment" returncomment="the new value" type="long" visibility="public"></dev:method>
			<dev:method name="multiply" returncomment="the new value" type="long" visibility="public">
				<dev:params>
					<dev:param name="factor" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="negate" returncomment="the new value" type="long" visibility="public"></dev:method>
			<dev:method name="or" returncomment="the new value" type="long" visibility="public">
				<dev:params>
					<dev:param name="b" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="the old value" type="long" visibility="public">
				<dev:params>
					<dev:param name="newValue" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="subtract" returncomment="the new value" type="long" visibility="public">
				<dev:params>
					<dev:param name="amount" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="swap" returncomment="the new value" type="long" visibility="public">
				<dev:params>
					<dev:param name="other" type="com.amx.common.util.concurrent.SynchronizedLong"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toString" type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="xor" returncomment="the new value" type="long" visibility="public">
				<dev:params>
					<dev:param name="b" type="long"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.SynchronizedInt" superclass="com.amx.common.util.concurrent.SynchronizedVariable">
		<dev:extends>
			<dev:extend name="java.lang.Comparable"></dev:extend>
			<dev:extend name="java.lang.Cloneable"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="SynchronizedInt" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="int"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SynchronizedInt" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="int"></dev:param>
					<dev:param name="lock" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="add" returncomment="the new value" type="int" visibility="public">
				<dev:params>
					<dev:param name="amount" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="and" returncomment="the new value" type="int" visibility="public">
				<dev:params>
					<dev:param name="b" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="commit" returncomment="true if successful" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="assumedValue" type="int"></dev:param>
					<dev:param name="newValue" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="com.amx.common.util.concurrent.SynchronizedInt"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="complement" returncomment="the new value" type="int" visibility="public"></dev:method>
			<dev:method name="decrement" returncomment="the new value" type="int" visibility="public"></dev:method>
			<dev:method name="divide" returncomment="the new value" type="int" visibility="public">
				<dev:params>
					<dev:param name="factor" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="equals" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="other" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="get" type="int" visibility="public"></dev:method>
			<dev:method name="hashCode" type="int" visibility="public"></dev:method>
			<dev:method name="increment" returncomment="the new value" type="int" visibility="public"></dev:method>
			<dev:method name="multiply" returncomment="the new value" type="int" visibility="public">
				<dev:params>
					<dev:param name="factor" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="negate" returncomment="the new value" type="int" visibility="public"></dev:method>
			<dev:method name="or" returncomment="the new value" type="int" visibility="public">
				<dev:params>
					<dev:param name="b" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="the old value" type="int" visibility="public">
				<dev:params>
					<dev:param name="newValue" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="subtract" returncomment="the new value" type="int" visibility="public">
				<dev:params>
					<dev:param name="amount" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="swap" returncomment="the new value" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="com.amx.common.util.concurrent.SynchronizedInt"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toString" type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="xor" returncomment="the new value" type="int" visibility="public">
				<dev:params>
					<dev:param name="b" type="int"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.SynchronizedFloat" superclass="com.amx.common.util.concurrent.SynchronizedVariable">
		<dev:extends>
			<dev:extend name="java.lang.Comparable"></dev:extend>
			<dev:extend name="java.lang.Cloneable"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="SynchronizedFloat" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="float"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SynchronizedFloat" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="float"></dev:param>
					<dev:param name="lock" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="add" returncomment="the new value" type="float" visibility="public">
				<dev:params>
					<dev:param name="amount" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="commit" returncomment="true if successful" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="assumedValue" type="float"></dev:param>
					<dev:param name="newValue" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="com.amx.common.util.concurrent.SynchronizedFloat"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="divide" returncomment="the new value" type="float" visibility="public">
				<dev:params>
					<dev:param name="factor" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="equals" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="other" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="get" type="float" visibility="public"></dev:method>
			<dev:method name="hashCode" type="int" visibility="public"></dev:method>
			<dev:method name="multiply" returncomment="the new value" type="float" visibility="public">
				<dev:params>
					<dev:param name="factor" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="the old value" type="float" visibility="public">
				<dev:params>
					<dev:param name="newValue" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="subtract" returncomment="the new value" type="float" visibility="public">
				<dev:params>
					<dev:param name="amount" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="swap" returncomment="the new value" type="float" visibility="public">
				<dev:params>
					<dev:param name="other" type="com.amx.common.util.concurrent.SynchronizedFloat"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toString" type="java.lang.String" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.SynchronizedDouble" superclass="com.amx.common.util.concurrent.SynchronizedVariable">
		<dev:extends>
			<dev:extend name="java.lang.Comparable"></dev:extend>
			<dev:extend name="java.lang.Cloneable"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="SynchronizedDouble" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="double"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SynchronizedDouble" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="double"></dev:param>
					<dev:param name="lock" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="add" returncomment="the new value" type="double" visibility="public">
				<dev:params>
					<dev:param name="amount" type="double"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="commit" returncomment="true if successful" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="assumedValue" type="double"></dev:param>
					<dev:param name="newValue" type="double"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="double"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="com.amx.common.util.concurrent.SynchronizedDouble"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="divide" returncomment="the new value" type="double" visibility="public">
				<dev:params>
					<dev:param name="factor" type="double"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="equals" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="other" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="get" type="double" visibility="public"></dev:method>
			<dev:method name="hashCode" type="int" visibility="public"></dev:method>
			<dev:method name="multiply" returncomment="the new value" type="double" visibility="public">
				<dev:params>
					<dev:param name="factor" type="double"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="the old value" type="double" visibility="public">
				<dev:params>
					<dev:param name="newValue" type="double"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="subtract" returncomment="the new value" type="double" visibility="public">
				<dev:params>
					<dev:param name="amount" type="double"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="swap" returncomment="the new value" type="double" visibility="public">
				<dev:params>
					<dev:param name="other" type="com.amx.common.util.concurrent.SynchronizedDouble"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toString" type="java.lang.String" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.SynchronizedChar" superclass="com.amx.common.util.concurrent.SynchronizedVariable">
		<dev:extends>
			<dev:extend name="java.lang.Comparable"></dev:extend>
			<dev:extend name="java.lang.Cloneable"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="SynchronizedChar" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="char"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SynchronizedChar" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="char"></dev:param>
					<dev:param name="lock" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="add" returncomment="the new value" type="char" visibility="public">
				<dev:params>
					<dev:param name="amount" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="commit" returncomment="true if successful" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="assumedValue" type="char"></dev:param>
					<dev:param name="newValue" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="com.amx.common.util.concurrent.SynchronizedChar"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="divide" returncomment="the new value" type="char" visibility="public">
				<dev:params>
					<dev:param name="factor" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="equals" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="other" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="get" type="char" visibility="public"></dev:method>
			<dev:method name="hashCode" type="int" visibility="public"></dev:method>
			<dev:method name="multiply" returncomment="the new value" type="char" visibility="public">
				<dev:params>
					<dev:param name="factor" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="the old value" type="char" visibility="public">
				<dev:params>
					<dev:param name="newValue" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="subtract" returncomment="the new value" type="char" visibility="public">
				<dev:params>
					<dev:param name="amount" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="swap" returncomment="the new value" type="char" visibility="public">
				<dev:params>
					<dev:param name="other" type="com.amx.common.util.concurrent.SynchronizedChar"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toString" type="java.lang.String" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.SynchronizedByte" superclass="com.amx.common.util.concurrent.SynchronizedVariable">
		<dev:extends>
			<dev:extend name="java.lang.Comparable"></dev:extend>
			<dev:extend name="java.lang.Cloneable"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="SynchronizedByte" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="byte"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SynchronizedByte" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="byte"></dev:param>
					<dev:param name="lock" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="add" returncomment="the new value" type="byte" visibility="public">
				<dev:params>
					<dev:param name="amount" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="and" returncomment="the new value" type="byte" visibility="public">
				<dev:params>
					<dev:param name="b" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="commit" returncomment="true if successful" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="assumedValue" type="byte"></dev:param>
					<dev:param name="newValue" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="com.amx.common.util.concurrent.SynchronizedByte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="complement" returncomment="the new value" type="byte" visibility="public"></dev:method>
			<dev:method name="decrement" returncomment="the new value" type="byte" visibility="public"></dev:method>
			<dev:method name="divide" returncomment="the new value" type="byte" visibility="public">
				<dev:params>
					<dev:param name="factor" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="equals" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="other" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="get" type="byte" visibility="public"></dev:method>
			<dev:method name="hashCode" type="int" visibility="public"></dev:method>
			<dev:method name="increment" returncomment="the new value" type="byte" visibility="public"></dev:method>
			<dev:method name="multiply" returncomment="the new value" type="byte" visibility="public">
				<dev:params>
					<dev:param name="factor" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="negate" returncomment="the new value" type="byte" visibility="public"></dev:method>
			<dev:method name="or" returncomment="the new value" type="byte" visibility="public">
				<dev:params>
					<dev:param name="b" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="the old value" type="byte" visibility="public">
				<dev:params>
					<dev:param name="newValue" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="subtract" returncomment="the new value" type="byte" visibility="public">
				<dev:params>
					<dev:param name="amount" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="swap" returncomment="the new value" type="byte" visibility="public">
				<dev:params>
					<dev:param name="other" type="com.amx.common.util.concurrent.SynchronizedByte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toString" type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="xor" returncomment="the new value" type="byte" visibility="public">
				<dev:params>
					<dev:param name="b" type="byte"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.SynchronizedBoolean" superclass="com.amx.common.util.concurrent.SynchronizedVariable">
		<dev:extends>
			<dev:extend name="java.lang.Comparable"></dev:extend>
			<dev:extend name="java.lang.Cloneable"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="SynchronizedBoolean" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="boolean"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SynchronizedBoolean" visibility="public">
				<dev:params>
					<dev:param name="initialValue" type="boolean"></dev:param>
					<dev:param name="lock" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="and" returncomment="the new value" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="b" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="commit" returncomment="true if successful" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="assumedValue" type="boolean"></dev:param>
					<dev:param name="newValue" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="compareTo" type="int" visibility="public">
				<dev:params>
					<dev:param name="other" type="com.amx.common.util.concurrent.SynchronizedBoolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="complement" returncomment="the new value" type="boolean" visibility="public"></dev:method>
			<dev:method name="equals" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="other" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="get" type="boolean" visibility="public"></dev:method>
			<dev:method name="hashCode" type="int" visibility="public"></dev:method>
			<dev:method name="or" returncomment="the new value" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="b" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="the old value" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="newValue" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="swap" returncomment="the new value" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="other" type="com.amx.common.util.concurrent.SynchronizedBoolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toString" type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="xor" returncomment="the new value" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="b" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.SyncCollection" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.util.Collection"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="SyncCollection" visibility="public">
				<dev:params>
					<dev:param name="collection" type="java.util.Collection"></dev:param>
					<dev:param name="rwl" type="com.amx.common.util.concurrent.ReadWriteLock"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SyncCollection" visibility="public">
				<dev:params>
					<dev:param name="collection" type="java.util.Collection"></dev:param>
					<dev:param name="sync" type="com.amx.common.util.concurrent.Sync"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SyncCollection" visibility="public">
				<dev:params>
					<dev:param name="collection" type="java.util.Collection"></dev:param>
					<dev:param name="readLock" type="com.amx.common.util.concurrent.Sync"></dev:param>
					<dev:param name="writeLock" type="com.amx.common.util.concurrent.Sync"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="add" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="addAll" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="coll" type="java.util.Collection"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="clear" type="void" visibility="public"></dev:method>
			<dev:method name="contains" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="containsAll" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="coll" type="java.util.Collection"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isEmpty" type="boolean" visibility="public"></dev:method>
			<dev:method name="iterator" type="java.util.Iterator" visibility="public"></dev:method>
			<dev:method name="readerSync" type="com.amx.common.util.concurrent.Sync" visibility="public"></dev:method>
			<dev:method name="remove" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="removeAll" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="coll" type="java.util.Collection"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="retainAll" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="coll" type="java.util.Collection"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="size" type="int" visibility="public"></dev:method>
			<dev:method name="syncFailures" type="long" visibility="public"></dev:method>
			<dev:method name="toArray" type="java.lang.Object[]" visibility="public"></dev:method>
			<dev:method name="toArray" type="java.lang.Object[]" visibility="public">
				<dev:params>
					<dev:param name="a" type="java.lang.Object[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="unprotectedIterator" type="java.util.Iterator" visibility="public"></dev:method>
			<dev:method name="writerSync" type="com.amx.common.util.concurrent.Sync" visibility="public"></dev:method>
		</dev:methods>
		<dev:class name="com.amx.common.util.concurrent.SyncCollection.SyncCollectionIterator" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="java.util.Iterator"></dev:extend>
			</dev:extends>
			<dev:fields></dev:fields>
		</dev:class>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.SyncCollection.SyncCollectionIterator" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.util.Iterator"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.concurrent.Sync">
		<dev:fields>
			<dev:field const="1000" constexpr="1000l" final="true" fulltype="long" name="ONE_SECOND" static="true" type="long" visibility="public"></dev:field>
			<dev:field const="60000" constexpr="60000l" final="true" fulltype="long" name="ONE_MINUTE" static="true" type="long" visibility="public"></dev:field>
			<dev:field const="3600000" constexpr="3600000l" final="true" fulltype="long" name="ONE_HOUR" static="true" type="long" visibility="public"></dev:field>
			<dev:field const="86400000" constexpr="86400000l" final="true" fulltype="long" name="ONE_DAY" static="true" type="long" visibility="public"></dev:field>
			<dev:field const="604800000" constexpr="604800000l" final="true" fulltype="long" name="ONE_WEEK" static="true" type="long" visibility="public"></dev:field>
			<dev:field const="31556952000" constexpr="31556952000l" final="true" fulltype="long" name="ONE_YEAR" static="true" type="long" visibility="public"></dev:field>
			<dev:field const="3155695200000" constexpr="3155695200000l" final="true" fulltype="long" name="ONE_CENTURY" static="true" type="long" visibility="public"></dev:field>
		</dev:fields>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.Slot" superclass="com.amx.common.util.concurrent.SemaphoreControlledChannel">
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="Slot" visibility="public"></dev:constructor>
			<dev:constructor name="Slot" visibility="public">
				<dev:params>
					<dev:param name="semaphoreClass" type="java.lang.Class"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="peek" type="java.lang.Object" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.concurrent.SemaphoreControlledChannel" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.BoundedChannel"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="SemaphoreControlledChannel" visibility="public">
				<dev:params>
					<dev:param name="capacity" type="int"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="SemaphoreControlledChannel" visibility="public">
				<dev:params>
					<dev:param name="capacity" type="int"></dev:param>
					<dev:param name="semaphoreClass" type="java.lang.Class"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="capacity" type="int" visibility="public"></dev:method>
			<dev:method name="offer" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="x" type="java.lang.Object"></dev:param>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="poll" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="put" type="void" visibility="public">
				<dev:params>
					<dev:param name="x" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="size" type="int" visibility="public"></dev:method>
			<dev:method name="take" type="java.lang.Object" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.Semaphore" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Sync"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="Semaphore" visibility="public">
				<dev:params>
					<dev:param name="initialPermits" type="long"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="acquire" type="void" visibility="public"></dev:method>
			<dev:method name="attempt" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="permits" type="long" visibility="public"></dev:method>
			<dev:method name="release" type="void" visibility="public"></dev:method>
			<dev:method name="release" type="void" visibility="public">
				<dev:params>
					<dev:param name="n" type="long"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.Rendezvous" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Barrier"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="Rendezvous" visibility="public">
				<dev:params>
					<dev:param name="parties" type="int"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="Rendezvous" visibility="public">
				<dev:params>
					<dev:param name="parties" type="int"></dev:param>
					<dev:param name="function" type="com.amx.common.util.concurrent.Rendezvous.RendezvousFunction"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="attemptRendezvous" returncomment="an item x given by some thread, and/or processed by the rendezvousFunction." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="the item to present at rendezvous point. By default, this item is exchanged with another." name="x" type="java.lang.Object"></dev:param>
					<dev:param comment="The maximum time to wait." name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="broken" type="boolean" visibility="public"></dev:method>
			<dev:method name="parties" type="int" visibility="public"></dev:method>
			<dev:method name="rendezvous" returncomment="an item x given by some thread, and/or processed by the rendezvousFunction." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="the item to present at rendezvous point. By default, this item is exchanged with another." name="x" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="restart" type="void" visibility="public"></dev:method>
			<dev:method name="setRendezvousFunction" returncomment="the previous function" type="com.amx.common.util.concurrent.Rendezvous.RendezvousFunction" visibility="public">
				<dev:params>
					<dev:param comment="the function to run. If null, no function is run." name="function" type="com.amx.common.util.concurrent.Rendezvous.RendezvousFunction"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
		<dev:class abstract="true" name="com.amx.common.util.concurrent.Rendezvous.RendezvousFunction"></dev:class>
		<dev:class name="com.amx.common.util.concurrent.Rendezvous.Rotator" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="com.amx.common.util.concurrent.Rendezvous.RendezvousFunction"></dev:extend>
			</dev:extends>
			<dev:methods>
				<dev:constructor name="Rendezvous.Rotator" visibility="public"></dev:constructor>
				<dev:method name="rendezvousFunction" type="void" visibility="public">
					<dev:params>
						<dev:param name="objects" type="java.lang.Object[]"></dev:param>
					</dev:params>
				</dev:method>
			</dev:methods>
		</dev:class>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.concurrent.Rendezvous.RendezvousFunction"></dev:class>
	<dev:class name="com.amx.common.util.concurrent.Rendezvous.Rotator" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Rendezvous.RendezvousFunction"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor name="Rendezvous.Rotator" visibility="public"></dev:constructor>
			<dev:method name="rendezvousFunction" type="void" visibility="public">
				<dev:params>
					<dev:param name="objects" type="java.lang.Object[]"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ReentrantWriterPreferenceReadWriteLock" superclass="com.amx.common.util.concurrent.WriterPreferenceReadWriteLock">
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="ReentrantWriterPreferenceReadWriteLock" visibility="public"></dev:constructor>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ReentrantLock" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Sync"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="ReentrantLock" visibility="public"></dev:constructor>
			<dev:method name="acquire" type="void" visibility="public"></dev:method>
			<dev:method name="attempt" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="holds" type="long" visibility="public"></dev:method>
			<dev:method name="release" type="void" visibility="public"></dev:method>
			<dev:method name="release" type="void" visibility="public">
				<dev:params>
					<dev:param name="n" type="long"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.concurrent.ReadWriteLock"></dev:class>
	<dev:class name="com.amx.common.util.concurrent.ReaderPreferenceReadWriteLock" superclass="com.amx.common.util.concurrent.WriterPreferenceReadWriteLock">
		<dev:methods>
			<dev:constructor name="ReaderPreferenceReadWriteLock" visibility="public"></dev:constructor>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.concurrent.QueuedSemaphore" superclass="com.amx.common.util.concurrent.Semaphore">
		<dev:fields></dev:fields>
		<dev:class abstract="true" name="com.amx.common.util.concurrent.QueuedSemaphore.WaitQueue" superclass="java.lang.Object">
			<dev:methods></dev:methods>
			<dev:class name="com.amx.common.util.concurrent.QueuedSemaphore.WaitQueue.WaitNode" superclass="java.lang.Object">
				<dev:methods></dev:methods>
			</dev:class>
		</dev:class>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.concurrent.QueuedSemaphore.WaitQueue" superclass="java.lang.Object">
		<dev:methods></dev:methods>
		<dev:class name="com.amx.common.util.concurrent.QueuedSemaphore.WaitQueue.WaitNode" superclass="java.lang.Object">
			<dev:methods></dev:methods>
		</dev:class>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.QueuedSemaphore.WaitQueue.WaitNode" superclass="java.lang.Object">
		<dev:methods></dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.QueuedExecutor" superclass="com.amx.common.util.concurrent.ThreadFactoryUser">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Executor"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="QueuedExecutor" visibility="public"></dev:constructor>
			<dev:constructor name="QueuedExecutor" visibility="public">
				<dev:params>
					<dev:param name="queue" type="com.amx.common.util.concurrent.Channel"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="execute" type="void" visibility="public">
				<dev:params>
					<dev:param name="command" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getThread" type="java.lang.Thread" visibility="public"></dev:method>
			<dev:method name="restart" type="void" visibility="public"></dev:method>
			<dev:method name="shutdownAfterProcessingCurrentlyQueuedTasks" type="void" visibility="public"></dev:method>
			<dev:method name="shutdownAfterProcessingCurrentTask" type="void" visibility="public"></dev:method>
			<dev:method name="shutdownNow" type="void" visibility="public"></dev:method>
		</dev:methods>
		<dev:class name="com.amx.common.util.concurrent.QueuedExecutor.RunLoop" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="java.lang.Runnable"></dev:extend>
			</dev:extends>
			<dev:methods>
				<dev:method name="run" type="void" visibility="public"></dev:method>
			</dev:methods>
		</dev:class>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.QueuedExecutor.RunLoop" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.lang.Runnable"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:method name="run" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.concurrent.Puttable"></dev:class>
	<dev:class name="com.amx.common.util.concurrent.PropertyChangeMulticaster" serializable="true" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.io.Serializable"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="PropertyChangeMulticaster" visibility="public">
				<dev:params>
					<dev:param comment="The bean to be given as the source for any events." name="sourceBean" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="addPropertyChangeListener" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The PropertyChangeListener to be added" name="listener" type="com.amx.common.util.beans.PropertyChangeListener"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="addPropertyChangeListener" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The name of the property to listen on." name="propertyName" type="java.lang.String"></dev:param>
					<dev:param comment="The PropertyChangeListener to be added" name="listener" type="com.amx.common.util.beans.PropertyChangeListener"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="addPropertyChangeListenerIfAbsent" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The PropertyChangeListener to be added" name="listener" type="com.amx.common.util.beans.PropertyChangeListener"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="addPropertyChangeListenerIfAbsent" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The name of the property to listen on." name="propertyName" type="java.lang.String"></dev:param>
					<dev:param comment="The PropertyChangeListener to be added" name="listener" type="com.amx.common.util.beans.PropertyChangeListener"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="firePropertyChange" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The PropertyChangeEvent object." name="evt" type="com.amx.common.util.beans.PropertyChangeEvent"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="firePropertyChange" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The programmatic name of the property that was changed." name="propertyName" type="java.lang.String"></dev:param>
					<dev:param comment="The old value of the property." name="oldValue" type="boolean"></dev:param>
					<dev:param comment="The new value of the property." name="newValue" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="firePropertyChange" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The programmatic name of the property that was changed." name="propertyName" type="java.lang.String"></dev:param>
					<dev:param comment="The old value of the property." name="oldValue" type="int"></dev:param>
					<dev:param comment="The new value of the property." name="newValue" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="firePropertyChange" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The programmatic name of the property that was changed." name="propertyName" type="java.lang.String"></dev:param>
					<dev:param comment="The old value of the property." name="oldValue" type="java.lang.Object"></dev:param>
					<dev:param comment="The new value of the property." name="newValue" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="hasListeners" returncomment="true if there are one or more listeners for the given property" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the property name." name="propertyName" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="removePropertyChangeListener" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The PropertyChangeListener to be removed" name="listener" type="com.amx.common.util.beans.PropertyChangeListener"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="removePropertyChangeListener" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The name of the property that was listened on." name="propertyName" type="java.lang.String"></dev:param>
					<dev:param comment="The PropertyChangeListener to be removed" name="listener" type="com.amx.common.util.beans.PropertyChangeListener"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.PrioritySemaphore" superclass="com.amx.common.util.concurrent.QueuedSemaphore">
		<dev:class name="com.amx.common.util.concurrent.PrioritySemaphore.PriorityWaitQueue" superclass="com.amx.common.util.concurrent.QueuedSemaphore.WaitQueue">
			<dev:fields></dev:fields>
			<dev:methods></dev:methods>
		</dev:class>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.PrioritySemaphore.PriorityWaitQueue" superclass="com.amx.common.util.concurrent.QueuedSemaphore.WaitQueue">
		<dev:fields></dev:fields>
		<dev:methods></dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.PooledExecutor" superclass="com.amx.common.util.concurrent.ThreadFactoryUser">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Executor"></dev:extend>
		</dev:extends>
		<dev:fields>
			<dev:field const="2147483647" constexpr="2147483647" final="true" fulltype="int" name="DEFAULT_MAXIMUMPOOLSIZE" static="true" type="int" visibility="public"></dev:field>
			<dev:field const="1" constexpr="1" final="true" fulltype="int" name="DEFAULT_MINIMUMPOOLSIZE" static="true" type="int" visibility="public"></dev:field>
			<dev:field const="60000" constexpr="60000l" final="true" fulltype="long" name="DEFAULT_KEEPALIVETIME" static="true" type="long" visibility="public"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor name="PooledExecutor" visibility="public"></dev:constructor>
			<dev:constructor name="PooledExecutor" visibility="public">
				<dev:params>
					<dev:param name="channel" type="com.amx.common.util.concurrent.Channel"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="PooledExecutor" visibility="public">
				<dev:params>
					<dev:param name="channel" type="com.amx.common.util.concurrent.Channel"></dev:param>
					<dev:param name="maxPoolSize" type="int"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="PooledExecutor" visibility="public">
				<dev:params>
					<dev:param name="maxPoolSize" type="int"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="abortWhenBlocked" type="void" visibility="public"></dev:method>
			<dev:method name="awaitTerminationAfterShutdown" type="void" visibility="public"></dev:method>
			<dev:method name="awaitTerminationAfterShutdown" returncomment="true if the pool has terminated within the max wait period" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the maximum time in milliseconds to wait" name="maxWaitTime" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="createThreads" type="int" visibility="public">
				<dev:params>
					<dev:param name="numberOfThreads" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="discardOldestWhenBlocked" type="void" visibility="public"></dev:method>
			<dev:method name="discardWhenBlocked" type="void" visibility="public"></dev:method>
			<dev:method name="drain" type="java.util.List" visibility="public"></dev:method>
			<dev:method name="execute" type="void" visibility="public">
				<dev:params>
					<dev:param name="command" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getBlockedExecutionHandler" type="com.amx.common.util.concurrent.PooledExecutor.BlockedExecutionHandler" visibility="public"></dev:method>
			<dev:method name="getKeepAliveTime" type="long" visibility="public"></dev:method>
			<dev:method name="getMaximumPoolSize" type="int" visibility="public"></dev:method>
			<dev:method name="getMinimumPoolSize" type="int" visibility="public"></dev:method>
			<dev:method name="getPoolSize" type="int" visibility="public"></dev:method>
			<dev:method name="interruptAll" type="void" visibility="public"></dev:method>
			<dev:method name="isTerminatedAfterShutdown" type="boolean" visibility="public"></dev:method>
			<dev:method name="runWhenBlocked" type="void" visibility="public"></dev:method>
			<dev:method name="setBlockedExecutionHandler" type="void" visibility="public">
				<dev:params>
					<dev:param name="h" type="com.amx.common.util.concurrent.PooledExecutor.BlockedExecutionHandler"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setKeepAliveTime" type="void" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setMaximumPoolSize" type="void" visibility="public">
				<dev:params>
					<dev:param name="newMaximum" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setMinimumPoolSize" type="void" visibility="public">
				<dev:params>
					<dev:param name="newMinimum" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="shutdownAfterProcessingCurrentlyQueuedTasks" type="void" visibility="public"></dev:method>
			<dev:method name="shutdownAfterProcessingCurrentlyQueuedTasks" type="void" visibility="public">
				<dev:params>
					<dev:param name="handler" type="com.amx.common.util.concurrent.PooledExecutor.BlockedExecutionHandler"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="shutdownNow" type="void" visibility="public"></dev:method>
			<dev:method name="shutdownNow" type="void" visibility="public">
				<dev:params>
					<dev:param name="handler" type="com.amx.common.util.concurrent.PooledExecutor.BlockedExecutionHandler"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="waitWhenBlocked" type="void" visibility="public"></dev:method>
		</dev:methods>
		<dev:class abstract="true" name="com.amx.common.util.concurrent.PooledExecutor.BlockedExecutionHandler"></dev:class>
		<dev:class name="com.amx.common.util.concurrent.PooledExecutor.AbortWhenBlocked" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="com.amx.common.util.concurrent.PooledExecutor.BlockedExecutionHandler"></dev:extend>
			</dev:extends>
			<dev:methods>
				<dev:method name="blockedAction" type="boolean" visibility="public">
					<dev:params>
						<dev:param name="command" type="java.lang.Runnable"></dev:param>
					</dev:params>
				</dev:method>
			</dev:methods>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.PooledExecutor.DiscardOldestWhenBlocked" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="com.amx.common.util.concurrent.PooledExecutor.BlockedExecutionHandler"></dev:extend>
			</dev:extends>
			<dev:methods>
				<dev:method name="blockedAction" type="boolean" visibility="public">
					<dev:params>
						<dev:param name="command" type="java.lang.Runnable"></dev:param>
					</dev:params>
				</dev:method>
			</dev:methods>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.PooledExecutor.DiscardWhenBlocked" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="com.amx.common.util.concurrent.PooledExecutor.BlockedExecutionHandler"></dev:extend>
			</dev:extends>
			<dev:methods>
				<dev:method name="blockedAction" type="boolean" visibility="public">
					<dev:params>
						<dev:param name="command" type="java.lang.Runnable"></dev:param>
					</dev:params>
				</dev:method>
			</dev:methods>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.PooledExecutor.RunWhenBlocked" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="com.amx.common.util.concurrent.PooledExecutor.BlockedExecutionHandler"></dev:extend>
			</dev:extends>
			<dev:methods>
				<dev:method name="blockedAction" type="boolean" visibility="public">
					<dev:params>
						<dev:param name="command" type="java.lang.Runnable"></dev:param>
					</dev:params>
				</dev:method>
			</dev:methods>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.PooledExecutor.WaitWhenBlocked" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="com.amx.common.util.concurrent.PooledExecutor.BlockedExecutionHandler"></dev:extend>
			</dev:extends>
			<dev:methods>
				<dev:method name="blockedAction" type="boolean" visibility="public">
					<dev:params>
						<dev:param name="command" type="java.lang.Runnable"></dev:param>
					</dev:params>
				</dev:method>
			</dev:methods>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.PooledExecutor.Worker" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="java.lang.Runnable"></dev:extend>
			</dev:extends>
			<dev:fields></dev:fields>
			<dev:methods>
				<dev:method name="run" type="void" visibility="public"></dev:method>
			</dev:methods>
		</dev:class>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.concurrent.PooledExecutor.BlockedExecutionHandler"></dev:class>
	<dev:class name="com.amx.common.util.concurrent.PooledExecutor.AbortWhenBlocked" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.PooledExecutor.BlockedExecutionHandler"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:method name="blockedAction" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="command" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.PooledExecutor.DiscardOldestWhenBlocked" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.PooledExecutor.BlockedExecutionHandler"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:method name="blockedAction" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="command" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.PooledExecutor.DiscardWhenBlocked" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.PooledExecutor.BlockedExecutionHandler"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:method name="blockedAction" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="command" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.PooledExecutor.RunWhenBlocked" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.PooledExecutor.BlockedExecutionHandler"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:method name="blockedAction" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="command" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.PooledExecutor.WaitWhenBlocked" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.PooledExecutor.BlockedExecutionHandler"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:method name="blockedAction" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="command" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.PooledExecutor.Worker" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.lang.Runnable"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:method name="run" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ObservableSync" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Sync"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="ObservableSync" visibility="public">
				<dev:params>
					<dev:param name="notificationArgument" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="acquire" type="void" visibility="public"></dev:method>
			<dev:method name="attach" type="void" visibility="public">
				<dev:params>
					<dev:param name="obs" type="com.amx.common.util.concurrent.ObservableSync.SyncObserver"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="attempt" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="detach" type="void" visibility="public">
				<dev:params>
					<dev:param name="obs" type="com.amx.common.util.concurrent.ObservableSync.SyncObserver"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getNotificationArgument" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="observers" type="java.util.Iterator" visibility="public"></dev:method>
			<dev:method name="release" type="void" visibility="public"></dev:method>
			<dev:method name="setNotificationArgument" returncomment="the previous value of this argument" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="notificationArg" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
		<dev:class abstract="true" name="com.amx.common.util.concurrent.ObservableSync.SyncObserver"></dev:class>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.concurrent.ObservableSync.SyncObserver"></dev:class>
	<dev:class name="com.amx.common.util.concurrent.NullSync" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Sync"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor name="NullSync" visibility="public"></dev:constructor>
			<dev:method name="acquire" type="void" visibility="public"></dev:method>
			<dev:method name="attempt" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="release" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.Mutex" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Sync"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="Mutex" visibility="public"></dev:constructor>
			<dev:method name="acquire" type="void" visibility="public"></dev:method>
			<dev:method name="attempt" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="release" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.LockedExecutor" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Executor"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="LockedExecutor" visibility="public">
				<dev:params>
					<dev:param comment="Any mutual exclusion lock. Standard usage is to supply an instance of &lt;code&gt;Mutex&lt;/code&gt;, but, for example, a Semaphore             initialized to 1 also works. On the other hand, many other Sync implementations would not work here, so some care is             required to supply a sensible synchronization object." name="mutex" type="com.amx.common.util.concurrent.Sync"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="execute" type="void" visibility="public">
				<dev:params>
					<dev:param name="command" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.LinkedQueue" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Channel"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="LinkedQueue" visibility="public"></dev:constructor>
			<dev:method name="isEmpty" type="boolean" visibility="public"></dev:method>
			<dev:method name="offer" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="x" type="java.lang.Object"></dev:param>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="peek" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="poll" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="put" type="void" visibility="public">
				<dev:params>
					<dev:param name="x" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="take" type="java.lang.Object" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.LinkedNode" superclass="java.lang.Object">
		<dev:fields>
			<dev:field fulltype="java.lang.Object" name="value" type="Object" visibility="public"></dev:field>
			<dev:field fulltype="com.amx.common.util.concurrent.LinkedNode" name="next" type="LinkedNode" visibility="public"></dev:field>
		</dev:fields>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.LayeredSync" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Sync"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="LayeredSync" visibility="public">
				<dev:params>
					<dev:param name="outer" type="com.amx.common.util.concurrent.Sync"></dev:param>
					<dev:param name="inner" type="com.amx.common.util.concurrent.Sync"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="acquire" type="void" visibility="public"></dev:method>
			<dev:method name="attempt" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="release" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.Latch" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Sync"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="Latch" visibility="public"></dev:constructor>
			<dev:method name="acquire" type="void" visibility="public"></dev:method>
			<dev:method name="attempt" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="release" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.Heap" superclass="java.lang.Object">
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="Heap" visibility="public">
				<dev:params>
					<dev:param name="capacity" type="int"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="Heap" visibility="public">
				<dev:params>
					<dev:param name="capacity" type="int"></dev:param>
					<dev:param name="cmp" type="java.util.Comparator"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="clear" type="void" visibility="public"></dev:method>
			<dev:method name="extract" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="insert" type="void" visibility="public">
				<dev:params>
					<dev:param name="x" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="peek" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="size" type="int" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.FutureResult" superclass="java.lang.Object">
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="FutureResult" visibility="public"></dev:constructor>
			<dev:method name="clear" type="void" visibility="public"></dev:method>
			<dev:method name="get" returncomment="current value" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="getException" returncomment="the exception encountered by the operation setting the future, wrapped in an InvocationTargetException" type="java.lang.reflect.InvocationTargetException" visibility="public"></dev:method>
			<dev:method name="isReady" returncomment="true if has been set. else false" type="boolean" visibility="public"></dev:method>
			<dev:method name="peek" returncomment="current value" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="set" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The value that will be returned by a subsequent get();" name="newValue" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setException" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The exception. It will be reported out wrapped within an InvocationTargetException" name="ex" type="java.lang.Throwable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setter" returncomment="A Runnable object that, when run, will call the function and (eventually) set the result." type="java.lang.Runnable" visibility="public">
				<dev:params>
					<dev:param comment="- a Callable object whose result will be held by this FutureResult." name="function" type="com.amx.common.util.concurrent.Callable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="timedGet" returncomment="current value" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.FJTaskRunnerGroup" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Executor"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="FJTaskRunnerGroup" visibility="public">
				<dev:params>
					<dev:param name="groupSize" type="int"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="execute" type="void" visibility="public">
				<dev:params>
					<dev:param name="r" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="executeTask" type="void" visibility="public">
				<dev:params>
					<dev:param name="t" type="com.amx.common.util.concurrent.FJTask"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getActiveCount" type="int" visibility="public"></dev:method>
			<dev:method name="interruptAll" type="void" visibility="public"></dev:method>
			<dev:method name="invoke" type="void" visibility="public">
				<dev:params>
					<dev:param name="r" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setRunPriorities" type="void" visibility="public">
				<dev:params>
					<dev:param name="pri" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setScanPriorities" type="void" visibility="public">
				<dev:params>
					<dev:param name="pri" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="size" type="int" visibility="public"></dev:method>
			<dev:method name="stats" type="void" visibility="public"></dev:method>
		</dev:methods>
		<dev:class name="com.amx.common.util.concurrent.FJTaskRunnerGroup.InvokableFJTask" superclass="com.amx.common.util.concurrent.FJTask">
			<dev:fields></dev:fields>
			<dev:methods>
				<dev:method name="run" type="void" visibility="public"></dev:method>
			</dev:methods>
		</dev:class>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.FJTaskRunnerGroup.InvokableFJTask" superclass="com.amx.common.util.concurrent.FJTask">
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:method name="run" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.FJTaskRunner" superclass="java.lang.Thread">
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:method name="run" type="void" visibility="public"></dev:method>
		</dev:methods>
		<dev:class name="com.amx.common.util.concurrent.FJTaskRunner.VolatileTaskRef" superclass="java.lang.Object">
			<dev:fields></dev:fields>
			<dev:methods></dev:methods>
		</dev:class>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.FJTaskRunner.VolatileTaskRef" superclass="java.lang.Object">
		<dev:fields></dev:fields>
		<dev:methods></dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.concurrent.FJTask" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.lang.Runnable"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor name="FJTask" visibility="public"></dev:constructor>
			<dev:method name="coInvoke" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param name="task1" type="com.amx.common.util.concurrent.FJTask"></dev:param>
					<dev:param name="task2" type="com.amx.common.util.concurrent.FJTask"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="coInvoke" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param name="tasks" type="com.amx.common.util.concurrent.FJTask[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getFJTaskRunner" static="true" type="com.amx.common.util.concurrent.FJTaskRunner" visibility="public"></dev:method>
			<dev:method name="getFJTaskRunnerGroup" static="true" type="com.amx.common.util.concurrent.FJTaskRunnerGroup" visibility="public"></dev:method>
			<dev:method name="invoke" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param name="t" type="com.amx.common.util.concurrent.FJTask"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="par" static="true" type="com.amx.common.util.concurrent.FJTask" visibility="public">
				<dev:params>
					<dev:param name="task1" type="com.amx.common.util.concurrent.FJTask"></dev:param>
					<dev:param name="task2" type="com.amx.common.util.concurrent.FJTask"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="par" static="true" type="com.amx.common.util.concurrent.FJTask" visibility="public">
				<dev:params>
					<dev:param name="tasks" type="com.amx.common.util.concurrent.FJTask[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="seq" static="true" type="com.amx.common.util.concurrent.FJTask" visibility="public">
				<dev:params>
					<dev:param name="task1" type="com.amx.common.util.concurrent.FJTask"></dev:param>
					<dev:param name="task2" type="com.amx.common.util.concurrent.FJTask"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="seq" static="true" type="com.amx.common.util.concurrent.FJTask" visibility="public">
				<dev:params>
					<dev:param name="tasks" type="com.amx.common.util.concurrent.FJTask[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="yield" static="true" type="void" visibility="public"></dev:method>
			<dev:method name="cancel" type="void" visibility="public"></dev:method>
			<dev:method name="fork" type="void" visibility="public"></dev:method>
			<dev:method final="true" name="isDone" type="boolean" visibility="public"></dev:method>
			<dev:method name="join" type="void" visibility="public"></dev:method>
			<dev:method name="reset" type="void" visibility="public"></dev:method>
			<dev:method name="start" type="void" visibility="public"></dev:method>
		</dev:methods>
		<dev:class name="com.amx.common.util.concurrent.FJTask.Par" superclass="com.amx.common.util.concurrent.FJTask">
			<dev:fields></dev:fields>
			<dev:methods>
				<dev:constructor name="FJTask.Par" visibility="public">
					<dev:params>
						<dev:param name="task1" type="com.amx.common.util.concurrent.FJTask"></dev:param>
						<dev:param name="task2" type="com.amx.common.util.concurrent.FJTask"></dev:param>
					</dev:params>
				</dev:constructor>
				<dev:constructor name="FJTask.Par" visibility="public">
					<dev:params>
						<dev:param name="tasks" type="com.amx.common.util.concurrent.FJTask[]"></dev:param>
					</dev:params>
				</dev:constructor>
				<dev:method name="run" type="void" visibility="public"></dev:method>
			</dev:methods>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.FJTask.Par2" superclass="com.amx.common.util.concurrent.FJTask">
			<dev:fields></dev:fields>
			<dev:methods>
				<dev:constructor name="FJTask.Par2" visibility="public">
					<dev:params>
						<dev:param name="task1" type="com.amx.common.util.concurrent.FJTask"></dev:param>
						<dev:param name="task2" type="com.amx.common.util.concurrent.FJTask"></dev:param>
					</dev:params>
				</dev:constructor>
				<dev:method name="run" type="void" visibility="public"></dev:method>
			</dev:methods>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.FJTask.Seq" superclass="com.amx.common.util.concurrent.FJTask">
			<dev:fields></dev:fields>
			<dev:methods>
				<dev:constructor name="FJTask.Seq" visibility="public">
					<dev:params>
						<dev:param name="task1" type="com.amx.common.util.concurrent.FJTask"></dev:param>
						<dev:param name="task2" type="com.amx.common.util.concurrent.FJTask"></dev:param>
					</dev:params>
				</dev:constructor>
				<dev:constructor name="FJTask.Seq" visibility="public">
					<dev:params>
						<dev:param name="tasks" type="com.amx.common.util.concurrent.FJTask[]"></dev:param>
					</dev:params>
				</dev:constructor>
				<dev:method name="run" type="void" visibility="public"></dev:method>
			</dev:methods>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.FJTask.Seq2" superclass="com.amx.common.util.concurrent.FJTask">
			<dev:fields></dev:fields>
			<dev:methods>
				<dev:constructor name="FJTask.Seq2" visibility="public">
					<dev:params>
						<dev:param name="task1" type="com.amx.common.util.concurrent.FJTask"></dev:param>
						<dev:param name="task2" type="com.amx.common.util.concurrent.FJTask"></dev:param>
					</dev:params>
				</dev:constructor>
				<dev:method name="run" type="void" visibility="public"></dev:method>
			</dev:methods>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.FJTask.Wrap" superclass="com.amx.common.util.concurrent.FJTask">
			<dev:fields></dev:fields>
			<dev:methods>
				<dev:constructor name="FJTask.Wrap" visibility="public">
					<dev:params>
						<dev:param name="r" type="java.lang.Runnable"></dev:param>
					</dev:params>
				</dev:constructor>
				<dev:method name="run" type="void" visibility="public"></dev:method>
			</dev:methods>
		</dev:class>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.FJTask.Par" superclass="com.amx.common.util.concurrent.FJTask">
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="FJTask.Par" visibility="public">
				<dev:params>
					<dev:param name="task1" type="com.amx.common.util.concurrent.FJTask"></dev:param>
					<dev:param name="task2" type="com.amx.common.util.concurrent.FJTask"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="FJTask.Par" visibility="public">
				<dev:params>
					<dev:param name="tasks" type="com.amx.common.util.concurrent.FJTask[]"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="run" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.FJTask.Par2" superclass="com.amx.common.util.concurrent.FJTask">
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="FJTask.Par2" visibility="public">
				<dev:params>
					<dev:param name="task1" type="com.amx.common.util.concurrent.FJTask"></dev:param>
					<dev:param name="task2" type="com.amx.common.util.concurrent.FJTask"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="run" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.FJTask.Seq" superclass="com.amx.common.util.concurrent.FJTask">
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="FJTask.Seq" visibility="public">
				<dev:params>
					<dev:param name="task1" type="com.amx.common.util.concurrent.FJTask"></dev:param>
					<dev:param name="task2" type="com.amx.common.util.concurrent.FJTask"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="FJTask.Seq" visibility="public">
				<dev:params>
					<dev:param name="tasks" type="com.amx.common.util.concurrent.FJTask[]"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="run" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.FJTask.Seq2" superclass="com.amx.common.util.concurrent.FJTask">
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="FJTask.Seq2" visibility="public">
				<dev:params>
					<dev:param name="task1" type="com.amx.common.util.concurrent.FJTask"></dev:param>
					<dev:param name="task2" type="com.amx.common.util.concurrent.FJTask"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="run" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.FJTask.Wrap" superclass="com.amx.common.util.concurrent.FJTask">
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="FJTask.Wrap" visibility="public">
				<dev:params>
					<dev:param name="r" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="run" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.FIFOSemaphore" superclass="com.amx.common.util.concurrent.QueuedSemaphore">
		<dev:class name="com.amx.common.util.concurrent.FIFOSemaphore.FIFOWaitQueue" superclass="com.amx.common.util.concurrent.QueuedSemaphore.WaitQueue">
			<dev:fields></dev:fields>
			<dev:methods></dev:methods>
		</dev:class>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.FIFOSemaphore.FIFOWaitQueue" superclass="com.amx.common.util.concurrent.QueuedSemaphore.WaitQueue">
		<dev:fields></dev:fields>
		<dev:methods></dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.FIFOReadWriteLock" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.ReadWriteLock"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="FIFOReadWriteLock" visibility="public"></dev:constructor>
			<dev:method name="readLock" type="com.amx.common.util.concurrent.Sync" visibility="public"></dev:method>
			<dev:method name="writeLock" type="com.amx.common.util.concurrent.Sync" visibility="public"></dev:method>
		</dev:methods>
		<dev:class name="com.amx.common.util.concurrent.FIFOReadWriteLock.ReaderSync" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="com.amx.common.util.concurrent.Sync"></dev:extend>
			</dev:extends>
			<dev:methods>
				<dev:method name="acquire" type="void" visibility="public"></dev:method>
				<dev:method name="attempt" type="boolean" visibility="public">
					<dev:params>
						<dev:param name="msecs" type="long"></dev:param>
					</dev:params>
				</dev:method>
				<dev:method name="release" type="void" visibility="public"></dev:method>
			</dev:methods>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.FIFOReadWriteLock.WriterSync" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="com.amx.common.util.concurrent.Sync"></dev:extend>
			</dev:extends>
			<dev:methods>
				<dev:method name="acquire" type="void" visibility="public"></dev:method>
				<dev:method name="attempt" type="boolean" visibility="public">
					<dev:params>
						<dev:param name="msecs" type="long"></dev:param>
					</dev:params>
				</dev:method>
				<dev:method name="release" type="void" visibility="public"></dev:method>
			</dev:methods>
		</dev:class>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.FIFOReadWriteLock.ReaderSync" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Sync"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:method name="acquire" type="void" visibility="public"></dev:method>
			<dev:method name="attempt" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="release" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.FIFOReadWriteLock.WriterSync" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Sync"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:method name="acquire" type="void" visibility="public"></dev:method>
			<dev:method name="attempt" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="release" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.concurrent.Executor"></dev:class>
	<dev:class name="com.amx.common.util.concurrent.DirectExecutor" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Executor"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor name="DirectExecutor" visibility="public"></dev:constructor>
			<dev:method name="execute" type="void" visibility="public">
				<dev:params>
					<dev:param name="command" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.DefaultChannelCapacity" superclass="java.lang.Object">
		<dev:fields>
			<dev:field const="1024" constexpr="1024" final="true" fulltype="int" name="INITIAL_DEFAULT_CAPACITY" static="true" type="int" visibility="public"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor name="DefaultChannelCapacity" visibility="public"></dev:constructor>
			<dev:method name="get" static="true" type="int" visibility="public"></dev:method>
			<dev:method name="set" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param name="capacity" type="int"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.CyclicBarrier" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Barrier"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="CyclicBarrier" visibility="public">
				<dev:params>
					<dev:param name="parties" type="int"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="CyclicBarrier" visibility="public">
				<dev:params>
					<dev:param name="parties" type="int"></dev:param>
					<dev:param name="command" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="attemptBarrier" returncomment="if not timed out, the arrival index: the number of other parties that were still waiting upon entry. This is a unique value          from zero to parties()-1. If it is zero, then the current thread was the last party to hit barrier point and so was          responsible for releasing the others." type="int" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="barrier" returncomment="the arrival index: the number of other parties that were still waiting upon entry. This is a unique value from zero to          parties()-1. If it is zero, then the current thread was the last party to hit barrier point and so was responsible for          releasing the others." type="int" visibility="public"></dev:method>
			<dev:method name="broken" type="boolean" visibility="public"></dev:method>
			<dev:method name="parties" type="int" visibility="public"></dev:method>
			<dev:method name="restart" type="void" visibility="public"></dev:method>
			<dev:method name="setBarrierCommand" returncomment="the previous command" type="java.lang.Runnable" visibility="public">
				<dev:params>
					<dev:param comment="the command to run. If null, no command is run." name="command" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.CountDown" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Sync"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="CountDown" visibility="public">
				<dev:params>
					<dev:param name="count" type="int"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="acquire" type="void" visibility="public"></dev:method>
			<dev:method name="attempt" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="currentCount" type="int" visibility="public"></dev:method>
			<dev:method name="initialCount" type="int" visibility="public"></dev:method>
			<dev:method name="release" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.CopyOnWriteArraySet" serializable="true" superclass="java.util.AbstractSet">
		<dev:extends>
			<dev:extend name="java.lang.Cloneable"></dev:extend>
			<dev:extend name="java.io.Serializable"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="CopyOnWriteArraySet" visibility="public"></dev:constructor>
			<dev:constructor name="CopyOnWriteArraySet" visibility="public">
				<dev:params>
					<dev:param name="c" type="java.util.Collection"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="add" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="addAll" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="c" type="java.util.Collection"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="clear" type="void" visibility="public"></dev:method>
			<dev:method name="contains" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="containsAll" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="c" type="java.util.Collection"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isEmpty" type="boolean" visibility="public"></dev:method>
			<dev:method name="iterator" type="java.util.Iterator" visibility="public"></dev:method>
			<dev:method name="remove" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="removeAll" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="c" type="java.util.Collection"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="retainAll" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="c" type="java.util.Collection"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="size" type="int" visibility="public"></dev:method>
			<dev:method name="toArray" type="java.lang.Object[]" visibility="public"></dev:method>
			<dev:method name="toArray" type="java.lang.Object[]" visibility="public">
				<dev:params>
					<dev:param name="a" type="java.lang.Object[]"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.CopyOnWriteArrayList" serializable="true" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.util.List"></dev:extend>
			<dev:extend name="java.lang.Cloneable"></dev:extend>
			<dev:extend name="java.io.Serializable"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="CopyOnWriteArrayList" visibility="public"></dev:constructor>
			<dev:constructor name="CopyOnWriteArrayList" visibility="public">
				<dev:params>
					<dev:param name="c" type="java.util.Collection"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="CopyOnWriteArrayList" visibility="public">
				<dev:params>
					<dev:param comment="the array. A copy of this array is used as the internal array." name="toCopyIn" type="java.lang.Object[]"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="add" type="void" visibility="public">
				<dev:params>
					<dev:param comment="index at which the specified element is to be inserted." name="index" type="int"></dev:param>
					<dev:param comment="element to be inserted." name="element" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="add" returncomment="true (as per the general contract of Collection.add)." type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="element to be appended to this list." name="element" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="addAll" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="elements to be inserted into this list." name="c" type="java.util.Collection"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="addAll" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="index at which to insert first element from the specified collection." name="index" type="int"></dev:param>
					<dev:param comment="elements to be inserted into this list." name="c" type="java.util.Collection"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="addAllAbsent" returncomment="the number of elements added" type="int" visibility="public">
				<dev:params>
					<dev:param comment="elements to be added into this list." name="c" type="java.util.Collection"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="addIfAbsent" returncomment="true if added" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="element to be added to this Collection, if absent." name="element" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="clear" type="void" visibility="public"></dev:method>
			<dev:method name="clone" returncomment="a clone of this list." type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="contains" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="elem" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="containsAll" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="c" type="java.util.Collection"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="copyIn" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the array. A copy of the indicated elements of this array is used as the internal array." name="toCopyIn" type="java.lang.Object[]"></dev:param>
					<dev:param comment="The index of first position of the array to start copying from." name="first" type="int"></dev:param>
					<dev:param comment="the number of elements to copy. This will be the new size of the list." name="n" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="equals" returncomment="true if the specified Object is equal to this List." type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the Object to be compared for equality with this List." name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="get" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="index of element to return." name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="hashCode" type="int" visibility="public"></dev:method>
			<dev:method name="indexOf" returncomment="the index of the first occurrence of the argument in this list; returns &lt;code&gt;-1&lt;/code&gt; if the object is not found." type="int" visibility="public">
				<dev:params>
					<dev:param comment="an object." name="elem" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOf" returncomment="the index of the first occurrence of the object argument in this List at position &lt;code&gt;index&lt;/code&gt; or later in the List;          returns &lt;code&gt;-1&lt;/code&gt; if the object is not found." type="int" visibility="public">
				<dev:params>
					<dev:param comment="an object." name="elem" type="java.lang.Object"></dev:param>
					<dev:param comment="the index to start searching from." name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isEmpty" returncomment="&lt;code&gt;true&lt;/code&gt; if this list has no components; &lt;code&gt;false&lt;/code&gt; otherwise." type="boolean" visibility="public"></dev:method>
			<dev:method name="iterator" type="java.util.Iterator" visibility="public"></dev:method>
			<dev:method name="lastIndexOf" returncomment="the index of the last occurrence of the specified object in this list; returns -1 if the object is not found." type="int" visibility="public">
				<dev:params>
					<dev:param comment="the desired component." name="elem" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="lastIndexOf" returncomment="the index of the last occurrence of the specified object in this List at position less than index in the List; -1 if the          object is not found." type="int" visibility="public">
				<dev:params>
					<dev:param comment="the desired component." name="elem" type="java.lang.Object"></dev:param>
					<dev:param comment="the index to start searching from." name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="listIterator" type="java.util.ListIterator" visibility="public"></dev:method>
			<dev:method name="listIterator" type="java.util.ListIterator" visibility="public">
				<dev:params>
					<dev:param comment="index of first element to be returned from the ListIterator (by a call to getNext)." name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="remove" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="the index of the element to removed." name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="remove" returncomment="true if the Collection changed as a result of the call." type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="element to be removed from this Collection, if present." name="element" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="removeAll" returncomment="true if this Collection changed as a result of the call." type="boolean" visibility="public">
				<dev:params>
					<dev:param name="c" type="java.util.Collection"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="removeRange" type="void" visibility="public">
				<dev:params>
					<dev:param comment="index after last element to be removed." name="fromIndex" type="int"></dev:param>
					<dev:param name="toIndex" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="retainAll" returncomment="true if this Collection changed as a result of the call." type="boolean" visibility="public">
				<dev:params>
					<dev:param name="c" type="java.util.Collection"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="the element previously at the specified position." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="index of element to replace." name="index" type="int"></dev:param>
					<dev:param comment="element to be stored at the specified position." name="element" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="size" returncomment="the number of components in this list." type="int" visibility="public"></dev:method>
			<dev:method name="subList" returncomment="a view of the specified range within this List." type="java.util.List" visibility="public">
				<dev:params>
					<dev:param comment="low endpoint (inclusive) of the subList." name="fromIndex" type="int"></dev:param>
					<dev:param name="toIndex" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toArray" type="java.lang.Object[]" visibility="public"></dev:method>
			<dev:method name="toArray" returncomment="an array containing the elements of the list." type="java.lang.Object[]" visibility="public">
				<dev:params>
					<dev:param comment="the array into which the elements of the list are to be stored, if it is big enough; otherwise, a new array of the same             runtime type is allocated for this purpose." name="a" type="java.lang.Object[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toString" type="java.lang.String" visibility="public"></dev:method>
		</dev:methods>
		<dev:class name="com.amx.common.util.concurrent.CopyOnWriteArrayList.COWIterator" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="java.util.ListIterator"></dev:extend>
			</dev:extends>
			<dev:fields></dev:fields>
			<dev:methods>
				<dev:method name="add" type="void" visibility="public">
					<dev:params>
						<dev:param name="o" type="java.lang.Object"></dev:param>
					</dev:params>
				</dev:method>
				<dev:method name="hasNext" type="boolean" visibility="public"></dev:method>
				<dev:method name="hasPrevious" type="boolean" visibility="public"></dev:method>
				<dev:method name="next" type="java.lang.Object" visibility="public"></dev:method>
				<dev:method name="nextIndex" type="int" visibility="public"></dev:method>
				<dev:method name="previous" type="java.lang.Object" visibility="public"></dev:method>
				<dev:method name="previousIndex" type="int" visibility="public"></dev:method>
				<dev:method name="remove" type="void" visibility="public"></dev:method>
				<dev:method name="set" type="void" visibility="public">
					<dev:params>
						<dev:param name="o" type="java.lang.Object"></dev:param>
					</dev:params>
				</dev:method>
			</dev:methods>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.CopyOnWriteArrayList.COWSubList" superclass="java.util.AbstractList">
			<dev:fields></dev:fields>
			<dev:methods>
				<dev:method name="add" type="void" visibility="public">
					<dev:params>
						<dev:param name="index" type="int"></dev:param>
						<dev:param name="element" type="java.lang.Object"></dev:param>
					</dev:params>
				</dev:method>
				<dev:method name="get" type="java.lang.Object" visibility="public">
					<dev:params>
						<dev:param name="index" type="int"></dev:param>
					</dev:params>
				</dev:method>
				<dev:method name="iterator" type="java.util.Iterator" visibility="public"></dev:method>
				<dev:method name="listIterator" type="java.util.ListIterator" visibility="public">
					<dev:params>
						<dev:param name="index" type="int"></dev:param>
					</dev:params>
				</dev:method>
				<dev:method name="remove" type="java.lang.Object" visibility="public">
					<dev:params>
						<dev:param name="index" type="int"></dev:param>
					</dev:params>
				</dev:method>
				<dev:method name="set" type="java.lang.Object" visibility="public">
					<dev:params>
						<dev:param name="index" type="int"></dev:param>
						<dev:param name="element" type="java.lang.Object"></dev:param>
					</dev:params>
				</dev:method>
				<dev:method name="size" type="int" visibility="public"></dev:method>
				<dev:method name="subList" type="java.util.List" visibility="public">
					<dev:params>
						<dev:param name="fromIndex" type="int"></dev:param>
						<dev:param name="toIndex" type="int"></dev:param>
					</dev:params>
				</dev:method>
			</dev:methods>
			<dev:class name="com.amx.common.util.concurrent.CopyOnWriteArrayList.COWSubList.COWSubListIterator" superclass="java.lang.Object">
				<dev:extends>
					<dev:extend name="java.util.ListIterator"></dev:extend>
				</dev:extends>
				<dev:fields></dev:fields>
				<dev:methods>
					<dev:method name="add" type="void" visibility="public">
						<dev:params>
							<dev:param name="o" type="java.lang.Object"></dev:param>
						</dev:params>
					</dev:method>
					<dev:method name="hasNext" type="boolean" visibility="public"></dev:method>
					<dev:method name="hasPrevious" type="boolean" visibility="public"></dev:method>
					<dev:method name="next" type="java.lang.Object" visibility="public"></dev:method>
					<dev:method name="nextIndex" type="int" visibility="public"></dev:method>
					<dev:method name="previous" type="java.lang.Object" visibility="public"></dev:method>
					<dev:method name="previousIndex" type="int" visibility="public"></dev:method>
					<dev:method name="remove" type="void" visibility="public"></dev:method>
					<dev:method name="set" type="void" visibility="public">
						<dev:params>
							<dev:param name="o" type="java.lang.Object"></dev:param>
						</dev:params>
					</dev:method>
				</dev:methods>
			</dev:class>
		</dev:class>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.CopyOnWriteArrayList.COWIterator" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.util.ListIterator"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:method name="add" type="void" visibility="public">
				<dev:params>
					<dev:param name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="hasNext" type="boolean" visibility="public"></dev:method>
			<dev:method name="hasPrevious" type="boolean" visibility="public"></dev:method>
			<dev:method name="next" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="nextIndex" type="int" visibility="public"></dev:method>
			<dev:method name="previous" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="previousIndex" type="int" visibility="public"></dev:method>
			<dev:method name="remove" type="void" visibility="public"></dev:method>
			<dev:method name="set" type="void" visibility="public">
				<dev:params>
					<dev:param name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.CopyOnWriteArrayList.COWSubList" superclass="java.util.AbstractList">
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:method name="add" type="void" visibility="public">
				<dev:params>
					<dev:param name="index" type="int"></dev:param>
					<dev:param name="element" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="get" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="iterator" type="java.util.Iterator" visibility="public"></dev:method>
			<dev:method name="listIterator" type="java.util.ListIterator" visibility="public">
				<dev:params>
					<dev:param name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="remove" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="index" type="int"></dev:param>
					<dev:param name="element" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="size" type="int" visibility="public"></dev:method>
			<dev:method name="subList" type="java.util.List" visibility="public">
				<dev:params>
					<dev:param name="fromIndex" type="int"></dev:param>
					<dev:param name="toIndex" type="int"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
		<dev:class name="com.amx.common.util.concurrent.CopyOnWriteArrayList.COWSubList.COWSubListIterator" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="java.util.ListIterator"></dev:extend>
			</dev:extends>
			<dev:fields></dev:fields>
			<dev:methods>
				<dev:method name="add" type="void" visibility="public">
					<dev:params>
						<dev:param name="o" type="java.lang.Object"></dev:param>
					</dev:params>
				</dev:method>
				<dev:method name="hasNext" type="boolean" visibility="public"></dev:method>
				<dev:method name="hasPrevious" type="boolean" visibility="public"></dev:method>
				<dev:method name="next" type="java.lang.Object" visibility="public"></dev:method>
				<dev:method name="nextIndex" type="int" visibility="public"></dev:method>
				<dev:method name="previous" type="java.lang.Object" visibility="public"></dev:method>
				<dev:method name="previousIndex" type="int" visibility="public"></dev:method>
				<dev:method name="remove" type="void" visibility="public"></dev:method>
				<dev:method name="set" type="void" visibility="public">
					<dev:params>
						<dev:param name="o" type="java.lang.Object"></dev:param>
					</dev:params>
				</dev:method>
			</dev:methods>
		</dev:class>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.CopyOnWriteArrayList.COWSubList.COWSubListIterator" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.util.ListIterator"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:method name="add" type="void" visibility="public">
				<dev:params>
					<dev:param name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="hasNext" type="boolean" visibility="public"></dev:method>
			<dev:method name="hasPrevious" type="boolean" visibility="public"></dev:method>
			<dev:method name="next" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="nextIndex" type="int" visibility="public"></dev:method>
			<dev:method name="previous" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="previousIndex" type="int" visibility="public"></dev:method>
			<dev:method name="remove" type="void" visibility="public"></dev:method>
			<dev:method name="set" type="void" visibility="public">
				<dev:params>
					<dev:param name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.CondVar" superclass="java.lang.Object">
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="CondVar" visibility="public">
				<dev:params>
					<dev:param comment="A non-reentrant mutual exclusion lock. Standard usage is to supply an instance of &lt;code&gt;Mutex&lt;/code&gt;, but, for example, a             Semaphore initialized to 1 also works. On the other hand, many other Sync implementations would not work here, so some             care is required to supply a sensible synchronization object. In normal use, the mutex should be one that is used for             &lt;em&gt;all&lt;/em&gt; synchronization of the object using the CondVar. Generally, to prevent nested monitor lockouts, this object             should not use any native Java synchronized blocks." name="mutex" type="com.amx.common.util.concurrent.Sync"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="await" type="void" visibility="public"></dev:method>
			<dev:method name="broadcast" type="void" visibility="public"></dev:method>
			<dev:method name="signal" type="void" visibility="public"></dev:method>
			<dev:method name="timedwait" returncomment="false if at least msecs have elapsed upon resumption; else true. A false return does NOT necessarily imply that the thread          was not notified. For example, it might have been notified after the time elapsed but just before resuming." type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="The time to wait. A value less than or equal to zero causes a momentarily release and re-acquire of the mutex, and always             returns false." name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ConcurrentReaderHashMap" serializable="true" superclass="java.util.AbstractMap">
		<dev:extends>
			<dev:extend name="java.util.Map"></dev:extend>
			<dev:extend name="java.lang.Cloneable"></dev:extend>
			<dev:extend name="java.io.Serializable"></dev:extend>
		</dev:extends>
		<dev:fields>
			<dev:field fulltype="int" name="DEFAULT_INITIAL_CAPACITY" static="true" type="int" visibility="public"></dev:field>
			<dev:field const="0.75" constexpr="0.75f" final="true" fulltype="float" name="DEFAULT_LOAD_FACTOR" static="true" type="float" visibility="public"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor name="ConcurrentReaderHashMap" visibility="public"></dev:constructor>
			<dev:constructor name="ConcurrentReaderHashMap" visibility="public">
				<dev:params>
					<dev:param comment="the initial capacity of the ConcurrentReaderHashMap." name="initialCapacity" type="int"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="ConcurrentReaderHashMap" visibility="public">
				<dev:params>
					<dev:param comment="the initial capacity The actual initial capacity is rounded to the nearest power of two." name="initialCapacity" type="int"></dev:param>
					<dev:param comment="the load factor of the ConcurrentReaderHashMap" name="loadFactor" type="float"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="ConcurrentReaderHashMap" visibility="public">
				<dev:params>
					<dev:param name="t" type="java.util.Map"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="capacity" type="int" visibility="public"></dev:method>
			<dev:method name="clear" type="void" visibility="public"></dev:method>
			<dev:method name="clone" returncomment="a shallow copy of this map." type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="contains" returncomment="&lt;code&gt;true&lt;/code&gt; if and only if some key maps to the &lt;code&gt;value&lt;/code&gt; argument in this table as determined by the          &lt;tt&gt;equals&lt;/tt&gt; method; &lt;code&gt;false&lt;/code&gt; otherwise." type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="a value to search for." name="value" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="containsKey" returncomment="&lt;code&gt;true&lt;/code&gt; if and only if the specified object is a key in this table, as determined by the &lt;tt&gt;equals&lt;/tt&gt; method;          &lt;code&gt;false&lt;/code&gt; otherwise." type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="possible key." name="key" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="containsValue" returncomment="&lt;tt&gt;true&lt;/tt&gt; if this map maps one or more keys to the specified value." type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="value whose presence in this map is to be tested." name="value" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="elements" returncomment="an enumeration of the values in this table." type="java.util.Enumeration" visibility="public"></dev:method>
			<dev:method name="entrySet" returncomment="a collection view of the mappings contained in this map." type="java.util.Set" visibility="public"></dev:method>
			<dev:method name="get" returncomment="the value to which the key is mapped in this table; &lt;code&gt;null&lt;/code&gt; if the key is not mapped to any value in this table." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="a key in the table." name="key" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isEmpty" returncomment="&lt;tt&gt;true&lt;/tt&gt; if this map contains no key-value mappings." type="boolean" visibility="public"></dev:method>
			<dev:method name="keys" returncomment="an enumeration of the keys in this table." type="java.util.Enumeration" visibility="public"></dev:method>
			<dev:method name="keySet" returncomment="a set view of the keys contained in this map." type="java.util.Set" visibility="public"></dev:method>
			<dev:method name="loadFactor" type="float" visibility="public"></dev:method>
			<dev:method name="put" returncomment="the previous value of the specified key in this table, or &lt;code&gt;null&lt;/code&gt; if it did not have one." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="the table key." name="key" type="java.lang.Object"></dev:param>
					<dev:param comment="the value." name="value" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="putAll" type="void" visibility="public">
				<dev:params>
					<dev:param comment="Mappings to be stored in this map." name="t" type="java.util.Map"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="remove" returncomment="the value to which the key had been mapped in this table, or &lt;code&gt;null&lt;/code&gt; if the key did not have a mapping." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="the key that needs to be removed." name="key" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="size" returncomment="the number of key-value mappings in this map." type="int" visibility="public"></dev:method>
			<dev:method name="values" returncomment="a collection view of the values contained in this map." type="java.util.Collection" visibility="public"></dev:method>
		</dev:methods>
		<dev:class name="com.amx.common.util.concurrent.ConcurrentReaderHashMap.BarrierLock" serializable="true" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="java.io.Serializable"></dev:extend>
			</dev:extends>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.ConcurrentReaderHashMap.Entry" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="java.util.Map.Entry"></dev:extend>
			</dev:extends>
			<dev:fields></dev:fields>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.ConcurrentReaderHashMap.HashIterator" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="java.util.Iterator"></dev:extend>
				<dev:extend name="java.util.Enumeration"></dev:extend>
			</dev:extends>
			<dev:fields></dev:fields>
			<dev:methods>
				<dev:method name="hasMoreElements" type="boolean" visibility="public"></dev:method>
				<dev:method name="hasNext" type="boolean" visibility="public"></dev:method>
				<dev:method name="next" type="java.lang.Object" visibility="public"></dev:method>
				<dev:method name="nextElement" type="java.lang.Object" visibility="public"></dev:method>
				<dev:method name="remove" type="void" visibility="public"></dev:method>
			</dev:methods>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.ConcurrentReaderHashMap.KeyIterator" superclass="com.amx.common.util.concurrent.ConcurrentReaderHashMap.HashIterator">
			<dev:methods></dev:methods>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.ConcurrentReaderHashMap.ValueIterator" superclass="com.amx.common.util.concurrent.ConcurrentReaderHashMap.HashIterator">
			<dev:methods></dev:methods>
		</dev:class>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ConcurrentReaderHashMap.BarrierLock" serializable="true" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.io.Serializable"></dev:extend>
		</dev:extends>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ConcurrentReaderHashMap.Entry" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.util.Map.Entry"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ConcurrentReaderHashMap.HashIterator" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.util.Iterator"></dev:extend>
			<dev:extend name="java.util.Enumeration"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:method name="hasMoreElements" type="boolean" visibility="public"></dev:method>
			<dev:method name="hasNext" type="boolean" visibility="public"></dev:method>
			<dev:method name="next" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="nextElement" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="remove" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ConcurrentReaderHashMap.KeyIterator" superclass="com.amx.common.util.concurrent.ConcurrentReaderHashMap.HashIterator">
		<dev:methods></dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ConcurrentReaderHashMap.ValueIterator" superclass="com.amx.common.util.concurrent.ConcurrentReaderHashMap.HashIterator">
		<dev:methods></dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ConcurrentHashMap" serializable="true" superclass="java.util.AbstractMap">
		<dev:extends>
			<dev:extend name="java.util.Map"></dev:extend>
			<dev:extend name="java.lang.Cloneable"></dev:extend>
			<dev:extend name="java.io.Serializable"></dev:extend>
		</dev:extends>
		<dev:fields>
			<dev:field fulltype="int" name="DEFAULT_INITIAL_CAPACITY" static="true" type="int" visibility="public"></dev:field>
			<dev:field const="0.75" constexpr="0.75f" final="true" fulltype="float" name="DEFAULT_LOAD_FACTOR" static="true" type="float" visibility="public"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor name="ConcurrentHashMap" visibility="public"></dev:constructor>
			<dev:constructor name="ConcurrentHashMap" visibility="public">
				<dev:params>
					<dev:param comment="the initial capacity of the ConcurrentHashMap." name="initialCapacity" type="int"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="ConcurrentHashMap" visibility="public">
				<dev:params>
					<dev:param comment="the initial capacity. The actual initial capacity is rounded to the nearest power of two." name="initialCapacity" type="int"></dev:param>
					<dev:param comment="the load factor threshold, used to control resizing. This value is used in an approximate way: When at least a quarter of             the segments of the table reach per-segment threshold, or one of the segments itself exceeds overall threshold, the table             is doubled. This will on average cause resizing when the table-wide load factor is slightly less than the threshold. If             you&apos;d like to avoid resizing, you can set this to a ridiculously large value." name="loadFactor" type="float"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="ConcurrentHashMap" visibility="public">
				<dev:params>
					<dev:param name="t" type="java.util.Map"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="clear" type="void" visibility="public"></dev:method>
			<dev:method name="clone" returncomment="a shallow copy of this map." type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="contains" returncomment="&lt;code&gt;true&lt;/code&gt; if and only if some key maps to the &lt;code&gt;value&lt;/code&gt; argument in this table as determined by the          &lt;tt&gt;equals&lt;/tt&gt; method; &lt;code&gt;false&lt;/code&gt; otherwise." type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="a value to search for." name="value" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="containsKey" returncomment="&lt;code&gt;true&lt;/code&gt; if and only if the specified object is a key in this table, as determined by the &lt;tt&gt;equals&lt;/tt&gt; method;          &lt;code&gt;false&lt;/code&gt; otherwise." type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="possible key." name="key" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="containsValue" returncomment="&lt;tt&gt;true&lt;/tt&gt; if this map maps one or more keys to the specified value." type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="value whose presence in this map is to be tested." name="value" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="elements" returncomment="an enumeration of the values in this table." type="java.util.Enumeration" visibility="public"></dev:method>
			<dev:method name="entrySet" returncomment="a collection view of the mappings contained in this map." type="java.util.Set" visibility="public"></dev:method>
			<dev:method name="get" returncomment="the value to which the key is mapped in this table; &lt;code&gt;null&lt;/code&gt; if the key is not mapped to any value in this table." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="a key in the table." name="key" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isEmpty" returncomment="&lt;tt&gt;true&lt;/tt&gt; if this map contains no key-value mappings." type="boolean" visibility="public"></dev:method>
			<dev:method name="keys" returncomment="an enumeration of the keys in this table." type="java.util.Enumeration" visibility="public"></dev:method>
			<dev:method name="keySet" returncomment="a set view of the keys contained in this map." type="java.util.Set" visibility="public"></dev:method>
			<dev:method name="put" returncomment="the previous value of the specified key in this table, or &lt;code&gt;null&lt;/code&gt; if it did not have one." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="the table key." name="key" type="java.lang.Object"></dev:param>
					<dev:param comment="the value." name="value" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="putAll" type="void" visibility="public">
				<dev:params>
					<dev:param comment="Mappings to be stored in this map." name="t" type="java.util.Map"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="remove" returncomment="the value to which the key had been mapped in this table, or &lt;code&gt;null&lt;/code&gt; if the key did not have a mapping." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="the key that needs to be removed." name="key" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="size" returncomment="the number of key-value mappings in this map." type="int" visibility="public"></dev:method>
			<dev:method name="values" returncomment="a collection view of the values contained in this map." type="java.util.Collection" visibility="public"></dev:method>
		</dev:methods>
		<dev:class name="com.amx.common.util.concurrent.ConcurrentHashMap.Entry" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="java.util.Map.Entry"></dev:extend>
			</dev:extends>
			<dev:fields></dev:fields>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.ConcurrentHashMap.HashIterator" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="java.util.Iterator"></dev:extend>
				<dev:extend name="java.util.Enumeration"></dev:extend>
			</dev:extends>
			<dev:fields></dev:fields>
			<dev:methods>
				<dev:method name="hasMoreElements" type="boolean" visibility="public"></dev:method>
				<dev:method name="hasNext" type="boolean" visibility="public"></dev:method>
				<dev:method name="next" type="java.lang.Object" visibility="public"></dev:method>
				<dev:method name="nextElement" type="java.lang.Object" visibility="public"></dev:method>
				<dev:method name="remove" type="void" visibility="public"></dev:method>
			</dev:methods>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.ConcurrentHashMap.KeyIterator" superclass="com.amx.common.util.concurrent.ConcurrentHashMap.HashIterator">
			<dev:methods></dev:methods>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.ConcurrentHashMap.Segment" serializable="true" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="java.io.Serializable"></dev:extend>
			</dev:extends>
			<dev:fields></dev:fields>
			<dev:methods></dev:methods>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.ConcurrentHashMap.ValueIterator" superclass="com.amx.common.util.concurrent.ConcurrentHashMap.HashIterator">
			<dev:methods></dev:methods>
		</dev:class>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ConcurrentHashMap.Entry" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.util.Map.Entry"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ConcurrentHashMap.HashIterator" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.util.Iterator"></dev:extend>
			<dev:extend name="java.util.Enumeration"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:method name="hasMoreElements" type="boolean" visibility="public"></dev:method>
			<dev:method name="hasNext" type="boolean" visibility="public"></dev:method>
			<dev:method name="next" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="nextElement" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="remove" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ConcurrentHashMap.KeyIterator" superclass="com.amx.common.util.concurrent.ConcurrentHashMap.HashIterator">
		<dev:methods></dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ConcurrentHashMap.Segment" serializable="true" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.io.Serializable"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods></dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ConcurrentHashMap.ValueIterator" superclass="com.amx.common.util.concurrent.ConcurrentHashMap.HashIterator">
		<dev:methods></dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ClockDaemon" superclass="com.amx.common.util.concurrent.ThreadFactoryUser">
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="ClockDaemon" visibility="public"></dev:constructor>
			<dev:method name="cancel" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="-- a task reference returned by one of the execute commands" name="taskID" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="executeAfterDelay" returncomment="taskID -- an opaque reference that can be used to cancel execution request" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="-- the number of milliseconds from now to run the command." name="millisecondsToDelay" type="long"></dev:param>
					<dev:param comment="-- the command to run after the delay." name="command" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="executeAt" returncomment="taskID -- an opaque reference that can be used to cancel execution request" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="-- the absolute time to run the command, expressed as a java.util.Date." name="date" type="java.util.Date"></dev:param>
					<dev:param comment="-- the command to run at the given time." name="command" type="java.lang.Runnable"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="executePeriodically" returncomment="taskID -- an opaque reference that can be used to cancel execution request" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="-- the period, in milliseconds. Periods are measured from start-of-task to the next start-of-task. It is generally a bad             idea to use a period that is shorter than the expected task duration." name="period" type="long"></dev:param>
					<dev:param comment="-- the command to run at each cycle" name="command" type="java.lang.Runnable"></dev:param>
					<dev:param comment="-- true if the cycle should start with execution of the task now. Otherwise, the cycle starts with a delay of             &lt;code&gt;period&lt;/code&gt; milliseconds." name="startNow" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getThread" type="java.lang.Thread" visibility="public"></dev:method>
			<dev:method name="restart" type="void" visibility="public"></dev:method>
			<dev:method name="shutDown" type="void" visibility="public"></dev:method>
		</dev:methods>
		<dev:class name="com.amx.common.util.concurrent.ClockDaemon.RunLoop" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="java.lang.Runnable"></dev:extend>
			</dev:extends>
			<dev:methods>
				<dev:method name="run" type="void" visibility="public"></dev:method>
			</dev:methods>
		</dev:class>
		<dev:class name="com.amx.common.util.concurrent.ClockDaemon.TaskNode" superclass="java.lang.Object">
			<dev:extends>
				<dev:extend name="java.lang.Comparable"></dev:extend>
			</dev:extends>
		</dev:class>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ClockDaemon.RunLoop" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.lang.Runnable"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:method name="run" type="void" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.ClockDaemon.TaskNode" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.lang.Comparable"></dev:extend>
		</dev:extends>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.concurrent.Channel">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Puttable"></dev:extend>
			<dev:extend name="com.amx.common.util.concurrent.Takable"></dev:extend>
		</dev:extends>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.concurrent.Callable"></dev:class>
	<dev:class name="com.amx.common.util.concurrent.BrokenBarrierException" serializable="true" superclass="java.lang.RuntimeException">
		<dev:fields>
			<dev:field final="true" fulltype="int" name="index" type="int" visibility="public"></dev:field>
		</dev:fields>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.BoundedPriorityQueue" superclass="com.amx.common.util.concurrent.SemaphoreControlledChannel">
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="BoundedPriorityQueue" visibility="public"></dev:constructor>
			<dev:constructor name="BoundedPriorityQueue" visibility="public">
				<dev:params>
					<dev:param name="comparator" type="java.util.Comparator"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="BoundedPriorityQueue" visibility="public">
				<dev:params>
					<dev:param name="capacity" type="int"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="BoundedPriorityQueue" visibility="public">
				<dev:params>
					<dev:param name="capacity" type="int"></dev:param>
					<dev:param name="cmp" type="java.util.Comparator"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="BoundedPriorityQueue" visibility="public">
				<dev:params>
					<dev:param name="capacity" type="int"></dev:param>
					<dev:param name="cmp" type="java.util.Comparator"></dev:param>
					<dev:param name="semaphoreClass" type="java.lang.Class"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="peek" type="java.lang.Object" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.BoundedLinkedQueue" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.BoundedChannel"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="BoundedLinkedQueue" visibility="public"></dev:constructor>
			<dev:constructor name="BoundedLinkedQueue" visibility="public">
				<dev:params>
					<dev:param name="capacity" type="int"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="capacity" type="int" visibility="public"></dev:method>
			<dev:method name="isEmpty" type="boolean" visibility="public"></dev:method>
			<dev:method name="offer" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="x" type="java.lang.Object"></dev:param>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="peek" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="poll" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="put" type="void" visibility="public">
				<dev:params>
					<dev:param name="x" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setCapacity" type="void" visibility="public">
				<dev:params>
					<dev:param name="newCapacity" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="size" type="int" visibility="public"></dev:method>
			<dev:method name="take" type="java.lang.Object" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.concurrent.BoundedChannel">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.Channel"></dev:extend>
		</dev:extends>
	</dev:class>
	<dev:class name="com.amx.common.util.concurrent.BoundedBuffer" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.concurrent.BoundedChannel"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="BoundedBuffer" visibility="public"></dev:constructor>
			<dev:constructor name="BoundedBuffer" visibility="public">
				<dev:params>
					<dev:param name="capacity" type="int"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="capacity" type="int" visibility="public"></dev:method>
			<dev:method name="offer" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="x" type="java.lang.Object"></dev:param>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="peek" type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="poll" type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param name="msecs" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="put" type="void" visibility="public">
				<dev:params>
					<dev:param name="x" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="size" type="int" visibility="public"></dev:method>
			<dev:method name="take" type="java.lang.Object" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.concurrent.Barrier"></dev:class>
	<dev:class name="com.amx.common.util.fileio.IOUtils" superclass="java.lang.Object">
		<dev:fields>
			<dev:field const="47" constexpr="47" final="true" fulltype="char" name="DIR_SEPARATOR_UNIX" static="true" type="char" visibility="public"></dev:field>
			<dev:field const="92" constexpr="92" final="true" fulltype="char" name="DIR_SEPARATOR_WINDOWS" static="true" type="char" visibility="public"></dev:field>
			<dev:field final="true" fulltype="char" name="DIR_SEPARATOR" static="true" type="char" visibility="public"></dev:field>
			<dev:field const=" " constexpr="&quot;\n&quot;" final="true" fulltype="java.lang.String" name="LINE_SEPARATOR_UNIX" static="true" type="String" visibility="public"></dev:field>
			<dev:field const=" " constexpr="&quot;\r\n&quot;" final="true" fulltype="java.lang.String" name="LINE_SEPARATOR_WINDOWS" static="true" type="String" visibility="public"></dev:field>
			<dev:field final="true" fulltype="java.lang.String" name="LINE_SEPARATOR" static="true" type="String" visibility="public"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor name="IOUtils" visibility="public"></dev:constructor>
			<dev:method name="closeQuietly" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the InputStream to close, may be null or already closed" name="input" type="java.io.InputStream"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="closeQuietly" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the OutputStream to close, may be null or already closed" name="output" type="java.io.OutputStream"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="closeQuietly" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the Reader to close, may be null or already closed" name="input" type="java.io.Reader"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="closeQuietly" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the Writer to close, may be null or already closed" name="output" type="java.io.Writer"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="contentEquals" returncomment="true if the content of the streams are equal or they both don&apos;t exist, false otherwise" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the first stream" name="input1" type="java.io.InputStream"></dev:param>
					<dev:param comment="the second stream" name="input2" type="java.io.InputStream"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="contentEquals" returncomment="true if the content of the readers are equal or they both don&apos;t exist, false otherwise" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the first reader" name="input1" type="java.io.Reader"></dev:param>
					<dev:param comment="the second reader" name="input2" type="java.io.Reader"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="copy" returncomment="the number of bytes copied" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;InputStream&lt;/code&gt; to read from" name="input" type="java.io.InputStream"></dev:param>
					<dev:param comment="the &lt;code&gt;OutputStream&lt;/code&gt; to write to" name="output" type="java.io.OutputStream"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="copy" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;InputStream&lt;/code&gt; to read from" name="input" type="java.io.InputStream"></dev:param>
					<dev:param comment="the &lt;code&gt;Writer&lt;/code&gt; to write to" name="output" type="java.io.Writer"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="copy" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;InputStream&lt;/code&gt; to read from" name="input" type="java.io.InputStream"></dev:param>
					<dev:param comment="the &lt;code&gt;Writer&lt;/code&gt; to write to" name="output" type="java.io.Writer"></dev:param>
					<dev:param comment="the encoding to use, null means platform default" name="encoding" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="copy" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;Reader&lt;/code&gt; to read from" name="input" type="java.io.Reader"></dev:param>
					<dev:param comment="the &lt;code&gt;OutputStream&lt;/code&gt; to write to" name="output" type="java.io.OutputStream"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="copy" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;Reader&lt;/code&gt; to read from" name="input" type="java.io.Reader"></dev:param>
					<dev:param comment="the &lt;code&gt;OutputStream&lt;/code&gt; to write to" name="output" type="java.io.OutputStream"></dev:param>
					<dev:param comment="the encoding to use, null means platform default" name="encoding" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="copy" returncomment="the number of characters copied" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;Reader&lt;/code&gt; to read from" name="input" type="java.io.Reader"></dev:param>
					<dev:param comment="the &lt;code&gt;Writer&lt;/code&gt; to write to" name="output" type="java.io.Writer"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="copyLarge" returncomment="the number of bytes copied" static="true" type="long" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;InputStream&lt;/code&gt; to read from" name="input" type="java.io.InputStream"></dev:param>
					<dev:param comment="the &lt;code&gt;OutputStream&lt;/code&gt; to write to" name="output" type="java.io.OutputStream"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="copyLarge" returncomment="the number of characters copied" static="true" type="long" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;Reader&lt;/code&gt; to read from" name="input" type="java.io.Reader"></dev:param>
					<dev:param comment="the &lt;code&gt;Writer&lt;/code&gt; to write to" name="output" type="java.io.Writer"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="readLines" returncomment="the list of Strings, never null" static="true" type="java.util.List" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;InputStream&lt;/code&gt; to read from, not null" name="input" type="java.io.InputStream"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="readLines" returncomment="the list of Strings, never null" static="true" type="java.util.List" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;InputStream&lt;/code&gt; to read from, not null" name="input" type="java.io.InputStream"></dev:param>
					<dev:param comment="the encoding to use, null means platform default" name="encoding" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="readLines" returncomment="the list of Strings, never null" static="true" type="java.util.List" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;Reader&lt;/code&gt; to read from, not null" name="input" type="java.io.Reader"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toByteArray" returncomment="the requested byte array" static="true" type="byte[]" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;InputStream&lt;/code&gt; to read from" name="input" type="java.io.InputStream"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toByteArray" returncomment="the requested byte array" static="true" type="byte[]" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;Reader&lt;/code&gt; to read from" name="input" type="java.io.Reader"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toByteArray" returncomment="the requested byte array" static="true" type="byte[]" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;Reader&lt;/code&gt; to read from" name="input" type="java.io.Reader"></dev:param>
					<dev:param comment="the encoding to use, null means platform default" name="encoding" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toByteArray" returncomment="the requested byte array" static="true" type="byte[]" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;String&lt;/code&gt; to convert" name="input" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toCharArray" returncomment="the requested character array" static="true" type="char[]" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;InputStream&lt;/code&gt; to read from" name="is" type="java.io.InputStream"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toCharArray" returncomment="the requested character array" static="true" type="char[]" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;InputStream&lt;/code&gt; to read from" name="is" type="java.io.InputStream"></dev:param>
					<dev:param comment="the encoding to use, null means platform default" name="encoding" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toCharArray" returncomment="the requested character array" static="true" type="char[]" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;Reader&lt;/code&gt; to read from" name="input" type="java.io.Reader"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toInputStream" returncomment="an input stream" static="true" type="java.io.InputStream" visibility="public">
				<dev:params>
					<dev:param comment="the string to convert" name="input" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toInputStream" returncomment="an input stream" static="true" type="java.io.InputStream" visibility="public">
				<dev:params>
					<dev:param comment="the string to convert" name="input" type="java.lang.String"></dev:param>
					<dev:param comment="the encoding to use, null means platform default" name="encoding" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toString" returncomment="the requested String" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the byte array to read from" name="input" type="byte[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toString" returncomment="the requested String" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the byte array to read from" name="input" type="byte[]"></dev:param>
					<dev:param comment="the encoding to use, null means platform default" name="encoding" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toString" returncomment="the requested String" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;InputStream&lt;/code&gt; to read from" name="input" type="java.io.InputStream"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toString" returncomment="the requested String" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;InputStream&lt;/code&gt; to read from" name="input" type="java.io.InputStream"></dev:param>
					<dev:param comment="the encoding to use, null means platform default" name="encoding" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toString" returncomment="the requested String" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;Reader&lt;/code&gt; to read from" name="input" type="java.io.Reader"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="write" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the byte array to write, do not modify during output, null ignored" name="data" type="byte[]"></dev:param>
					<dev:param comment="the &lt;code&gt;OutputStream&lt;/code&gt; to write to" name="output" type="java.io.OutputStream"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="write" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the byte array to write, do not modify during output, null ignored" name="data" type="byte[]"></dev:param>
					<dev:param comment="the &lt;code&gt;Writer&lt;/code&gt; to write to" name="output" type="java.io.Writer"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="write" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the byte array to write, do not modify during output, null ignored" name="data" type="byte[]"></dev:param>
					<dev:param comment="the &lt;code&gt;Writer&lt;/code&gt; to write to" name="output" type="java.io.Writer"></dev:param>
					<dev:param comment="the encoding to use, null means platform default" name="encoding" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="write" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the char array to write, do not modify during output, null ignored" name="data" type="char[]"></dev:param>
					<dev:param comment="the &lt;code&gt;OutputStream&lt;/code&gt; to write to" name="output" type="java.io.OutputStream"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="write" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the char array to write, do not modify during output, null ignored" name="data" type="char[]"></dev:param>
					<dev:param comment="the &lt;code&gt;OutputStream&lt;/code&gt; to write to" name="output" type="java.io.OutputStream"></dev:param>
					<dev:param comment="the encoding to use, null means platform default" name="encoding" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="write" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the char array to write, do not modify during output, null ignored" name="data" type="char[]"></dev:param>
					<dev:param comment="the &lt;code&gt;Writer&lt;/code&gt; to write to" name="output" type="java.io.Writer"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="write" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;String&lt;/code&gt; to write, null ignored" name="data" type="java.lang.String"></dev:param>
					<dev:param comment="the &lt;code&gt;OutputStream&lt;/code&gt; to write to" name="output" type="java.io.OutputStream"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="write" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;String&lt;/code&gt; to write, null ignored" name="data" type="java.lang.String"></dev:param>
					<dev:param comment="the &lt;code&gt;OutputStream&lt;/code&gt; to write to" name="output" type="java.io.OutputStream"></dev:param>
					<dev:param comment="the encoding to use, null means platform default" name="encoding" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="write" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;String&lt;/code&gt; to write, null ignored" name="data" type="java.lang.String"></dev:param>
					<dev:param comment="the &lt;code&gt;Writer&lt;/code&gt; to write to" name="output" type="java.io.Writer"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="write" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;StringBuffer&lt;/code&gt; to write, null ignored" name="data" type="java.lang.StringBuffer"></dev:param>
					<dev:param comment="the &lt;code&gt;OutputStream&lt;/code&gt; to write to" name="output" type="java.io.OutputStream"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="write" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;StringBuffer&lt;/code&gt; to write, null ignored" name="data" type="java.lang.StringBuffer"></dev:param>
					<dev:param comment="the &lt;code&gt;OutputStream&lt;/code&gt; to write to" name="output" type="java.io.OutputStream"></dev:param>
					<dev:param comment="the encoding to use, null means platform default" name="encoding" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="write" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;StringBuffer&lt;/code&gt; to write, null ignored" name="data" type="java.lang.StringBuffer"></dev:param>
					<dev:param comment="the &lt;code&gt;Writer&lt;/code&gt; to write to" name="output" type="java.io.Writer"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="writeLines" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the lines to write, null entries produce blank lines" name="lines" type="java.util.Collection"></dev:param>
					<dev:param comment="the line separator to use, null is system default" name="lineEnding" type="java.lang.String"></dev:param>
					<dev:param comment="the &lt;code&gt;OutputStream&lt;/code&gt; to write to, not null, not closed" name="output" type="java.io.OutputStream"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="writeLines" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the lines to write, null entries produce blank lines" name="lines" type="java.util.Collection"></dev:param>
					<dev:param comment="the line separator to use, null is system default" name="lineEnding" type="java.lang.String"></dev:param>
					<dev:param comment="the &lt;code&gt;OutputStream&lt;/code&gt; to write to, not null, not closed" name="output" type="java.io.OutputStream"></dev:param>
					<dev:param comment="the encoding to use, null means platform default" name="encoding" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="writeLines" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the lines to write, null entries produce blank lines" name="lines" type="java.util.Collection"></dev:param>
					<dev:param comment="the line separator to use, null is system default" name="lineEnding" type="java.lang.String"></dev:param>
					<dev:param comment="the &lt;code&gt;Writer&lt;/code&gt; to write to, not null, not closed" name="writer" type="java.io.Writer"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.fileio.IOCase" serializable="true" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.io.Serializable"></dev:extend>
		</dev:extends>
		<dev:fields>
			<dev:field final="true" fulltype="com.amx.common.util.fileio.IOCase" name="SENSITIVE" static="true" type="IOCase" visibility="public"></dev:field>
			<dev:field final="true" fulltype="com.amx.common.util.fileio.IOCase" name="INSENSITIVE" static="true" type="IOCase" visibility="public"></dev:field>
			<dev:field final="true" fulltype="com.amx.common.util.fileio.IOCase" name="SYSTEM" static="true" type="IOCase" visibility="public"></dev:field>
		</dev:fields>
	</dev:class>
	<dev:class name="com.amx.common.util.fileio.FilenameUtils" superclass="java.lang.Object">
		<dev:fields>
			<dev:field const="46" constexpr="46" final="true" fulltype="char" name="EXTENSION_SEPARATOR" static="true" type="char" visibility="public"></dev:field>
			<dev:field final="true" fulltype="java.lang.String" name="EXTENSION_SEPARATOR_STR" static="true" type="String" visibility="public"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor name="FilenameUtils" visibility="public"></dev:constructor>
			<dev:method name="concat" returncomment="the concatenated path, or null if invalid" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the base path to attach to, always treated as a path" name="basePath" type="java.lang.String"></dev:param>
					<dev:param comment="the filename (or path) to attach to the base" name="fullFilenameToAdd" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="equals" returncomment="true if the filenames are equal, null equals null" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the first filename to query, may be null" name="filename1" type="java.lang.String"></dev:param>
					<dev:param comment="the second filename to query, may be null" name="filename2" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="equals" returncomment="true if the filenames are equal, null equals null" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the first filename to query, may be null" name="filename1" type="java.lang.String"></dev:param>
					<dev:param comment="the second filename to query, may be null" name="filename2" type="java.lang.String"></dev:param>
					<dev:param comment="whether to normalize the filenames" name="normalized" type="boolean"></dev:param>
					<dev:param comment="what case sensitivity rule to use, null means case-sensitive" name="caseSensitivity" type="com.amx.common.util.fileio.IOCase"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="equalsNormalized" returncomment="true if the filenames are equal, null equals null" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the first filename to query, may be null" name="filename1" type="java.lang.String"></dev:param>
					<dev:param comment="the second filename to query, may be null" name="filename2" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="equalsNormalizedOnSystem" returncomment="true if the filenames are equal, null equals null" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the first filename to query, may be null" name="filename1" type="java.lang.String"></dev:param>
					<dev:param comment="the second filename to query, may be null" name="filename2" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="equalsOnSystem" returncomment="true if the filenames are equal, null equals null" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the first filename to query, may be null" name="filename1" type="java.lang.String"></dev:param>
					<dev:param comment="the second filename to query, may be null" name="filename2" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getBaseName" returncomment="the name of the file without the path, or an empty string if none exists" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the filename to query, null returns null" name="filename" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getExtension" returncomment="the extension of the file or an empty string if none exists." static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the filename to retrieve the extension of." name="filename" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getFullPath" returncomment="the path of the file, an empty string if none exists, null if invalid" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the filename to query, null returns null" name="filename" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getFullPathNoEndSeparator" returncomment="the path of the file, an empty string if none exists, null if invalid" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the filename to query, null returns null" name="filename" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getName" returncomment="the name of the file without the path, or an empty string if none exists" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the filename to query, null returns null" name="filename" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getPath" returncomment="the path of the file, an empty string if none exists, null if invalid" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the filename to query, null returns null" name="filename" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getPathNoEndSeparator" returncomment="the path of the file, an empty string if none exists, null if invalid" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the filename to query, null returns null" name="filename" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getPrefix" returncomment="the prefix of the file, null if invalid" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the filename to query, null returns null" name="filename" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getPrefixLength" returncomment="the length of the prefix, -1 if invalid or null" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the filename to find the prefix in, null returns -1" name="filename" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOfExtension" returncomment="the index of the last separator character, or -1 if there is no such character" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the filename to find the last path separator in, null returns -1" name="filename" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOfLastSeparator" returncomment="the index of the last separator character, or -1 if there is no such character" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the filename to find the last path separator in, null returns -1" name="filename" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isExtension" returncomment="true if the filename is one of the extensions" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the filename to query, null returns false" name="filename" type="java.lang.String"></dev:param>
					<dev:param comment="the extensions to check for, null checks for no extension" name="extensions" type="java.util.Collection"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isExtension" returncomment="true if the filename has the specified extension" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the filename to query, null returns false" name="filename" type="java.lang.String"></dev:param>
					<dev:param comment="the extension to check for, null or empty checks for no extension" name="extension" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isExtension" returncomment="true if the filename is one of the extensions" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the filename to query, null returns false" name="filename" type="java.lang.String"></dev:param>
					<dev:param comment="the extensions to check for, null checks for no extension" name="extensions" type="java.lang.String[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="normalize" returncomment="the normalized filename, or null if invalid" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the filename to normalize, null returns null" name="filename" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="normalizeNoEndSeparator" returncomment="the normalized filename, or null if invalid" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the filename to normalize, null returns null" name="filename" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="removeExtension" returncomment="the filename minus the extension" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the filename to query, null returns null" name="filename" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="separatorsToSystem" returncomment="the updated path" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the path to be changed, null ignored" name="path" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="separatorsToUnix" returncomment="the updated path" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the path to be changed, null ignored" name="path" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="separatorsToWindows" returncomment="the updated path" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the path to be changed, null ignored" name="path" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="wildcardMatch" returncomment="true if the filename matches the wilcard string" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the filename to match on" name="filename" type="java.lang.String"></dev:param>
					<dev:param comment="the wildcard string to match against" name="wildcardMatcher" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="wildcardMatch" returncomment="true if the filename matches the wilcard string" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the filename to match on" name="filename" type="java.lang.String"></dev:param>
					<dev:param comment="the wildcard string to match against" name="wildcardMatcher" type="java.lang.String"></dev:param>
					<dev:param comment="what case sensitivity rule to use, null means case-sensitive" name="caseSensitivity" type="com.amx.common.util.fileio.IOCase"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="wildcardMatchOnSystem" returncomment="true if the filename matches the wilcard string" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the filename to match on" name="filename" type="java.lang.String"></dev:param>
					<dev:param comment="the wildcard string to match against" name="wildcardMatcher" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.fileio.FileFunctions" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="FileFunctions" visibility="public"></dev:constructor>
			<dev:method name="copy" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param name="src" type="java.io.File"></dev:param>
					<dev:param name="dst" type="java.io.File"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="copyURLToFile" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;URL&lt;/code&gt; to copy bytes from, must not be &lt;code&gt;null&lt;/code&gt;" name="source" type="java.net.URL"></dev:param>
					<dev:param comment="the non-directory &lt;code&gt;File&lt;/code&gt; to write bytes to (possibly overwriting), must not be &lt;code&gt;null&lt;/code&gt;" name="destination" type="java.io.File"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="deleteIfFileExists" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param name="fileName" type="java.io.File"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="deleteIfFileExists" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param name="fileName" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="extractFileExtension" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="filePathName" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="forceMkdir" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="directory to create, not null" name="directory" type="java.io.File"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isFileDirectoryExist" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="fileName" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="openOutputStream" returncomment="a new {@link FileOutputStream} for the specified file" static="true" type="java.io.FileOutputStream" visibility="public">
				<dev:params>
					<dev:param comment="the file to open for output, must not be &lt;code&gt;null&lt;/code&gt;" name="file" type="java.io.File"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="saveImage" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param name="imageUrl" type="java.net.URL"></dev:param>
					<dev:param name="destinationFile" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="saveImageBit" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param name="url" type="java.net.URL"></dev:param>
					<dev:param name="destinationFile" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="writeByteArrayToFile" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param name="file" type="java.io.File"></dev:param>
					<dev:param name="data" type="byte[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="splitter" static="true" type="java.util.ArrayList" visibility="public">
				<dev:params>
					<dev:param name="sData" type="java.lang.String"></dev:param>
					<dev:param name="delimeter" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="writeToFile" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="sFileName" type="java.lang.String"></dev:param>
					<dev:param name="sData" type="java.lang.StringBuffer"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.fileio.CopyInputStream" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="CopyInputStream" visibility="public">
				<dev:params>
					<dev:param comment="the is" name="is" type="java.io.InputStream"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="getCopy" returncomment="the copy" type="java.io.InputStream" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.lang.ValidateUtil" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="ValidateUtil" visibility="public"></dev:constructor>
			<dev:method name="ATOI" returncomment="int value contained in the string" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="- String containing an int value" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isInStringArray" returncomment="" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="" name="value" type="java.lang.String"></dev:param>
					<dev:param comment="" name="array" type="java.lang.String[]"></dev:param>
					<dev:param comment="" name="ignoreCase" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isNotInStringArray" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="value" type="java.lang.String"></dev:param>
					<dev:param name="array" type="java.lang.String[]"></dev:param>
					<dev:param name="ignoreCase" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="isNotValidIP" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="ip" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isThisJuggernautFirmware" static="true" type="boolean" visibility="public"></dev:method>
			<dev:method name="isPoolSizeBasedOnFirmwareType" static="true" type="int" visibility="public"></dev:method>
			<dev:method final="true" name="isValidDPS" returncomment="true if this is a valid DPS; false otherwise" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="DPS to validate" name="dps" type="com.amx.duet.core.master.netlinx.DPS"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="isValidDPS" returncomment="true if this is a valid DPS; false otherwise" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="String containing the DPS to validate" name="dps" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="isValidIP" returncomment="true if this is a valid IP address; false otherwise" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="String containing the address to validate" name="ip" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="validateBaudRate" returncomment="String containing the current baud rate setting, or the default value" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="String containing the device&apos;s current baud rate setting" name="rate" type="java.lang.String"></dev:param>
					<dev:param comment="an array of Strings containing all valid baud rates for the device" name="validRates" type="java.lang.String[]"></dev:param>
					<dev:param comment="String containing the device&apos;s default baud rate" name="defaultRate" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="validateDeviceID" returncomment="String containing the current device ID setting, or the default value" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="String containing the device&apos;s current device ID setting" name="deviceID" type="java.lang.String"></dev:param>
					<dev:param comment="integer, represents the smallest valid ID" name="nMinID" type="int"></dev:param>
					<dev:param comment="integer, represents the largest valid ID" name="nMaxID" type="int"></dev:param>
					<dev:param comment="String containing the device&apos;s default ID" name="defaultID" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="validateIPConnectType" returncomment="String containing the current IP connection type setting, or the default value." static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="String containing the device&apos;s current IP connection type setting." name="connectType" type="java.lang.String"></dev:param>
					<dev:param comment="an array of Strings containing all valid IP connection types for the device." name="validTypes" type="java.lang.String[]"></dev:param>
					<dev:param comment="String containing the device&apos;s default IP connection type." name="defaultType" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="validatePollTime" returncomment="String containing the current poll time setting, or the default value in milliseconds converted to seconds" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="String containing the device&apos;s current poll time setting" name="polltime" type="java.lang.String"></dev:param>
					<dev:param comment="minimum poll time value." name="lMin" type="long"></dev:param>
					<dev:param comment="maximum poll time value." name="lMax" type="long"></dev:param>
					<dev:param comment="integer, represents the default poll time in milliseconds" name="lTime" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="validateReconnnectTime" returncomment="" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="connectTime" type="java.lang.String"></dev:param>
					<dev:param comment="" name="lMin" type="long"></dev:param>
					<dev:param comment="" name="lMax" type="long"></dev:param>
					<dev:param comment="" name="lTime" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="validateTimeoutCount" returncomment="" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="" name="timeout" type="java.lang.String"></dev:param>
					<dev:param comment="" name="nMax" type="int"></dev:param>
					<dev:param comment="" name="nDefault" type="int"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.lang.ObjectType" superclass="java.lang.Object">
		<dev:fields>
			<dev:field final="true" fulltype="com.amx.common.util.lang.ObjectType" name="INVALID" static="true" type="ObjectType" visibility="public"></dev:field>
			<dev:field final="true" fulltype="com.amx.common.util.lang.ObjectType" name="BOOL" static="true" type="ObjectType" visibility="public"></dev:field>
			<dev:field final="true" fulltype="com.amx.common.util.lang.ObjectType" name="BYTE" static="true" type="ObjectType" visibility="public"></dev:field>
			<dev:field final="true" fulltype="com.amx.common.util.lang.ObjectType" name="CHAR" static="true" type="ObjectType" visibility="public"></dev:field>
			<dev:field final="true" fulltype="com.amx.common.util.lang.ObjectType" name="SHORT" static="true" type="ObjectType" visibility="public"></dev:field>
			<dev:field final="true" fulltype="com.amx.common.util.lang.ObjectType" name="INTEGER" static="true" type="ObjectType" visibility="public"></dev:field>
			<dev:field final="true" fulltype="com.amx.common.util.lang.ObjectType" name="LONG" static="true" type="ObjectType" visibility="public"></dev:field>
			<dev:field final="true" fulltype="com.amx.common.util.lang.ObjectType" name="FLOAT" static="true" type="ObjectType" visibility="public"></dev:field>
			<dev:field final="true" fulltype="com.amx.common.util.lang.ObjectType" name="DOUBLE" static="true" type="ObjectType" visibility="public"></dev:field>
			<dev:field final="true" fulltype="com.amx.common.util.lang.ObjectType" name="STRING" static="true" type="ObjectType" visibility="public"></dev:field>
			<dev:field final="true" fulltype="com.amx.common.util.lang.ObjectType" name="OBJECT" static="true" type="ObjectType" visibility="public"></dev:field>
			<dev:field final="true" fulltype="java.util.List" name="VALUES" static="true" type="List" visibility="public"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:method final="true" name="equals" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="obj" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getName" returncomment="String" type="java.lang.String" visibility="public"></dev:method>
			<dev:method final="true" name="hashCode" type="int" visibility="public"></dev:method>
			<dev:method name="toString" type="java.lang.String" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.lang.ObjectRef" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="ObjectRef" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;boolean&lt;/code&gt;." name="b" type="boolean"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="ObjectRef" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;byte&lt;/code&gt;." name="b" type="byte"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="ObjectRef" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;char&lt;/code&gt;." name="c" type="char"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="ObjectRef" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;double&lt;/code&gt;." name="d" type="double"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="ObjectRef" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;float&lt;/code&gt;." name="f" type="float"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="ObjectRef" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;int&lt;/code&gt;." name="i" type="int"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="ObjectRef" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;long&lt;/code&gt;." name="l" type="long"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="ObjectRef" visibility="public">
				<dev:params>
					<dev:param comment="an &lt;code&gt;Object&lt;/code&gt;." name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="ObjectRef" visibility="public">
				<dev:params>
					<dev:param comment="an &lt;code&gt;Object&lt;/code&gt;." name="o" type="java.lang.Object"></dev:param>
					<dev:param comment="the &lt;code&gt;ObjectType&lt;/code&gt; that the object is assigned as." name="refType" type="com.amx.common.util.lang.ObjectType"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="ObjectRef" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;code&gt;ObjectType&lt;/code&gt; that the object is assigned as." name="refType" type="com.amx.common.util.lang.ObjectType"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="ObjectRef" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;short&lt;/code&gt;." name="s" type="short"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="ObjectRef" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;String&lt;/code&gt;." name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="booleanValue" returncomment="If this object was created from a &lt;code&gt;boolean&lt;/code&gt; value, then that value will be returned. Otherwise, &lt;code&gt;false&lt;/code&gt;          will be returned." type="boolean" visibility="public"></dev:method>
			<dev:method name="byteValue" returncomment="If this object was created from a &lt;code&gt;byte&lt;/code&gt; value, then that value will be returned. Otherwise, &lt;code&gt;0&lt;/code&gt; will          be returned." type="byte" visibility="public"></dev:method>
			<dev:method name="charValue" returncomment="If this object was created from a &lt;code&gt;char&lt;/code&gt; value, then that value will be returned. Otherwise, &lt;code&gt;0&lt;/code&gt; will          be returned." type="char" visibility="public"></dev:method>
			<dev:method name="doubleValue" returncomment="If this object was created from a &lt;code&gt;double&lt;/code&gt; value, then that value will be returned. Otherwise, &lt;code&gt;0&lt;/code&gt; will          be returned." type="double" visibility="public"></dev:method>
			<dev:method name="equals" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="obj" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="floatValue" returncomment="If this object was created from a &lt;code&gt;float&lt;/code&gt; value, then that value will be returned. Otherwise, &lt;code&gt;0&lt;/code&gt; will          be returned." type="float" visibility="public"></dev:method>
			<dev:method name="getType" returncomment="&lt;code&gt;ObjectType&lt;/code&gt; representing the type of object stored." type="com.amx.common.util.lang.ObjectType" visibility="public"></dev:method>
			<dev:method name="getValue" returncomment="The &lt;code&gt;Object&lt;/code&gt; stored in this object." type="java.lang.Object" visibility="public"></dev:method>
			<dev:method name="hashCode" type="int" visibility="public"></dev:method>
			<dev:method name="intValue" returncomment="If this object was created from a &lt;code&gt;int&lt;/code&gt; value, then that value will be returned. Otherwise, &lt;code&gt;0&lt;/code&gt; will be          returned." type="int" visibility="public"></dev:method>
			<dev:method name="longValue" returncomment="If this object was created from a &lt;code&gt;long&lt;/code&gt; value, then that value will be returned. Otherwise, &lt;code&gt;0&lt;/code&gt; will          be returned." type="long" visibility="public"></dev:method>
			<dev:method name="shortValue" returncomment="If this object was created from a &lt;code&gt;short&lt;/code&gt; value, then that value will be returned. Otherwise, &lt;code&gt;0&lt;/code&gt; will          be returned." type="short" visibility="public"></dev:method>
			<dev:method name="stringValue" returncomment="If this object was created from a &lt;code&gt;String&lt;/code&gt; value, then that value will be returned. Otherwise, an empty string          will be returned." type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="toBoolean" returncomment="The converted &lt;code&gt;boolean&lt;/code&gt; value. If the stored value is equal to &quot;true&quot; or a value other than 0, the return value          will be &lt;code&gt;true&lt;/code&gt;. Otherwise, the return value should be false." type="boolean" visibility="public"></dev:method>
			<dev:method name="toByte" returncomment="The converted &lt;code&gt;byte&lt;/code&gt; value. If the stored value is equal to &quot;true&quot;, the return value will be &lt;code&gt;1&lt;/code&gt;. If          the value could not be converted the return value will be &lt;code&gt;0&lt;/code&gt;. Otherwise, the return value should be a value          between &lt;code&gt;Byte.MIN_VALUE&lt;/code&gt; and &lt;code&gt;Byte.MAX_VALUE&lt;/code&gt;." type="byte" visibility="public"></dev:method>
			<dev:method name="toChar" returncomment="The converted &lt;code&gt;char&lt;/code&gt; value. If the stored value is equal to &quot;true&quot;, the return value will be &lt;code&gt;1&lt;/code&gt;. If          the value could not be converted the return value will be &lt;code&gt;0&lt;/code&gt;. Otherwise, the return value should be a value          between &lt;code&gt;Character.MIN_VALUE&lt;/code&gt; and &lt;code&gt;Character.MAX_VALUE&lt;/code&gt;." type="char" visibility="public"></dev:method>
			<dev:method name="toDouble" returncomment="The converted &lt;code&gt;double&lt;/code&gt; value. If the stored value is equal to &quot;true&quot;, the return value will be &lt;code&gt;1&lt;/code&gt;. If          the value could not be converted the return value will be &lt;code&gt;0&lt;/code&gt;. Otherwise, the return value should be a value          between &lt;code&gt;Double.MIN_VALUE&lt;/code&gt; and &lt;code&gt;Double.MAX_VALUE&lt;/code&gt;." type="double" visibility="public"></dev:method>
			<dev:method name="toFloat" returncomment="The converted &lt;code&gt;float&lt;/code&gt; value. If the stored value is equal to &quot;true&quot;, the return value will be &lt;code&gt;1&lt;/code&gt;. If          the value could not be converted the return value will be &lt;code&gt;0&lt;/code&gt;. Otherwise, the return value should be a value          between &lt;code&gt;Float.MIN_VALUE&lt;/code&gt; and &lt;code&gt;Float.MAX_VALUE&lt;/code&gt;." type="float" visibility="public"></dev:method>
			<dev:method name="toInt" returncomment="The converted &lt;code&gt;int&lt;/code&gt; value. If the stored value is equal to &quot;true&quot;, the return value will be &lt;code&gt;1&lt;/code&gt;. If the          value could not be converted the return value will be &lt;code&gt;0&lt;/code&gt;. Otherwise, the return value should be a value between          &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt; and &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;." type="int" visibility="public"></dev:method>
			<dev:method name="toLong" returncomment="The converted &lt;code&gt;long&lt;/code&gt; value. If the stored value is equal to &quot;true&quot;, the return value will be &lt;code&gt;1&lt;/code&gt;. If          the value could not be converted the return value will be &lt;code&gt;0&lt;/code&gt;. Otherwise, the return value should be a value          between &lt;code&gt;Long.MIN_VALUE&lt;/code&gt; and &lt;code&gt;Long.MAX_VALUE&lt;/code&gt;." type="long" visibility="public"></dev:method>
			<dev:method name="toShort" returncomment="The converted &lt;code&gt;short&lt;/code&gt; value. If the stored value is equal to &quot;true&quot;, the return value will be &lt;code&gt;1&lt;/code&gt;. If          the value could not be converted the return value will be &lt;code&gt;0&lt;/code&gt;. Otherwise, the return value should be a value          between &lt;code&gt;Short.MIN_VALUE&lt;/code&gt; and &lt;code&gt;Short.MAX_VALUE&lt;/code&gt;." type="short" visibility="public"></dev:method>
			<dev:method name="toString" type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="valueOf" returncomment="The &lt;code&gt;boolean&lt;/code&gt; value created as a &lt;code&gt;Boolean&lt;/code&gt; object and cast to an &lt;code&gt;Object&lt;/code&gt;." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;boolean&lt;/code&gt;." name="b" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="valueOf" returncomment="The &lt;code&gt;byte&lt;/code&gt; value created as a &lt;code&gt;Byte&lt;/code&gt; object and cast to an &lt;code&gt;Object&lt;/code&gt;." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;byte&lt;/code&gt;." name="b" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="valueOf" returncomment="The &lt;code&gt;char&lt;/code&gt; value created as a &lt;code&gt;Character&lt;/code&gt; object and cast to an &lt;code&gt;Object&lt;/code&gt;." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;char&lt;/code&gt;." name="c" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="valueOf" returncomment="The &lt;code&gt;double&lt;/code&gt; value created as a &lt;code&gt;Double&lt;/code&gt; object and cast to an &lt;code&gt;Object&lt;/code&gt;." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;double&lt;/code&gt;." name="d" type="double"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="valueOf" returncomment="The &lt;code&gt;float&lt;/code&gt; value created as a &lt;code&gt;Float&lt;/code&gt; object and cast to an &lt;code&gt;Object&lt;/code&gt;." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;float&lt;/code&gt;." name="f" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="valueOf" returncomment="The &lt;code&gt;int&lt;/code&gt; value created as a &lt;code&gt;Integer&lt;/code&gt; object and cast to an &lt;code&gt;Object&lt;/code&gt;." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="an &lt;code&gt;int&lt;/code&gt;." name="i" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="valueOf" returncomment="The &lt;code&gt;long&lt;/code&gt; value created as a &lt;code&gt;Long&lt;/code&gt; object and cast to an &lt;code&gt;Object&lt;/code&gt;." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;long&lt;/code&gt;." name="l" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="valueOf" returncomment="The &lt;code&gt;Object&lt;/code&gt; argument passed it." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="an &lt;code&gt;Object&lt;/code&gt;." name="o" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="valueOf" returncomment="The &lt;code&gt;Object&lt;/code&gt; argument passed it." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="an &lt;code&gt;Object&lt;/code&gt;." name="o" type="java.lang.Object"></dev:param>
					<dev:param comment="" name="refType" type="com.amx.common.util.lang.ObjectType"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="valueOf" returncomment="The &lt;code&gt;short&lt;/code&gt; value created as a &lt;code&gt;Short&lt;/code&gt; object and cast to an &lt;code&gt;Object&lt;/code&gt;." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;short&lt;/code&gt;." name="s" type="short"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="valueOf" returncomment="The &lt;code&gt;String&lt;/code&gt; value cast to an &lt;code&gt;Object&lt;/code&gt;." type="java.lang.Object" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;String&lt;/code&gt;." name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.lang.Logger" superclass="java.lang.Object">
		<dev:fields>
			<dev:field const="4" constexpr="4" final="true" fulltype="int" name="LOG_DEBUG" static="true" type="int" visibility="public"></dev:field>
			<dev:field const="3" constexpr="3" final="true" fulltype="int" name="LOG_INFO" static="true" type="int" visibility="public"></dev:field>
			<dev:field const="2" constexpr="2" final="true" fulltype="int" name="LOG_WARNING" static="true" type="int" visibility="public"></dev:field>
			<dev:field const="1" constexpr="1" final="true" fulltype="int" name="LOG_ERROR" static="true" type="int" visibility="public"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor name="Logger" visibility="public"></dev:constructor>
			<dev:method final="true" name="diag" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="Class calling the method (usually the &lt;strong&gt;.class&lt;/strong&gt; member)" name="cls" type="java.lang.Class"></dev:param>
					<dev:param comment="data to be displayed" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="diag" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="method caller (usually the &lt;strong&gt;this&lt;/strong&gt; member)" name="obj" type="java.lang.Object"></dev:param>
					<dev:param comment="data to be displayed" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="diag" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="name of the class to prepend to log message" name="sClassName" type="java.lang.String"></dev:param>
					<dev:param comment="data to be displayed" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="error" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="Class calling the method (usually the &lt;strong&gt;.class&lt;/strong&gt; member)" name="cls" type="java.lang.Class"></dev:param>
					<dev:param comment="data to be displayed" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="error" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="method caller (usually the &lt;strong&gt;this&lt;/strong&gt; member)" name="obj" type="java.lang.Object"></dev:param>
					<dev:param comment="data to be displayed" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="error" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param name="sClassName" type="java.lang.String"></dev:param>
					<dev:param name="ste" type="java.lang.StackTraceElement[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="error" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="name of the class to prepend to error message" name="sClassName" type="java.lang.String"></dev:param>
					<dev:param comment="data to be displayed" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="traceArrayToString" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="ste" type="java.lang.StackTraceElement[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="debug" type="void" visibility="public">
				<dev:params>
					<dev:param comment="str data to be displayed" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="diag" type="void" visibility="public">
				<dev:params>
					<dev:param comment="data to be displayed" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="enableDebug" type="void" visibility="public">
				<dev:params>
					<dev:param comment="true if debugging should be enable; false otherwise." name="bState" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="error" type="void" visibility="public">
				<dev:params>
					<dev:param comment="data to be displayed" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="isDebugEnabled" returncomment="true if debugging is enabled; false otherwise." type="boolean" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.lang.ClassName" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="ClassName" visibility="public"></dev:constructor>
			<dev:method final="true" name="getClassName" returncomment="String containing only the Class name without the package details" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="Class whose name is to be retrieved" name="cls" type="java.lang.Class"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="getClassName" returncomment="String containing only the Class name without the package details" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="Object whose name is to be retrieved" name="rStr" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="getClassName" returncomment="The last String in a dot separated string" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="dot delimited String containing the name to be retrieved" name="name" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.lang.ByteBuffer" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="ByteBuffer" visibility="public"></dev:constructor>
			<dev:constructor name="ByteBuffer" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;TT&gt;byte[]&lt;/TT&gt;." name="original" type="byte[]"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="ByteBuffer" visibility="public">
				<dev:params>
					<dev:param comment="array that is the source of bytes." name="value" type="byte[]"></dev:param>
					<dev:param comment="the initial offset." name="offset" type="int"></dev:param>
					<dev:param comment="the length." name="size" type="int"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="ByteBuffer" visibility="public">
				<dev:params>
					<dev:param comment="the initial value of the byte array" name="value" type="char[]"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="ByteBuffer" visibility="public">
				<dev:params>
					<dev:param comment="the initial value of the byte array" name="b" type="int"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="ByteBuffer" visibility="public">
				<dev:params>
					<dev:param comment="the initial value of the byte array" name="value" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="append" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="value" type="byte[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="append" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="value" type="byte[]"></dev:param>
					<dev:param comment="" name="offset" type="int"></dev:param>
					<dev:param comment="" name="size" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="append" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="value" type="char[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="append" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="b" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="append" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="value" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="byteAt" returncomment="" type="byte" visibility="public">
				<dev:params>
					<dev:param comment="" name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="charAt" returncomment="" type="char" visibility="public">
				<dev:params>
					<dev:param comment="" name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="clear" type="void" visibility="public"></dev:method>
			<dev:method name="delete" returncomment="An empty byte buffer." type="com.amx.common.util.lang.ByteBuffer" visibility="public"></dev:method>
			<dev:method name="delete" returncomment="This byte buffer." type="com.amx.common.util.lang.ByteBuffer" visibility="public">
				<dev:params>
					<dev:param comment="The number of characters to remove from beginning to &lt;code&gt;len&lt;/code&gt;." name="len" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="delete" returncomment="This byte buffer." type="com.amx.common.util.lang.ByteBuffer" visibility="public">
				<dev:params>
					<dev:param comment="The beginning index, inclusive." name="start" type="int"></dev:param>
					<dev:param comment="The ending index, exclusive." name="end" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="endsWith" returncomment="true if the character sequence represented by the argument is a suffix of the character sequence represented by this object;          false otherwise. Note that the result will be true if the argument is the empty string or is equal to this ByteBuffer object          as determined by the equals(Object) method." type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the suffix." name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOf" returncomment="" type="int" visibility="public">
				<dev:params>
					<dev:param comment="" name="value" type="byte[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOf" returncomment="" type="int" visibility="public">
				<dev:params>
					<dev:param comment="" name="value" type="byte[]"></dev:param>
					<dev:param comment="" name="fromIndex" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOf" returncomment="" type="int" visibility="public">
				<dev:params>
					<dev:param comment="" name="value" type="char[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOf" returncomment="" type="int" visibility="public">
				<dev:params>
					<dev:param comment="" name="value" type="char[]"></dev:param>
					<dev:param comment="" name="fromIndex" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOf" returncomment="the index of the first occurrence of the byte in the byte sequence represented by this object, or &lt;code&gt;-1&lt;/code&gt; if the byte          does not occur." type="int" visibility="public">
				<dev:params>
					<dev:param comment="a byte." name="value" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOf" returncomment="" type="int" visibility="public">
				<dev:params>
					<dev:param comment="" name="value" type="int"></dev:param>
					<dev:param comment="" name="fromIndex" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOf" returncomment="if the string argument occurs as a substring within this object, then the index of the first character of the first such          substring is returned; if it does not occur as a substring, &lt;code&gt;-1&lt;/code&gt; is returned." type="int" visibility="public">
				<dev:params>
					<dev:param name="value" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOf" returncomment="" type="int" visibility="public">
				<dev:params>
					<dev:param comment="" name="value" type="java.lang.String"></dev:param>
					<dev:param comment="" name="fromIndex" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="length" returncomment="the number of valid bytes in the byte array." type="int" visibility="public"></dev:method>
			<dev:method name="replace" returncomment="This byte buffer." type="com.amx.common.util.lang.ByteBuffer" visibility="public">
				<dev:params>
					<dev:param comment="The beginning index, inclusive." name="start" type="int"></dev:param>
					<dev:param comment="The ending index, exclusive." name="end" type="int"></dev:param>
					<dev:param comment="Byte[] that will replace previous contents." name="value" type="byte[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="startsWith" returncomment="true if the character sequence represented by the argument is a prefix of the character sequence represented by this byte          buffer; false otherwise. Note also that true will be returned if the argument is an empty string or is equal to this          ByteBuffer object as determined by the equals(Object) method." type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the prefix" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="substring" returncomment="The new ByteBuffer." type="com.amx.common.util.lang.ByteBuffer" visibility="public">
				<dev:params>
					<dev:param comment="The beginning index, inclusive." name="start" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="substring" returncomment="The new ByteBuffer." type="com.amx.common.util.lang.ByteBuffer" visibility="public">
				<dev:params>
					<dev:param comment="The beginning index, inclusive." name="start" type="int"></dev:param>
					<dev:param comment="The ending index, exclusive." name="end" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toByteArray" returncomment="" type="byte[]" visibility="public"></dev:method>
			<dev:method name="toCharArray" returncomment="" type="char[]" visibility="public"></dev:method>
			<dev:method name="toHex" returncomment="ASCII hex representation of a byte array" type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="toString" returncomment="String representation of a byte array" type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="UByteAt" returncomment="" type="int" visibility="public">
				<dev:params>
					<dev:param comment="" name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.lang.Bits" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="Bits" visibility="public"></dev:constructor>
			<dev:method final="true" name="getBoolean" returncomment="" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="" name="b" type="byte[]"></dev:param>
					<dev:param comment="" name="off" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="getChar" returncomment="" static="true" type="char" visibility="public">
				<dev:params>
					<dev:param comment="" name="b" type="byte[]"></dev:param>
					<dev:param comment="" name="off" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="getDouble" returncomment="" static="true" type="double" visibility="public">
				<dev:params>
					<dev:param comment="" name="b" type="byte[]"></dev:param>
					<dev:param comment="" name="off" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="getFloat" returncomment="" static="true" type="float" visibility="public">
				<dev:params>
					<dev:param comment="" name="b" type="byte[]"></dev:param>
					<dev:param comment="" name="off" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="getInt" returncomment="" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="" name="b" type="byte[]"></dev:param>
					<dev:param comment="" name="off" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="getLong" returncomment="" static="true" type="long" visibility="public">
				<dev:params>
					<dev:param comment="" name="b" type="byte[]"></dev:param>
					<dev:param comment="" name="off" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="getShort" returncomment="" static="true" type="short" visibility="public">
				<dev:params>
					<dev:param comment="" name="b" type="byte[]"></dev:param>
					<dev:param comment="" name="off" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="isBitSet" returncomment="true if the bit is set; false otherwise." static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="8 bit value" name="value" type="int"></dev:param>
					<dev:param comment="0-7 (bytes 1-8 respectively)" name="pos" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="putBoolean" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="b" type="byte[]"></dev:param>
					<dev:param comment="" name="off" type="int"></dev:param>
					<dev:param comment="" name="val" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="putChar" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="b" type="byte[]"></dev:param>
					<dev:param comment="" name="off" type="int"></dev:param>
					<dev:param comment="" name="val" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="putDouble" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="b" type="byte[]"></dev:param>
					<dev:param comment="" name="off" type="int"></dev:param>
					<dev:param comment="" name="val" type="double"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="putFloat" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="b" type="byte[]"></dev:param>
					<dev:param comment="" name="off" type="int"></dev:param>
					<dev:param comment="" name="val" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="putInt" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="b" type="byte[]"></dev:param>
					<dev:param comment="" name="off" type="int"></dev:param>
					<dev:param comment="" name="val" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="putLong" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="b" type="byte[]"></dev:param>
					<dev:param comment="" name="off" type="int"></dev:param>
					<dev:param comment="" name="val" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="putShort" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="b" type="byte[]"></dev:param>
					<dev:param comment="" name="off" type="int"></dev:param>
					<dev:param comment="" name="val" type="short"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.netLinx.SendCommandFeedback" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="SendCommandFeedback" visibility="public"></dev:constructor>
			<dev:method name="queueCommandFeedbackRequest" type="void" visibility="public">
				<dev:params>
					<dev:param name="cmdMessage" type="java.lang.String"></dev:param>
					<dev:param name="caller" type="com.amx.duet.devicesdk.base.Module"></dev:param>
					<dev:param name="netLinxDPS" type="com.amx.duet.core.master.netlinx.DPS"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.netLinx.NetLinxUtil" superclass="java.lang.Object">
		<dev:fields>
			<dev:field const="doc:/prog.tkn" constexpr="&quot;doc:/prog.tkn&quot;" final="true" fulltype="java.lang.String" name="PROG_TKN_FILE_NAME" static="true" type="String" visibility="public"></dev:field>
			<dev:field const="0" constexpr="0" final="true" fulltype="int" name="FORMAT_HEX_STRING_COMMA_SEPARATED" static="true" type="int" visibility="public"></dev:field>
			<dev:field const="1" constexpr="1" final="true" fulltype="int" name="FORMAT_HEX_STRING_MAC_ADDRESS" static="true" type="int" visibility="public"></dev:field>
			<dev:field const="2" constexpr="2" final="true" fulltype="int" name="FORMAT_HEX_STRING_TP_COMMAND" static="true" type="int" visibility="public"></dev:field>
			<dev:field const="3" constexpr="3" final="true" fulltype="int" name="FORMAT_HEX_STRING_HYPHEN_SEPARATED" static="true" type="int" visibility="public"></dev:field>
			<dev:field const="4" constexpr="4" final="true" fulltype="int" name="FORMAT_HEX_STRING_COLON_SEPARATED" static="true" type="int" visibility="public"></dev:field>
			<dev:field const="^UNI-" constexpr="&quot;^UNI-&quot;" final="true" fulltype="java.lang.String" name="TP_UNICODE_COMMAND" static="true" type="String" visibility="public"></dev:field>
			<dev:field const="^TXT-" constexpr="&quot;^TXT-&quot;" final="true" fulltype="java.lang.String" name="TP_NONUNICODE_COMMAND" static="true" type="String" visibility="public"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor name="NetLinxUtil" visibility="public"></dev:constructor>
			<dev:method name="decodeStringToWideChar" returncomment="16-bit Big Endian byte array" static="true" type="byte[]" visibility="public">
				<dev:params>
					<dev:param comment="" name="data" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="encodeBytesToHexString" returncomment="hex string of bytes" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="byte array to encode to string" name="data" type="byte[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="encodeBytesToHexString" returncomment="hex string of bytes" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="byte array to encode to string" name="data" type="byte[]"></dev:param>
					<dev:param name="format" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="sendWideCharCommandToTP4" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="touch panel object" name="dvTP" type="com.amx.duet.da.NetLinxDevice"></dev:param>
					<dev:param comment="the string that needs to send to touch panel" name="strUnicode" type="java.lang.String"></dev:param>
					<dev:param comment="touch panel button address code" name="addressCode" type="int"></dev:param>
					<dev:param comment="touch panel button state (ON, OFF or ALL)" name="state" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="sendWideCharCommandToTP4" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param comment="touch panel object" name="dvTP" type="com.amx.duet.da.NetLinxDevice"></dev:param>
					<dev:param comment="the byte data that needs to send" name="byteData" type="byte[]"></dev:param>
					<dev:param comment="touch panel button address code" name="addressCode" type="int"></dev:param>
					<dev:param comment="touch panel button state (ON, OFF or ALL)" name="state" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="eventValToStr" returncomment="" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="evt" type="com.amx.duet.core.master.netlinx.Event"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getCommandName" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="data" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getCommandValue" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="data" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="escapeParameters" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="parameters" type="java.util.List"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="escapeParameters" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="parameters" type="java.lang.String[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="escapeParameter" returncomment="escaped String" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="" name="strValue" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="unescapeParametersToStringArray" static="true" type="java.lang.String[]" visibility="public">
				<dev:params>
					<dev:param name="data" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="unescapeParameters" static="true" type="java.util.ArrayList" visibility="public">
				<dev:params>
					<dev:param name="value" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="convertByteArrayToString" returncomment="string" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="byte Array" name="bytes" type="byte[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="trimString" returncomment="string" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="target" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="formatExtendedAddress" returncomment="" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="" name="extendedAddress" type="com.amx.duet.core.master.netlinx.ExtendedAddress"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getSystemUniqueId" returncomment="" static="true" type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="getUserProgramLastModified" returncomment="" static="true" type="java.util.Date" visibility="public"></dev:method>
			<dev:method name="getUserProgramFileSize" returncomment="byte count" static="true" type="java.lang.Long" visibility="public"></dev:method>
			<dev:method name="getDpsLocalString" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="" name="dps" type="com.amx.duet.core.master.netlinx.DPS"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isDpsEqual" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment=", dps2" name="dps1" type="com.amx.duet.core.master.netlinx.DPS"></dev:param>
					<dev:param name="dps2" type="com.amx.duet.core.master.netlinx.DPS"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="bytesToMeg" static="true" type="long" visibility="public">
				<dev:params>
					<dev:param name="bytes" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="bytesToKiloBytes" static="true" type="long" visibility="public">
				<dev:params>
					<dev:param name="bytes" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getSerialNumber" static="true" type="java.lang.String" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.osgi.FrameworkCommands" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="FrameworkCommands" visibility="public"></dev:constructor>
			<dev:method name="enumerateDuetModules" static="true" type="org.osgi.framework.ServiceReference[]" visibility="public">
				<dev:params>
					<dev:param name="bundleContext" type="org.osgi.framework.BundleContext"></dev:param>
					<dev:param name="debug" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="enumerateOSGiBundles" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param name="bundleContext" type="org.osgi.framework.BundleContext"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="enumerateOSGiServices" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param name="bundleContext" type="org.osgi.framework.BundleContext"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="enumerateOSGiServices" static="true" type="void" visibility="public">
				<dev:params>
					<dev:param name="bundleContext" type="org.osgi.framework.BundleContext"></dev:param>
					<dev:param name="showProperties" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getAllDuetModules" static="true" type="java.util.List" visibility="public">
				<dev:params>
					<dev:param name="bundleContext" type="org.osgi.framework.BundleContext"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isThisModule" returncomment="true, if is this module" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the dps" name="dps" type="com.amx.duet.core.master.netlinx.DPS"></dev:param>
					<dev:param comment="the module" name="module" type="com.amx.duet.devicesdk.base.Module"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.text.UtilityFunctions" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="UtilityFunctions" visibility="public"></dev:constructor>
			<dev:method name="chunker" static="true" type="java.util.List" visibility="public">
				<dev:params>
					<dev:param name="s" type="java.lang.String"></dev:param>
					<dev:param name="numberOfCharacters" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="split" static="true" type="java.util.ArrayList" visibility="public">
				<dev:params>
					<dev:param name="s" type="java.lang.String"></dev:param>
					<dev:param name="delim" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="tryParse" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param name="value" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="tryParse" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param name="value" type="java.lang.String"></dev:param>
					<dev:param name="defaultValue" type="int"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.text.StringUtils" superclass="java.lang.Object">
		<dev:fields>
			<dev:field constexpr="&quot;&quot;" final="true" fulltype="java.lang.String" name="EMPTY" static="true" type="String" visibility="public"></dev:field>
			<dev:field const="-1" constexpr="-1" final="true" fulltype="int" name="INDEX_NOT_FOUND" static="true" type="int" visibility="public"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor name="StringUtils" visibility="public"></dev:constructor>
			<dev:method name="contains" returncomment="true if the CharSequence contains the search CharSequence, false if not or {@code null} string input" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="seq" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the CharSequence to find, may be null" name="searchSeq" type="java.lang.CharSequence"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="contains" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="seq" type="java.lang.CharSequence"></dev:param>
					<dev:param name="searchSeq" type="java.lang.CharSequence[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="contains" returncomment="true if the CharSequence contains the search character, false if not or {@code null} string input" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="seq" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the character to find" name="searchChar" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="containsIgnoreCase" returncomment="true if the CharSequence contains the search CharSequence irrespective of case or false if not or {@code null} string input" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="str" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the CharSequence to find, may be null" name="searchStr" type="java.lang.CharSequence"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="containsWhitespace" returncomment="{@code true} if the CharSequence is not empty and contains at least 1 whitespace character" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check (may be {@code null})" name="seq" type="java.lang.CharSequence"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="convertStreamToString" static="true" type="java.lang.StringBuffer" visibility="public">
				<dev:params>
					<dev:param name="is" type="java.io.InputStream"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="doesNotContains" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="seq" type="java.lang.CharSequence"></dev:param>
					<dev:param name="searchSeq" type="java.lang.CharSequence"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="doesNotContains" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="seq" type="java.lang.CharSequence"></dev:param>
					<dev:param name="searchSeq" type="java.lang.CharSequence[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="equals" returncomment="{@code true} if the CharSequences are equal, case sensitive, or both {@code null}" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the first CharSequence, may be null" name="cs1" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the second CharSequence, may be null" name="cs2" type="java.lang.CharSequence"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="equalsIgnoreCase" returncomment="{@code true} if the CharSequence are equal, case insensitive, or both {@code null}" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the first CharSequence, may be null" name="str1" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the second CharSequence, may be null" name="str2" type="java.lang.CharSequence"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="findString" returncomment="An integer representing the character location of pattern in the string. If the character sequence is found at the beginning          of the string, this method returns 0. Any error condition returns -1." static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the string of characters to search." name="str" type="java.lang.String"></dev:param>
					<dev:param comment="the sequence of characters to search for" name="pattern" type="java.lang.String"></dev:param>
					<dev:param comment="the starting character position for the search" name="start" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="getBufferChar" returncomment="The character that was removed from the string." static="true" type="char" visibility="public">
				<dev:params>
					<dev:param name="rbuffer" type="com.amx.common.util.lang.ObjectRef"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="getBufferString" returncomment="String that contains all of the characters that were removed from the string" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="rbuffer" type="com.amx.common.util.lang.ObjectRef"></dev:param>
					<dev:param comment="the number of characters to be retrieved and then shifted" name="count" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOf" returncomment="the first index of the search CharSequence, -1 if no match or {@code null} string input" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="seq" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the CharSequence to find, may be null" name="searchSeq" type="java.lang.CharSequence"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOf" returncomment="the first index of the search CharSequence, -1 if no match or {@code null} string input" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="seq" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the CharSequence to find, may be null" name="searchSeq" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the start position, negative treated as zero" name="startPos" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOf" returncomment="the first index of the search character, -1 if no match or {@code null} string input" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="seq" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the character to find" name="searchChar" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOf" returncomment="the first index of the search character, -1 if no match or {@code null} string input" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="seq" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the character to find" name="searchChar" type="int"></dev:param>
					<dev:param comment="the start position, negative treated as zero" name="startPos" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOfAny" returncomment="the first index of any of the searchStrs in str, -1 if no match" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="str" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the CharSequences to search for, may be null" name="searchStrs" type="java.lang.CharSequence[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOfIgnoreCase" returncomment="the first index of the search CharSequence, -1 if no match or {@code null} string input" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="str" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the CharSequence to find, may be null" name="searchStr" type="java.lang.CharSequence"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOfIgnoreCase" returncomment="the first index of the search CharSequence, -1 if no match or {@code null} string input" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="str" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the CharSequence to find, may be null" name="searchStr" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the start position, negative treated as zero" name="startPos" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isBlank" returncomment="{@code true} if the CharSequence is null, empty or whitespace" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="cs" type="java.lang.CharSequence"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isEmpty" returncomment="{@code true} if the CharSequence is empty or null" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="cs" type="java.lang.CharSequence"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isNotBlank" returncomment="{@code true} if the CharSequence is not empty and not null and not whitespace" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="cs" type="java.lang.CharSequence"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isNotEmpty" returncomment="{@code true} if the CharSequence is not empty and not null" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="cs" type="java.lang.CharSequence"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="join" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="coll" type="java.lang.String[]"></dev:param>
					<dev:param name="delimiter" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="lastIndexOf" returncomment="the last index of the search String, -1 if no match or {@code null} string input" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="seq" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the CharSequence to find, may be null" name="searchSeq" type="java.lang.CharSequence"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="lastIndexOf" returncomment="the first index of the search CharSequence, -1 if no match or {@code null} string input" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="seq" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the CharSequence to find, may be null" name="searchSeq" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the start position, negative treated as zero" name="startPos" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="lastIndexOf" returncomment="the last index of the search character, -1 if no match or {@code null} string input" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="seq" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the character to find" name="searchChar" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="lastIndexOf" returncomment="the last index of the search character, -1 if no match or {@code null} string input" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="seq" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the character to find" name="searchChar" type="int"></dev:param>
					<dev:param comment="the start position" name="startPos" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="lastIndexOfAny" returncomment="the last index of any of the CharSequences, -1 if no match" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="str" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the CharSequences to search for, may be null" name="searchStrs" type="java.lang.CharSequence[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="lastIndexOfIgnoreCase" returncomment="the first index of the search CharSequence, -1 if no match or {@code null} string input" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="str" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the CharSequence to find, may be null" name="searchStr" type="java.lang.CharSequence"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="lastIndexOfIgnoreCase" returncomment="the first index of the search CharSequence, -1 if no match or {@code null} input" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="str" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the CharSequence to find, may be null" name="searchStr" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the start position" name="startPos" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="lastOrdinalIndexOf" returncomment="the n-th last index of the search CharSequence, {@code -1} ({@code INDEX_NOT_FOUND}) if no match or {@code null} string input" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="str" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the CharSequence to find, may be null" name="searchStr" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the n-th last {@code searchStr} to find" name="ordinal" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="leftString" returncomment="A String containing a copy of the first count characters from the string." static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the string from which to extract the characters." name="str" type="java.lang.String"></dev:param>
					<dev:param comment="the number of character to copy from the beginning of the string." name="count" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="midString" returncomment="A String containing a copy of the specified characters from the string." static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the string from which to extract the characters." name="str" type="java.lang.String"></dev:param>
					<dev:param comment="the starting location in the string." name="start" type="int"></dev:param>
					<dev:param comment="the number of characters to extract." name="count" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="notEquals" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="cs1" type="java.lang.CharSequence"></dev:param>
					<dev:param name="cs2" type="java.lang.CharSequence"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="ordinalIndexOf" returncomment="the n-th index of the search CharSequence, {@code -1} ({@code INDEX_NOT_FOUND}) if no match or {@code null} string input" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="the CharSequence to check, may be null" name="str" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the CharSequence to find, may be null" name="searchStr" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the n-th {@code searchStr} to find" name="ordinal" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="parse" returncomment="an array of strings" static="true" type="java.lang.String[]" visibility="public">
				<dev:params>
					<dev:param comment="data string to be parsed" name="data" type="java.lang.String"></dev:param>
					<dev:param comment="string delimiter to parse the data by" name="delim" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="removeString" returncomment="String that contains all of the characters that were removed from the string" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="Must be of type &lt;STRONG&gt;String&lt;/STRONG&gt;. ObjectRef containing the source string data to be manipulated (value is passed by             reference).             &lt;P&gt;               Create rStr with a &lt;STRONG&gt;valueOf(String)&lt;/STRONG&gt; Example: &lt;br&gt;             &lt;code&gt;ObjectRef rStr = new ObjectRef(&quot;&quot;) or rStr.valueOf(&quot;&quot;)&lt;/code&gt;" name="rStr" type="com.amx.common.util.lang.ObjectRef"></dev:param>
					<dev:param comment="the number of characters to remove" name="count" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="removeString" returncomment="String that no longer contains pattern" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="Must be of type &lt;STRONG&gt;String&lt;/STRONG&gt;. ObjectRef containing the source string data to be manipulated (value is passed by             reference).             &lt;P&gt;               Create rStr with a &lt;STRONG&gt;valueOf(String)&lt;/STRONG&gt; Example: &lt;br&gt;             &lt;code&gt;ObjectRef rStr = new ObjectRef(&quot;&quot;) or rStr.valueOf(&quot;&quot;)&lt;/code&gt;" name="rStr" type="com.amx.common.util.lang.ObjectRef"></dev:param>
					<dev:param comment="Pattern to remove from source string" name="pattern" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="removeString" returncomment="String that no longer contains pattern" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="Must be of type &lt;STRONG&gt;String&lt;/STRONG&gt;. ObjectRef containing the source string data to be manipulated (value is passed by             reference).             &lt;P&gt;               Create rStr with a &lt;STRONG&gt;valueOf(String)&lt;/STRONG&gt; Example: &lt;br&gt;             &lt;code&gt;ObjectRef rStr = new ObjectRef(&quot;&quot;) or rStr.valueOf(&quot;&quot;)&lt;/code&gt;" name="rStr" type="com.amx.common.util.lang.ObjectRef"></dev:param>
					<dev:param comment="Pattern to remove from source string" name="pattern" type="java.lang.String"></dev:param>
					<dev:param comment="offset value" name="start" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="removeString" returncomment="Only the character that were not removed from the string" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="Source string to be manipulated" name="str" type="java.lang.String"></dev:param>
					<dev:param comment="the number of characters to remove" name="count" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="removeString" returncomment="String that no longer contains pattern" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="Source string to be manipulated" name="str" type="java.lang.String"></dev:param>
					<dev:param comment="Pattern to remove from source string" name="pattern" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="removeString" returncomment="String that no longer contains pattern" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="Source string to be manipulated" name="str" type="java.lang.String"></dev:param>
					<dev:param comment="Pattern to remove from source string" name="pattern" type="java.lang.String"></dev:param>
					<dev:param comment="offset value" name="start" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="removeStringAll" returncomment="String that no longer contains pattern" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="String to be manipulated" name="str" type="java.lang.String"></dev:param>
					<dev:param comment="Pattern to remove from source string" name="pattern" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="replaceEach" returncomment="the text with any replacements processed, {@code null} if null String input" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="text to search and replace in, no-op if null" name="text" type="java.lang.String"></dev:param>
					<dev:param comment="the Strings to search for, no-op if null" name="searchList" type="java.lang.String[]"></dev:param>
					<dev:param comment="the Strings to replace them with, no-op if null" name="replacementList" type="java.lang.String[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="replaceEachRepeatedly" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="text" type="java.lang.String"></dev:param>
					<dev:param name="searchList" type="java.lang.String[]"></dev:param>
					<dev:param name="replacement" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="replaceEachRepeatedly" returncomment="the text with any replacements processed, {@code null} if null String input" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="text to search and replace in, no-op if null" name="text" type="java.lang.String"></dev:param>
					<dev:param comment="the Strings to search for, no-op if null" name="searchList" type="java.lang.String[]"></dev:param>
					<dev:param comment="the Strings to replace them with, no-op if null" name="replacementList" type="java.lang.String[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="replaceString" returncomment="the newly replaced string" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="String to be manipulated" name="str" type="java.lang.String"></dev:param>
					<dev:param comment="Pattern to remove from source string" name="pattern" type="java.lang.String"></dev:param>
					<dev:param comment="Pattern to replace removed pattern with" name="replace" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="rightString" returncomment="A String containing a copy of the last count characters from the string." static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the string from which to extract the characters." name="str" type="java.lang.String"></dev:param>
					<dev:param comment="the number of character to copy from the end of the string." name="count" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="strip" returncomment="the stripped String, {@code null} if null String input" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the String to remove whitespace from, may be null" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="strip" returncomment="the stripped String, {@code null} if null String input" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the String to remove characters from, may be null" name="str" type="java.lang.String"></dev:param>
					<dev:param comment="the characters to remove, null treated as whitespace" name="stripChars" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="stripAll" returncomment="the stripped Strings, {@code null} if null array input" static="true" type="java.lang.String[]" visibility="public">
				<dev:params>
					<dev:param comment="the array to remove whitespace from, may be null" name="strs" type="java.lang.String[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="stripAll" returncomment="the stripped Strings, {@code null} if null array input" static="true" type="java.lang.String[]" visibility="public">
				<dev:params>
					<dev:param comment="the array to remove characters from, may be null" name="strs" type="java.lang.String[]"></dev:param>
					<dev:param comment="the characters to remove, null treated as whitespace" name="stripChars" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="stripEnd" returncomment="the stripped String, {@code null} if null String input" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the String to remove characters from, may be null" name="str" type="java.lang.String"></dev:param>
					<dev:param comment="the set of characters to remove, null treated as whitespace" name="stripChars" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="stripStart" returncomment="the stripped String, {@code null} if null String input" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the String to remove characters from, may be null" name="str" type="java.lang.String"></dev:param>
					<dev:param comment="the characters to remove, null treated as whitespace" name="stripChars" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="stripToEmpty" returncomment="the trimmed String, or an empty String if {@code null} input" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the String to be stripped, may be null" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="stripToNull" returncomment="the stripped String, {@code null} if whitespace, empty or null String input" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the String to be stripped, may be null" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="toAsciiHexString" returncomment="ASCII hex representation of a byte array" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="bArr" type="byte[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="trim" returncomment="the trimmed string, {@code null} if null String input" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the String to be trimmed, may be null" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="trimToEmpty" returncomment="the trimmed String, or an empty String if {@code null} input" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the String to be trimmed, may be null" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="trimToNull" returncomment="the trimmed String, {@code null} if only chars &lt;= 32, empty or null String input" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the String to be trimmed, may be null" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="writeBytes" returncomment="new byte array containg the copied bytes" static="true" type="byte[]" visibility="public">
				<dev:params>
					<dev:param comment="source byte array containing all of the data" name="b" type="byte[]"></dev:param>
					<dev:param comment="offset value to start copying source array from" name="off" type="int"></dev:param>
					<dev:param comment="number of bytes to copy after offset" name="len" type="int"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.text.StringBufferExt" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="StringBufferExt" visibility="public"></dev:constructor>
			<dev:constructor name="StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="the initial capacity." name="capacity" type="int"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="the initial contents of the buffer." name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="append" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt;." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;boolean&lt;/code&gt;." name="b" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="append" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="the characters to be appended." name="str" type="char[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="append" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;char&lt;/code&gt;." name="c" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="append" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="the characters to be appended." name="str" type="char[]"></dev:param>
					<dev:param comment="the index of the first character to append." name="offset" type="int"></dev:param>
					<dev:param comment="the number of characters to append." name="len" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="append" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;double&lt;/code&gt;." name="d" type="double"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="append" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;float&lt;/code&gt;." name="f" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="append" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="an &lt;code&gt;int&lt;/code&gt;." name="i" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="append" returncomment="a referenct to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;long&lt;/code&gt;." name="l" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="append" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="an &lt;code&gt;Object&lt;/code&gt;." name="obj" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="append" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt;." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="a string." name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="append" returncomment="a reference to this object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;tt&gt;StringBuffer&lt;/tt&gt; to append." name="sb" type="java.lang.StringBuffer"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="append" returncomment="a reference to this object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;tt&gt;StringBufferExt &lt;/tt&gt; to append." name="sb" type="com.amx.common.util.text.StringBufferExt"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="capacity" returncomment="the current capacity of this string buffer." type="int" visibility="public"></dev:method>
			<dev:method name="charAt" returncomment="the character at the specified index of this string buffer." type="char" visibility="public">
				<dev:params>
					<dev:param comment="the index of the desired character." name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="delete" returncomment="An empty string buffer." type="com.amx.common.util.text.StringBufferExt" visibility="public"></dev:method>
			<dev:method name="delete" returncomment="This string buffer." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="The number of characters to remove from beginning to &lt;code&gt;len&lt;/code&gt;." name="len" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="delete" returncomment="This string buffer." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="The beginning index, inclusive." name="start" type="int"></dev:param>
					<dev:param comment="The ending index, exclusive." name="end" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="deleteCharAt" returncomment="This string buffer." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="Index of character to remove" name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="endsWith" returncomment="true if the character sequence represented by the argument is a suffix of the character sequence represented by this object;          false otherwise. Note that the result will be true if the argument is the empty string or is equal to this StringBufferExt          object as determined by the equals(Object) method." type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the suffix." name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="ensureCapacity" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the minimum desired capacity." name="minimumCapacity" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getChars" type="void" visibility="public">
				<dev:params>
					<dev:param comment="start copying at this offset in the string buffer." name="srcBegin" type="int"></dev:param>
					<dev:param comment="stop copying at this offset in the string buffer." name="srcEnd" type="int"></dev:param>
					<dev:param comment="the array to copy the data into." name="dst" type="char[]"></dev:param>
					<dev:param comment="offset into &lt;code&gt;dst&lt;/code&gt;." name="dstBegin" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOf" returncomment="the index of the first occurrence of the character in the character sequence represented by this object, or &lt;code&gt;-1&lt;/code&gt;          if the character does not occur." type="int" visibility="public">
				<dev:params>
					<dev:param comment="a character." name="ch" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOf" returncomment="the index of the first occurrence of the character in the character sequence represented by this object that is greater than          or equal to &lt;code&gt;fromIndex&lt;/code&gt;, or &lt;code&gt;-1&lt;/code&gt; if the character does not occur." type="int" visibility="public">
				<dev:params>
					<dev:param comment="a character." name="ch" type="int"></dev:param>
					<dev:param comment="the index to start the search from." name="fromIndex" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOf" returncomment="if the string argument occurs as a substring within this object, then the index of the first character of the first such          substring is returned; if it does not occur as a substring, &lt;code&gt;-1&lt;/code&gt; is returned." type="int" visibility="public">
				<dev:params>
					<dev:param comment="any string." name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="indexOf" returncomment="If the string argument occurs as a substring within this object at a starting index no smaller than &lt;code&gt;fromIndex&lt;/code&gt;,          then the index of the first character of the first such substring is returned. If it does not occur as a substring starting          at &lt;code&gt;fromIndex&lt;/code&gt; or beyond, &lt;code&gt;-1&lt;/code&gt; is returned." type="int" visibility="public">
				<dev:params>
					<dev:param comment="the substring to search for." name="str" type="java.lang.String"></dev:param>
					<dev:param comment="the index to start the search from." name="fromIndex" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="insert" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="the offset." name="offset" type="int"></dev:param>
					<dev:param comment="a &lt;code&gt;boolean&lt;/code&gt;." name="b" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="insert" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="the offset." name="offset" type="int"></dev:param>
					<dev:param comment="a character array." name="str" type="char[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="insert" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="the offset." name="offset" type="int"></dev:param>
					<dev:param comment="a &lt;code&gt;char&lt;/code&gt;." name="c" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="insert" returncomment="This string buffer." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="position at which to insert subarray." name="index" type="int"></dev:param>
					<dev:param comment="A character array." name="str" type="char[]"></dev:param>
					<dev:param comment="the index of the first character in subarray to to be inserted." name="offset" type="int"></dev:param>
					<dev:param comment="the number of characters in the subarray to to be inserted." name="len" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="insert" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="the offset." name="offset" type="int"></dev:param>
					<dev:param comment="a &lt;code&gt;double&lt;/code&gt;." name="d" type="double"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="insert" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="the offset." name="offset" type="int"></dev:param>
					<dev:param comment="a &lt;code&gt;float&lt;/code&gt;." name="f" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="insert" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="the offset." name="offset" type="int"></dev:param>
					<dev:param comment="an &lt;code&gt;int&lt;/code&gt;." name="i" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="insert" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="the offset." name="offset" type="int"></dev:param>
					<dev:param comment="a &lt;code&gt;long&lt;/code&gt;." name="l" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="insert" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="the offset." name="offset" type="int"></dev:param>
					<dev:param comment="an &lt;code&gt;Object&lt;/code&gt;." name="obj" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="insert" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="the offset." name="offset" type="int"></dev:param>
					<dev:param comment="a string." name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="lastIndexOf" returncomment="the index of the last occurrence of the character in the character sequence represented by this object, or &lt;code&gt;-1&lt;/code&gt; if          the character does not occur." type="int" visibility="public">
				<dev:params>
					<dev:param comment="a character." name="ch" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="lastIndexOf" returncomment="the index of the last occurrence of the character in the character sequence represented by this object that is less than or          equal to &lt;code&gt;fromIndex&lt;/code&gt;, or &lt;code&gt;-1&lt;/code&gt; if the character does not occur before that point." type="int" visibility="public">
				<dev:params>
					<dev:param comment="a character." name="ch" type="int"></dev:param>
					<dev:param comment="the index to start the search from. There is no restriction on the value of &lt;code&gt;fromIndex&lt;/code&gt;. If it is greater than             or equal to the length of this string, it has the same effect as if it were equal to one less than the length of this             string: this entire string may be searched. If it is negative, it has the same effect as if it were -1: -1 is returned." name="fromIndex" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="lastIndexOf" returncomment="if the string argument occurs one or more times as a substring within this object, then the index of the first character of          the last such substring is returned. If it does not occur as a substring, &lt;code&gt;-1&lt;/code&gt; is returned." type="int" visibility="public">
				<dev:params>
					<dev:param comment="the substring to search for." name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="lastIndexOf" returncomment="If the string argument occurs one or more times as a substring within this object at a starting index no greater than          &lt;code&gt;fromIndex&lt;/code&gt;, then the index of the first character of the last such substring is returned. If it does not occur as          a substring starting at &lt;code&gt;fromIndex&lt;/code&gt; or earlier, &lt;code&gt;-1&lt;/code&gt; is returned." type="int" visibility="public">
				<dev:params>
					<dev:param comment="the substring to search for." name="str" type="java.lang.String"></dev:param>
					<dev:param comment="the index to start the search from. There is no restriction on the value of fromIndex. If it is greater than the length of             this string buffer, it has the same effect as if it were equal to the length of this string buffer: this entire string             buffer may be searched. If it is negative, it has the same effect as if it were -1: -1 is returned." name="fromIndex" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="length" returncomment="the length of the sequence of characters currently represented by this string buffer." type="int" visibility="public"></dev:method>
			<dev:method name="replace" returncomment="This string buffer." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="The beginning index, inclusive." name="start" type="int"></dev:param>
					<dev:param comment="The ending index, exclusive." name="end" type="int"></dev:param>
					<dev:param comment="String that will replace previous contents." name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="reverse" returncomment="a reference to this &lt;codeStringBuffer&lt;/code&gt; object.." type="com.amx.common.util.text.StringBufferExt" visibility="public"></dev:method>
			<dev:method name="set" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt;." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;boolean&lt;/code&gt;." name="b" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="the characters to set." name="str" type="char[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;char&lt;/code&gt;." name="c" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="the characters to be added." name="str" type="char[]"></dev:param>
					<dev:param comment="the index of the first character to set." name="offset" type="int"></dev:param>
					<dev:param comment="the number of characters to set." name="len" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;double&lt;/code&gt;." name="d" type="double"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;float&lt;/code&gt;." name="f" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="an &lt;code&gt;int&lt;/code&gt;." name="i" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="a referenct to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="a &lt;code&gt;long&lt;/code&gt;." name="l" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt; object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="an &lt;code&gt;Object&lt;/code&gt;." name="obj" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="a reference to this &lt;code&gt;StringBufferExt&lt;/code&gt;." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="a string." name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="a reference to this object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;tt&gt;StringBuffer&lt;/tt&gt; to set." name="sb" type="java.lang.StringBuffer"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="set" returncomment="a reference to this object." type="com.amx.common.util.text.StringBufferExt" visibility="public">
				<dev:params>
					<dev:param comment="the &lt;tt&gt;StringBufferExt&lt;/tt&gt; to set." name="sb" type="com.amx.common.util.text.StringBufferExt"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setCharAt" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the index of the character to modify." name="index" type="int"></dev:param>
					<dev:param comment="the new character." name="ch" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setLength" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the new length of the buffer." name="newLength" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="startsWith" returncomment="true if the character sequence represented by the argument is a prefix of the character sequence represented by this string          buffer; false otherwise. Note also that true will be returned if the argument is an empty string or is equal to this          StringBufferExt object as determined by the equals(Object) method." type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the prefix" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="substring" returncomment="The new string." type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="The beginning index, inclusive." name="start" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="substring" returncomment="The new string." type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="The beginning index, inclusive." name="start" type="int"></dev:param>
					<dev:param comment="The ending index, exclusive." name="end" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="toString" returncomment="a string representation of the string buffer." type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="toStringBuffer" returncomment="the StringBuffer representation of this object." type="java.lang.StringBuffer" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.text.NumericUtil" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="NumericUtil" visibility="public"></dev:constructor>
			<dev:method final="true" name="atob" returncomment="A boolean value (either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;) representing the converted string. &lt;code&gt;atob&lt;/code&gt; returns          the value representing the first complete set of characters that represent a boolean like value. Valid &lt;STRONG&gt;true&lt;/STRONG&gt;          characters are &quot;1&quot; or &quot;true&quot; (case sensitive). Everything else is considered &lt;STRONG&gt;false&lt;/STRONG&gt;." static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="String containing the character representation of the boolean value." name="value" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="atod" returncomment="A 64-bit floating point number representing the converted string. Any non-numeric characters in the string are ignored.          &lt;code&gt;atod&lt;/code&gt; returns the value representing the first complete set of characters that represents a floating point value.          Valid characters are &quot;0&quot; through &quot;9&quot; and &quot;.&quot; along with the sign designators (&quot;+&quot; and &quot;-&quot;) and the exponent (&quot;e&quot; or &quot;E&quot;). If          invalid characters are found, zero is returned as a result." static="true" type="double" visibility="public">
				<dev:params>
					<dev:param comment="String containing the character representation of the floating point number." name="value" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="atof" returncomment="A 32-bit floating point number representing the converted string. Any non-numeric characters in the string are ignored.          &lt;code&gt;atof&lt;/code&gt; returns the value representing the first complete set of characters that represents a floating point value.          Valid characters are &quot;0&quot; through &quot;9&quot; and &quot;.&quot; along with the sign designators (&quot;+&quot; and &quot;-&quot;) and the exponent (&quot;e&quot; or &quot;E&quot;). If          invalid characters are found, zero is returned as a result." static="true" type="float" visibility="public">
				<dev:params>
					<dev:param comment="String containing the character representation of the floating point number." name="value" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="ATOF" returncomment="float value contained in the string" static="true" type="float" visibility="public">
				<dev:params>
					<dev:param comment="- String containing a float value" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="atoi" returncomment="A 32-bit integer representing the converted string. Any non-numeric characters in the string are ignored. &lt;code&gt;atoi&lt;/code&gt;          returns the value representing the first complete set of characters that represent an integer. Valid characters are &quot;0&quot;          through &quot;9&quot; as well as a prepended &quot;-&quot; representing a negative sign. If invalid characters are found, zero is returned as a          result." static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="String containing the character representation of the integer" name="value" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="ATOI" returncomment="int value contained in the string" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="- String containing an int value" name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="atol" returncomment="A 64-bit long representing the converted string. Any non-numeric characters in the string are ignored. &lt;code&gt;atol&lt;/code&gt;          returns the value representing the first complete set of characters that represent a long. Valid characters are &quot;0&quot; through          &quot;9&quot; as well as a prepended &quot;-&quot; representing a negative sign. If invalid characters are found, zero is returned as a result." static="true" type="long" visibility="public">
				<dev:params>
					<dev:param comment="String containing the character representation of the long" name="value" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="btoi" returncomment="A character string that contains the representation of the specified boolean. If value is &lt;STRONG&gt;true&lt;/STRONG&gt;, a 1 will be          returned. Otherwise, 0 will be returned." static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="a boolean to convert to a int." name="value" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="btoi" returncomment="A character string that contains the representation of the specified boolean. If value is &lt;STRONG&gt;true&lt;/STRONG&gt;, a 1 will be          returned. Otherwise, 0 will be returned." static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="a string to convert to a int." name="value" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="btoa" returncomment="A character string that contains the representation of the specified boolean. If value is &lt;STRONG&gt;true&lt;/STRONG&gt;, &quot;true&quot; will          be returned. Otherwise, &quot;false&quot; will be returned." static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="a boolean to convert to a string." name="value" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="btoa" returncomment="A character string that contains the representation of the specified boolean. If value is &lt;STRONG&gt;true&lt;/STRONG&gt;, &quot;true&quot; will          be returned. Otherwise, &quot;false&quot; will be returned." static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="a string." name="value" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="dtoa" returncomment="A character string that contains the representation of the specified double value. The character representation will use          exponents if necessary." static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="a 64-bit floating-point number to convert to a string." name="value" type="double"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="ftoa" returncomment="A character string that contains the representation of the specified floating point number. The character representation will          use exponents if necessary." static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="a 32-bit floating-point number to convert to a string." name="value" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="isNumeric" returncomment="true if this is a numeric string; false otherwise." static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="String value to check." name="sValue" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="itoa" returncomment="A character string that contains the representation of the specified integer." static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="a 32-bit integer to convert to a string." name="value" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="ltoa" returncomment="A character string that contains the representation of the specified long." static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="a 64-bit long to convert to a string." name="value" type="long"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.text.HexUtil" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="HexUtil" visibility="public"></dev:constructor>
			<dev:method name="HEXTOA" returncomment="char" static="true" type="char" visibility="public">
				<dev:params>
					<dev:param comment="" name="cZa" type="byte"></dev:param>
					<dev:param comment="" name="cZb" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="hextoi" returncomment="An integer representing the converted string. Any non-hexadecimal characters in the string are ignored. hextoi returns a          value representing the first complete set of characters that represents an integer. Valid characters are &quot;0&quot; through &quot;9&quot;, &quot;A&quot;          through &quot;F&quot; and &quot;a&quot; through &quot;f&quot;. If no valid characters are found, zero is returned as a result." static="true" type="int" visibility="public">
				<dev:params>
					<dev:param name="hex" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="HEXTOI" returncomment="integer" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="[0x30..0x39,0x41..0x46]" name="cZa" type="byte"></dev:param>
					<dev:param comment="[0x30..0x39,0x41..0x46]" name="cZb" type="byte"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="HEXTOI" returncomment="integer" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param comment="[&apos;0&apos;..&apos;9&apos;,&apos;A&apos;..&apos;F&apos;]" name="cZa" type="char"></dev:param>
					<dev:param comment="[&apos;0&apos;..&apos;9&apos;,&apos;A&apos;..&apos;F&apos;]" name="cZb" type="char"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="itohex" returncomment="A character string that contains the hexadecimal representation of the specified integer." static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="integer to be converted to a hexadecimal string." name="value" type="int"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.text.DateFunctions" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="DateFunctions" visibility="public"></dev:constructor>
			<dev:method name="currentFormattedTime" static="true" type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="currentFormattedTimeAndMSecs" static="true" type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="extractDate" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="extractDateDay" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="extractDateDayofWeek" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="extractDateMonth" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="extractDateYear" static="true" type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="extractDateYear" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="extractDateYearMonth" static="true" type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="extractDateYearMonth" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="extractHour" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="extractMillisecond" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="extractMinute" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="extractSecond" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="formatDateTime" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
					<dev:param name="pattern" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="formatDateTime" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="pattern" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="millisecondsToString" returncomment="a &lt;code&gt;String&lt;/code&gt; representing the time in the format HH:mm:ss.SSS." static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the time in milliseconds." name="time" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="millisToLongDHMS" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="duration" type="long"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="nowDate" static="true" type="java.util.Date" visibility="public"></dev:method>
			<dev:method name="parseDate" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="parseDateDay" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="parseDateDayofWeek" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="parseDateMonth" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="parseDateTime" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
					<dev:param name="pattern" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="parseDateYear" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="parseDateYearMonth" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="parseHour" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="parseMillisecond" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="parseMinute" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="parseSecond" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param name="date" type="java.util.Date"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="secondsToString" returncomment="a &lt;code&gt;String&lt;/code&gt; representing the time in the format HH:mm:ss." static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="the time in seconds." name="time" type="long"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.text.CharSequenceUtils" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="CharSequenceUtils" visibility="public"></dev:constructor>
			<dev:method name="subSequence" returncomment="a new subsequence, may be null" static="true" type="java.lang.CharSequence" visibility="public">
				<dev:params>
					<dev:param comment="the specified subsequence, null returns null" name="cs" type="java.lang.CharSequence"></dev:param>
					<dev:param comment="the start index, inclusive, valid" name="start" type="int"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.text.ArrayUtils" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="ArrayUtils" visibility="public"></dev:constructor>
			<dev:method name="isEmpty" returncomment="{@code true} if the array is empty or {@code null}" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the array to test" name="array" type="boolean[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isEmpty" returncomment="{@code true} if the array is empty or {@code null}" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the array to test" name="array" type="byte[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isEmpty" returncomment="{@code true} if the array is empty or {@code null}" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the array to test" name="array" type="char[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isEmpty" returncomment="{@code true} if the array is empty or {@code null}" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the array to test" name="array" type="double[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isEmpty" returncomment="{@code true} if the array is empty or {@code null}" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the array to test" name="array" type="float[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isEmpty" returncomment="{@code true} if the array is empty or {@code null}" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the array to test" name="array" type="int[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isEmpty" returncomment="{@code true} if the array is empty or {@code null}" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the array to test" name="array" type="long[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isEmpty" returncomment="{@code true} if the array is empty or {@code null}" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the array to test" name="array" type="java.lang.Object[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isEmpty" returncomment="{@code true} if the array is empty or {@code null}" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the array to test" name="array" type="short[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isNotEmpty" returncomment="{@code true} if the array is not empty or not {@code null}" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the array to test" name="array" type="boolean[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isNotEmpty" returncomment="{@code true} if the array is not empty or not {@code null}" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the array to test" name="array" type="byte[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isNotEmpty" returncomment="{@code true} if the array is not empty or not {@code null}" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the array to test" name="array" type="char[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isNotEmpty" returncomment="{@code true} if the array is not empty or not {@code null}" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the array to test" name="array" type="double[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isNotEmpty" returncomment="{@code true} if the array is not empty or not {@code null}" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the array to test" name="array" type="float[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isNotEmpty" returncomment="{@code true} if the array is not empty or not {@code null}" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the array to test" name="array" type="int[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isNotEmpty" returncomment="{@code true} if the array is not empty or not {@code null}" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the array to test" name="array" type="long[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="isNotEmpty" returncomment="{@code true} if the array is not empty or not {@code null}" static="true" type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="the array to test" name="array" type="short[]"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.urlparser.URLEncoding" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="URLEncoding" visibility="public"></dev:constructor>
			<dev:method name="encodeURL" static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param name="url" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="encodeURL" static="true" type="java.lang.StringBuffer" visibility="public">
				<dev:params>
					<dev:param name="sb" type="java.lang.StringBuffer"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.common.util.urlparser.URLConnect_Listener"></dev:class>
	<dev:class name="com.amx.common.util.urlparser.URLConnect" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.lang.Runnable"></dev:extend>
		</dev:extends>
		<dev:fields></dev:fields>
		<dev:methods>
			<dev:constructor name="URLConnect" visibility="public">
				<dev:params>
					<dev:param name="responseTag" type="java.lang.String"></dev:param>
					<dev:param comment="" name="listener" type="com.amx.common.util.urlparser.URLConnect_Listener"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:constructor name="URLConnect" visibility="public">
				<dev:params>
					<dev:param comment="" name="listener" type="com.amx.common.util.urlparser.URLConnect_Listener"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="concatPostContent" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The m_postContent to set." name="content" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="dispose" type="void" visibility="public"></dev:method>
			<dev:method name="getContentEncoding" returncomment="" type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="getContentLength" returncomment="" type="int" visibility="public"></dev:method>
			<dev:method name="getContentType" returncomment="" type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="getHeaderField" returncomment="" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="" name="name" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getHeaderFields" returncomment="" type="java.util.Map" visibility="public"></dev:method>
			<dev:method name="getSpecialProperties" returncomment="" type="java.util.Properties" visibility="public"></dev:method>
			<dev:method name="isThreadRunning" returncomment="" type="boolean" visibility="public"></dev:method>
			<dev:method name="run" type="void" visibility="public"></dev:method>
			<dev:method name="setCompleteURL" type="void" visibility="public">
				<dev:params>
					<dev:param name="completeurl" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setHttpProxyAuthentication" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="authenticator" type="com.amx.common.util.urlparser.HttpProxyAuthenticator"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setPostContent" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The m_postContent to set." name="content" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setRequestMethod" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The m_requestMethod to set." name="method" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setRequestProperty" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="key" type="java.lang.String"></dev:param>
					<dev:param comment="" name="value" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setResponseTag" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The m_responseTag to set." name="tag" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setSpecialProperties" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="sProps" type="java.util.Properties"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setURLAddress" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The m_URLAddress to set." name="address" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setURLPath" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The m_URLPath to set." name="path" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setURLProtocol" type="void" visibility="public">
				<dev:params>
					<dev:param comment="The m_URLProtocol to set." name="protocol" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getM_content" type="java.lang.StringBuffer" visibility="public"></dev:method>
			<dev:method name="setM_content" type="void" visibility="public">
				<dev:params>
					<dev:param name="m_content" type="java.lang.StringBuffer"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.urlparser.TypeSafeEnumBasePrivate" superclass="java.lang.Object">
		<dev:fields>
			<dev:field final="true" fulltype="com.amx.common.util.urlparser.TypeSafeEnumBasePrivate" name="INVALID" static="true" type="TypeSafeEnumBasePrivate" visibility="public"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:method final="true" name="fromString" static="true" type="com.amx.common.util.urlparser.TypeSafeEnumBasePrivate" visibility="public">
				<dev:params>
					<dev:param name="data" type="java.lang.String"></dev:param>
					<dev:param name="VALUES" type="java.util.List"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="equals" type="boolean" visibility="public">
				<dev:params>
					<dev:param name="obj" type="java.lang.Object"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getName" returncomment="String" type="java.lang.String" visibility="public"></dev:method>
			<dev:method final="true" name="hashCode" type="int" visibility="public"></dev:method>
			<dev:method name="toString" type="java.lang.String" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.urlparser.HttpProxyAuthenticator" superclass="java.net.Authenticator">
		<dev:methods>
			<dev:constructor name="HttpProxyAuthenticator" visibility="public">
				<dev:params>
					<dev:param comment="" name="userName" type="java.lang.String"></dev:param>
					<dev:param comment="" name="password" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="isEnabled" returncomment="" type="boolean" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.urlparser.GetData" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="com.amx.common.util.urlparser.URLConnect_Listener"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor name="GetData" visibility="public"></dev:constructor>
			<dev:method name="getDataFromServer" type="java.io.InputStream" visibility="public">
				<dev:params>
					<dev:param name="url" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getError" type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="httpRequestComplete" type="void" visibility="public">
				<dev:params>
					<dev:param name="sender" type="com.amx.common.util.urlparser.URLConnect"></dev:param>
					<dev:param name="url" type="java.net.URL"></dev:param>
					<dev:param name="responseTag" type="java.lang.String"></dev:param>
					<dev:param name="httpResultCode" type="int"></dev:param>
					<dev:param name="inStream" type="java.io.InputStream"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="log" type="void" visibility="public">
				<dev:params>
					<dev:param name="debugLevel" type="int"></dev:param>
					<dev:param name="msg" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.urlparser.Base64" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="Base64" visibility="public"></dev:constructor>
			<dev:method final="true" name="decode" returncomment="The decoded array of bytes. May be of length 0. Will be &lt;code&gt;null&lt;/code&gt; if the legal characters (including &apos;=&apos;) isn&apos;t          divideable by 4. (I.e. definitely corrupted)." static="true" type="byte[]" visibility="public">
				<dev:params>
					<dev:param comment="The source array. Length 0 will return an empty array. &lt;code&gt;null&lt;/code&gt; will throw an exception." name="sArr" type="byte[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="decode" returncomment="The decoded array of bytes. May be of length 0. Will be &lt;code&gt;null&lt;/code&gt; if the legal characters (including &apos;=&apos;) isn&apos;t          divideable by 4. (I.e. definitely corrupted)." static="true" type="byte[]" visibility="public">
				<dev:params>
					<dev:param comment="The source array. &lt;code&gt;null&lt;/code&gt; or length 0 will return an empty array." name="sArr" type="char[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="decode" returncomment="The decoded array of bytes. May be of length 0. Will be &lt;code&gt;null&lt;/code&gt; if the legal characters (including &apos;=&apos;) isn&apos;t          divideable by 4. (I.e. definitely corrupted)." static="true" type="byte[]" visibility="public">
				<dev:params>
					<dev:param comment="The source string. &lt;code&gt;null&lt;/code&gt; or length 0 will return an empty array." name="str" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="decodeFast" returncomment="The decoded array of bytes. May be of length 0." static="true" type="byte[]" visibility="public">
				<dev:params>
					<dev:param comment="The source array. Length 0 will return an empty array. &lt;code&gt;null&lt;/code&gt; will throw an exception." name="sArr" type="byte[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="decodeFast" returncomment="The decoded array of bytes. May be of length 0." static="true" type="byte[]" visibility="public">
				<dev:params>
					<dev:param comment="The source array. Length 0 will return an empty array. &lt;code&gt;null&lt;/code&gt; will throw an exception." name="sArr" type="char[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="decodeFast" returncomment="The decoded array of bytes. May be of length 0." static="true" type="byte[]" visibility="public">
				<dev:params>
					<dev:param comment="The source string. Length 0 will return an empty array. &lt;code&gt;null&lt;/code&gt; will throw an exception." name="s" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="encodeToByte" returncomment="A BASE64 encoded array. Never &lt;code&gt;null&lt;/code&gt;." static="true" type="byte[]" visibility="public">
				<dev:params>
					<dev:param comment="The bytes to convert. If &lt;code&gt;null&lt;/code&gt; or length 0 an empty array will be returned." name="sArr" type="byte[]"></dev:param>
					<dev:param comment="Optional &quot;\r\n&quot; after 76 characters, unless end of file.&lt;br&gt;             No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a little faster." name="lineSep" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="encodeToChar" returncomment="A BASE64 encoded array. Never &lt;code&gt;null&lt;/code&gt;." static="true" type="char[]" visibility="public">
				<dev:params>
					<dev:param comment="The bytes to convert. If &lt;code&gt;null&lt;/code&gt; or length 0 an empty array will be returned." name="sArr" type="byte[]"></dev:param>
					<dev:param comment="Optional &quot;\r\n&quot; after 76 characters, unless end of file.&lt;br&gt;             No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a little faster." name="lineSep" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method final="true" name="encodeToString" returncomment="A BASE64 encoded array. Never &lt;code&gt;null&lt;/code&gt;." static="true" type="java.lang.String" visibility="public">
				<dev:params>
					<dev:param comment="The bytes to convert. If &lt;code&gt;null&lt;/code&gt; or length 0 an empty array will be returned." name="sArr" type="byte[]"></dev:param>
					<dev:param comment="Optional &quot;\r\n&quot; after 76 characters, unless end of file.&lt;br&gt;             No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a little faster." name="lineSep" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.urlparser.AmxCDATASectionUtility" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="AmxCDATASectionUtility" visibility="public"></dev:constructor>
			<dev:method name="getKDomNodeType" static="true" type="int" visibility="public">
				<dev:params>
					<dev:param name="content" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.common.util.weatherconversion.WeatherConversions" superclass="java.lang.Object">
		<dev:methods>
			<dev:constructor name="WeatherConversions" visibility="public"></dev:constructor>
			<dev:method name="kilopascalsTommHg" static="true" type="float" visibility="public">
				<dev:params>
					<dev:param name="value" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="kilopascalsToinHg" static="true" type="float" visibility="public">
				<dev:params>
					<dev:param name="value" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="celiusToFahrenheit" static="true" type="float" visibility="public">
				<dev:params>
					<dev:param name="value" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="fahrenheitToCelius" static="true" type="float" visibility="public">
				<dev:params>
					<dev:param name="value" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="metersSecondToMPH" static="true" type="float" visibility="public">
				<dev:params>
					<dev:param name="value" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="metersSecondToKPH" static="true" type="float" visibility="public">
				<dev:params>
					<dev:param name="value" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="millimetersToInches" static="true" type="float" visibility="public">
				<dev:params>
					<dev:param name="value" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="inchesToMillimeters" static="true" type="float" visibility="public">
				<dev:params>
					<dev:param name="value" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="wattsPerMeterSquaredToBTUPerSquareFeet" static="true" type="float" visibility="public">
				<dev:params>
					<dev:param name="value" type="float"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="btuPerSquareFeetToWattsPerMeterSquared" static="true" type="float" visibility="public">
				<dev:params>
					<dev:param name="value" type="float"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class abstract="true" name="com.amx.rpmutility.dr1_0_0.ICmdProcess"></dev:class>
	<dev:class name="com.amx.rpmutility.dr1_0_0.BaseFunctions" superclass="java.lang.Object">
		<dev:fields>
			<dev:field fulltype="com.amx.rpmutility.dr1_0_0.ICmdProcess" name="callBack" type="ICmdProcess" visibility="public"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor name="BaseFunctions" visibility="public">
				<dev:params>
					<dev:param name="caller" type="com.amx.rpmutility.dr1_0_0.ICmdProcess"></dev:param>
				</dev:params>
			</dev:constructor>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.rpmutility.dr1_0_0.Activator" superclass="com.amx.duet.devicesdk.base.ModuleActivator"></dev:class>
	<dev:class name="com.amx.rpmutility.dr1_0_0.monitoring.PollingManager" superclass="com.amx.rpmutility.dr1_0_0.BaseFunctions">
		<dev:fields>
			<dev:field final="true" fulltype="java.lang.Integer" name="DEFAULT_POLL_TIME" static="true" type="Integer" visibility="public"></dev:field>
			<dev:field const="Poll_Time" constexpr="&quot;Poll_Time&quot;" final="true" fulltype="java.lang.String" name="POLL_TIME" static="true" type="String" visibility="public"></dev:field>
			<dev:field final="true" fulltype="java.lang.Integer" name="POLL_TIME_MIN" static="true" type="Integer" visibility="public"></dev:field>
			<dev:field final="true" fulltype="java.lang.Integer" name="POLL_TIME_MAX" static="true" type="Integer" visibility="public"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor name="PollingManager" visibility="public">
				<dev:params>
					<dev:param name="caller" type="com.amx.rpmutility.dr1_0_0.ICmdProcess"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="dispose" type="void" visibility="public"></dev:method>
			<dev:method name="stopPolling" type="void" visibility="public"></dev:method>
			<dev:method name="startPolling" type="void" visibility="public">
				<dev:params>
					<dev:param name="startNow" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="pollNow" type="void" visibility="public"></dev:method>
			<dev:method name="updatePollTime" type="void" visibility="public">
				<dev:params>
					<dev:param name="value" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getPollTime" type="int" visibility="public"></dev:method>
			<dev:method name="isPolling" returncomment="the _isPolling" type="boolean" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.rpmutility.dr1_0_0.xml.Rpmstats" serializable="true" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.io.Serializable"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor name="Rpmstats" visibility="public"></dev:constructor>
			<dev:method name="getKeyvaluepairs" returncomment="the value of field &apos;Keyvaluepairs&apos;." type="com.amx.rpmutility.dr1_0_0.xml.Keyvaluepairs" visibility="public"></dev:method>
			<dev:method name="getMacaddress" returncomment="the value of field &apos;Macaddress&apos;." type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="getProjectid" returncomment="the value of field &apos;Projectid&apos;." type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="getSerialnumber" returncomment="the value of field &apos;Serialnumber&apos;." type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="setKeyvaluepairs" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the value of field &apos;keyvaluepairs&apos;." name="keyvaluepairs" type="com.amx.rpmutility.dr1_0_0.xml.Keyvaluepairs"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setMacaddress" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the value of field &apos;macaddress&apos;." name="macaddress" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setProjectid" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the value of field &apos;projectid&apos;." name="projectid" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setSerialnumber" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the value of field &apos;serialnumber&apos;." name="serialnumber" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="loadXml" type="void" visibility="public">
				<dev:params>
					<dev:param name="domElement" type="org.kxml2.kdom.Element"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="saveXml" type="void" visibility="public">
				<dev:params>
					<dev:param name="domElement" type="org.kxml2.kdom.Element"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="readXml" type="void" visibility="public">
				<dev:params>
					<dev:param name="reader" type="java.io.Reader"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="writeXml" type="void" visibility="public">
				<dev:params>
					<dev:param name="writer" type="java.io.Writer"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.rpmutility.dr1_0_0.xml.Kvp" serializable="true" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.io.Serializable"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor name="Kvp" visibility="public"></dev:constructor>
			<dev:constructor name="Kvp" visibility="public">
				<dev:params>
					<dev:param name="keyname" type="java.lang.String"></dev:param>
					<dev:param name="val" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="getKeyname" returncomment="the value of field &apos;Keyname&apos;." type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="getVal" returncomment="the value of field &apos;Val&apos;." type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="setKeyname" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the value of field &apos;keyname&apos;." name="keyname" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setVal" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the value of field &apos;val&apos;." name="val" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="loadXml" type="void" visibility="public">
				<dev:params>
					<dev:param name="domElement" type="org.kxml2.kdom.Element"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="saveXml" type="void" visibility="public">
				<dev:params>
					<dev:param name="domElement" type="org.kxml2.kdom.Element"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.rpmutility.dr1_0_0.xml.Keyvaluepairs" serializable="true" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.io.Serializable"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor name="Keyvaluepairs" visibility="public"></dev:constructor>
			<dev:method name="addKvp" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="vKvp" type="com.amx.rpmutility.dr1_0_0.xml.Kvp"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="addKvp" type="void" visibility="public">
				<dev:params>
					<dev:param name="keyname" type="java.lang.String"></dev:param>
					<dev:param name="val" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="addKvp" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="index" type="int"></dev:param>
					<dev:param comment="" name="vKvp" type="com.amx.rpmutility.dr1_0_0.xml.Kvp"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="enumerateKvp" returncomment="an Enumeration over all possible elements of this collection" type="java.util.Enumeration" visibility="public"></dev:method>
			<dev:method name="getKvp" returncomment="the value of the com.amx.rpmutility.dr1_0_0.xml.Kvp at the given index" type="com.amx.rpmutility.dr1_0_0.xml.Kvp" visibility="public">
				<dev:params>
					<dev:param comment="" name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getKvp" returncomment="this collection as an Array" type="com.amx.rpmutility.dr1_0_0.xml.Kvp[]" visibility="public"></dev:method>
			<dev:method name="getKvpCount" returncomment="the size of this collection" type="int" visibility="public"></dev:method>
			<dev:method name="iterateKvp" returncomment="an Iterator over all possible elements in this collection" type="java.util.Iterator" visibility="public"></dev:method>
			<dev:method name="removeAllKvp" type="void" visibility="public"></dev:method>
			<dev:method name="removeKvp" returncomment="true if the object was removed from the collection." type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="" name="vKvp" type="com.amx.rpmutility.dr1_0_0.xml.Kvp"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="removeKvpAt" returncomment="the element removed from the collection" type="com.amx.rpmutility.dr1_0_0.xml.Kvp" visibility="public">
				<dev:params>
					<dev:param comment="" name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setKvp" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="index" type="int"></dev:param>
					<dev:param comment="" name="vKvp" type="com.amx.rpmutility.dr1_0_0.xml.Kvp"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setKvp" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="vKvpArray" type="com.amx.rpmutility.dr1_0_0.xml.Kvp[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="loadXml" type="void" visibility="public">
				<dev:params>
					<dev:param name="domElement" type="org.kxml2.kdom.Element"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="saveXml" type="void" visibility="public">
				<dev:params>
					<dev:param name="domElement" type="org.kxml2.kdom.Element"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.rpmutility.dr1_0_0.monitoring.PollingManager" superclass="com.amx.rpmutility.dr1_0_0.BaseFunctions">
		<dev:fields>
			<dev:field final="true" fulltype="java.lang.Integer" name="DEFAULT_POLL_TIME" static="true" type="Integer" visibility="public"></dev:field>
			<dev:field const="Poll_Time" constexpr="&quot;Poll_Time&quot;" final="true" fulltype="java.lang.String" name="POLL_TIME" static="true" type="String" visibility="public"></dev:field>
			<dev:field final="true" fulltype="java.lang.Integer" name="POLL_TIME_MIN" static="true" type="Integer" visibility="public"></dev:field>
			<dev:field final="true" fulltype="java.lang.Integer" name="POLL_TIME_MAX" static="true" type="Integer" visibility="public"></dev:field>
		</dev:fields>
		<dev:methods>
			<dev:constructor name="PollingManager" visibility="public">
				<dev:params>
					<dev:param name="caller" type="com.amx.rpmutility.dr1_0_0.ICmdProcess"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="dispose" type="void" visibility="public"></dev:method>
			<dev:method name="stopPolling" type="void" visibility="public"></dev:method>
			<dev:method name="startPolling" type="void" visibility="public">
				<dev:params>
					<dev:param name="startNow" type="boolean"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="pollNow" type="void" visibility="public"></dev:method>
			<dev:method name="updatePollTime" type="void" visibility="public">
				<dev:params>
					<dev:param name="value" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getPollTime" type="int" visibility="public"></dev:method>
			<dev:method name="isPolling" returncomment="the _isPolling" type="boolean" visibility="public"></dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.rpmutility.dr1_0_0.xml.Rpmstats" serializable="true" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.io.Serializable"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor name="Rpmstats" visibility="public"></dev:constructor>
			<dev:method name="getKeyvaluepairs" returncomment="the value of field &apos;Keyvaluepairs&apos;." type="com.amx.rpmutility.dr1_0_0.xml.Keyvaluepairs" visibility="public"></dev:method>
			<dev:method name="getMacaddress" returncomment="the value of field &apos;Macaddress&apos;." type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="getProjectid" returncomment="the value of field &apos;Projectid&apos;." type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="getSerialnumber" returncomment="the value of field &apos;Serialnumber&apos;." type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="setKeyvaluepairs" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the value of field &apos;keyvaluepairs&apos;." name="keyvaluepairs" type="com.amx.rpmutility.dr1_0_0.xml.Keyvaluepairs"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setMacaddress" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the value of field &apos;macaddress&apos;." name="macaddress" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setProjectid" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the value of field &apos;projectid&apos;." name="projectid" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setSerialnumber" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the value of field &apos;serialnumber&apos;." name="serialnumber" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="loadXml" type="void" visibility="public">
				<dev:params>
					<dev:param name="domElement" type="org.kxml2.kdom.Element"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="saveXml" type="void" visibility="public">
				<dev:params>
					<dev:param name="domElement" type="org.kxml2.kdom.Element"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="readXml" type="void" visibility="public">
				<dev:params>
					<dev:param name="reader" type="java.io.Reader"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="writeXml" type="void" visibility="public">
				<dev:params>
					<dev:param name="writer" type="java.io.Writer"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.rpmutility.dr1_0_0.xml.Kvp" serializable="true" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.io.Serializable"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor name="Kvp" visibility="public"></dev:constructor>
			<dev:constructor name="Kvp" visibility="public">
				<dev:params>
					<dev:param name="keyname" type="java.lang.String"></dev:param>
					<dev:param name="val" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:constructor>
			<dev:method name="getKeyname" returncomment="the value of field &apos;Keyname&apos;." type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="getVal" returncomment="the value of field &apos;Val&apos;." type="java.lang.String" visibility="public"></dev:method>
			<dev:method name="setKeyname" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the value of field &apos;keyname&apos;." name="keyname" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setVal" type="void" visibility="public">
				<dev:params>
					<dev:param comment="the value of field &apos;val&apos;." name="val" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="loadXml" type="void" visibility="public">
				<dev:params>
					<dev:param name="domElement" type="org.kxml2.kdom.Element"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="saveXml" type="void" visibility="public">
				<dev:params>
					<dev:param name="domElement" type="org.kxml2.kdom.Element"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	<dev:class name="com.amx.rpmutility.dr1_0_0.xml.Keyvaluepairs" serializable="true" superclass="java.lang.Object">
		<dev:extends>
			<dev:extend name="java.io.Serializable"></dev:extend>
		</dev:extends>
		<dev:methods>
			<dev:constructor name="Keyvaluepairs" visibility="public"></dev:constructor>
			<dev:method name="addKvp" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="vKvp" type="com.amx.rpmutility.dr1_0_0.xml.Kvp"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="addKvp" type="void" visibility="public">
				<dev:params>
					<dev:param name="keyname" type="java.lang.String"></dev:param>
					<dev:param name="val" type="java.lang.String"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="addKvp" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="index" type="int"></dev:param>
					<dev:param comment="" name="vKvp" type="com.amx.rpmutility.dr1_0_0.xml.Kvp"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="enumerateKvp" returncomment="an Enumeration over all possible elements of this collection" type="java.util.Enumeration" visibility="public"></dev:method>
			<dev:method name="getKvp" returncomment="the value of the com.amx.rpmutility.dr1_0_0.xml.Kvp at the given index" type="com.amx.rpmutility.dr1_0_0.xml.Kvp" visibility="public">
				<dev:params>
					<dev:param comment="" name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="getKvp" returncomment="this collection as an Array" type="com.amx.rpmutility.dr1_0_0.xml.Kvp[]" visibility="public"></dev:method>
			<dev:method name="getKvpCount" returncomment="the size of this collection" type="int" visibility="public"></dev:method>
			<dev:method name="iterateKvp" returncomment="an Iterator over all possible elements in this collection" type="java.util.Iterator" visibility="public"></dev:method>
			<dev:method name="removeAllKvp" type="void" visibility="public"></dev:method>
			<dev:method name="removeKvp" returncomment="true if the object was removed from the collection." type="boolean" visibility="public">
				<dev:params>
					<dev:param comment="" name="vKvp" type="com.amx.rpmutility.dr1_0_0.xml.Kvp"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="removeKvpAt" returncomment="the element removed from the collection" type="com.amx.rpmutility.dr1_0_0.xml.Kvp" visibility="public">
				<dev:params>
					<dev:param comment="" name="index" type="int"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setKvp" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="index" type="int"></dev:param>
					<dev:param comment="" name="vKvp" type="com.amx.rpmutility.dr1_0_0.xml.Kvp"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="setKvp" type="void" visibility="public">
				<dev:params>
					<dev:param comment="" name="vKvpArray" type="com.amx.rpmutility.dr1_0_0.xml.Kvp[]"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="loadXml" type="void" visibility="public">
				<dev:params>
					<dev:param name="domElement" type="org.kxml2.kdom.Element"></dev:param>
				</dev:params>
			</dev:method>
			<dev:method name="saveXml" type="void" visibility="public">
				<dev:params>
					<dev:param name="domElement" type="org.kxml2.kdom.Element"></dev:param>
				</dev:params>
			</dev:method>
		</dev:methods>
	</dev:class>
	</dev:type-info>
	&components;
</dev:module>