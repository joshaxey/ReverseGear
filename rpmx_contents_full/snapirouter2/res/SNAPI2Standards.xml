<?xml version="1.0" encoding="utf-8"?>
<SNAPI2Standards>
	<Component id="Global">
		<Constant id="NAME">name</Constant>
		<Constant id="KEY">key</Constant>
		<Constant id="INDEX">index</Constant>
		<Constant id="VALUE">value</Constant>
		<Constant id="ARGS">args</Constant>
		<Constant id="DASH">dash</Constant>
		<Constant id="LEFT">left</Constant>
		<Constant id="RIGHT">right</Constant>
		<Constant id="NAMEDASHARGSFRAGMENTSTRING">({name}[^-]+)-({args}.+)</Constant>
		<Constant id="NAMEDASHKEYORINDEXFRAGMENTSTRING">({name}[^-]+)(({dash}-)({key}\\w+)?)?</Constant>
		<Constant id="KEYVALUEFRAGMENTSTRING">(;?({key}[^,]+),({value}[^;]+))</Constant>
		<Constant id="CSVFRAGMENTSTRING">[^,]+</Constant>
		<Constant id="EQUALSSEPARATEDPAIRSTRING">({left}[^=]+)=({right}.+)</Constant>
		<Pattern id="NAMEDASHARGSFRAGMENTPATTERN">NAMEDASHARGSFRAGMENTSTRING</Pattern>
		<Pattern id="NAMEDASHKEYORINDEXFRAGMENTPATTERN">NAMEDASHKEYORINDEXFRAGMENTSTRING</Pattern>
		<Pattern id="KEYVALUEFRAGMENTPATTERN">KEYVALUEFRAGMENTSTRING</Pattern>
		<Pattern id="CSVFRAGMENTPATTERN">CSVFRAGMENTSTRING</Pattern>
		<Pattern id="EQUALSSEPARATEDPAIRPATTERN">EQUALSSEPARATEDPAIRSTRING</Pattern>
		<MessageFormat id="LISTRESPONSEFORMAT"><![CDATA["{0}-{1},{2},{3},{4}"]]>
		</MessageFormat>
		<MessageFormat id="LISTSIZERESPONSEFORMAT"><![CDATA["LISTSIZE-{0},{1}"]]>
		</MessageFormat>
		<MessageFormat id="PROPERTYRESPONSEFORMAT"><![CDATA["PROPERTY-{0},{1}"]]>
		</MessageFormat>
		<MessageFormat id="PROPERTYLISTRESPONSEFORMAT"><![CDATA["{0},{1},{2}"]]>
		</MessageFormat>
		<Set id="GLOBALCOMMANDS">
			<item>SNAPI2Standards.GETLIST_CM</item>
			<item>SNAPI2Standards.GETLISTSIZE_CM</item>
			<item>SNAPI2Standards.GETLISTSELECT_CM</item>
			<item>SNAPI2Standards.LISTSELECT</item>
			<item>SNAPI2Standards.LISTNEXT</item>
			<item>SNAPI2Standards.LISTPREV</item>
			<item>SNAPI2Standards.GETPROPERTY_CM</item>
		</Set>
	</Component>
	<Component id="AudioConferencer">
		<Channel
			id="ACONF_PRIVACY"
			type="Momentary">
			<Chan>145</Chan>
			<OnAPI>cyclePrivacy()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle privacy when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="ACONF_PRIVACY_ON"
			type="Discrete">
			<Chan>146</Chan>
			<OnAPI>setPrivacyOn()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Privacy is on while channel is active
			</Notes>
		</Channel>
		<Channel
			id="ACONF_TRAIN"
			type="Momentary">
			<Chan>147</Chan>
			<OnAPI>train()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Train is executed when the channel is activated
			</Notes>
		</Channel>
		<Channel
			id="ACONF_PRIVACY_FB"
			type="Feedback">
			<Chan>146</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Channel: Privacy is muted if channel is on.</Notes>
		</Channel>
		
	</Component>
	<Component id="AudioMixer">
		<Command id="GETXPOINT_CM">
			<Cmd>?XPOINT</Cmd>
			<API>getAudioMixerCrosspoint(input,output)</API>
			<Notes>
			?XPOINT-&lt;input&gt;,&lt;output&gt; -
			Query for Audio Mixer Crosspoint.
			Responds with:
			XPOINT-&lt;value&gt;,&lt;input&gt;,&lt;output&gt; 
			Where:
			&lt;value&gt; is 0 to 255.
			&lt;input&gt; is 1 to the maximum supported input.
			&lt;output&gt; is 1 to the maximum supported output (see specific module documentation)
			</Notes>
			<CmdResponse>XPOINT</CmdResponse>
		</Command>
		<Command id="GETXPOINTMUTE_CM">
			<Cmd>?XPOINTMUTE</Cmd>
			<API>isAudioMixerCrosspointMuteOn(input,output)</API>
			<Notes>
			?XPOINTMUTE -
			Query for Audio Mixer Crosspoint Mute, 
			Responds with:
			XPOINTMUTE-&lt; state&gt;,&lt;input&gt;,&lt;output&gt; 
			Where:
			&lt;state&gt; is 0 (un-muted) or 1 (muted).
			&lt;input&gt; is 1 to the maximum supported input.
			&lt;output&gt; is 1 to the maximum supported output (see specific module documentation)
			</Notes>
			<CmdResponse>XPOINTMUTE</CmdResponse>
		</Command>
		<Command id="SETXPOINT_CM">
			<Cmd>XPOINT</Cmd>
			<API>setAudioMixerCrosspoint(input,output[],value)</API>
			<Notes>XPOINT-&lt;value&gt;,&lt;input&gt;,&lt;output,...&gt; -
				Set Audio Mixer Crosspoint for &lt;input&gt; to one or more &lt;outputs&gt;
				Where:
				&lt;value&gt; is 0 to 255. &lt;input&gt; is 1 to the maximum
				supported input and &lt;output&gt; is 1 to the maximum supported
				output (see specific module documentation)			
			</Notes>
		</Command>
		<Command id="SETXPOINTMUTE_CM">
			<Cmd>XPOINTMUTE</Cmd>
			<API>setAudioMixerCrosspointMuteOn(input,output,state)</API>
			<Notes>XPOINTMUTE-&lt;state&gt;,&lt;input&gt;,&lt;output&gt; -
				Set Audio Mixer Crosspoint Mute for &lt;input&gt; and &lt;output&gt; 
				Where: 
				&lt;state&gt; is 0 (un-muted) or 1 (muted). &lt;input&gt; is 1 to the
				maximum supported input and &lt;output&gt; is 1 to the maximum
				supported output (see specific module documentation)		
			</Notes>
		</Command>
		<Event id="">
			<Evt>AUDIOMIXER_XPOINT_EVENT</Evt>
			<Notes>XPOINT-&lt;value&gt;,&lt;input&gt;,&lt;output&gt; - 
			Audio Mixer Crosspoint changed for &lt;input&gt; to one or more
			&lt;output&gt;s
			Where:
			&lt;value&gt; is 0 to 255. 
			&lt;input&gt; is 1 to the maximum supported input.
			&lt;output&gt; is 1 to the maximum supported output (see specific module documentation)
			</Notes>
			<EventResponse resp="XPOINT">
				<Parameters>
					<Parameter
						type="int"
						description="value - Crosspoint, 0 to 255." />
					<Parameter
						type="int"
						description="input - Input, 1 to the maximum supported input" />
					<Parameter
						type="int"
						description="output - Output, 1 to the maximum supported output" />				
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>AUDIOMIXER_XPOINTMUTE_EVENT</Evt>
			<Notes>XPOINTMUTE-&lt;state&gt;,&lt;input&gt;,&lt;output&gt; -
			Audio Mixer Crosspoint Mute changed for &lt;input&gt; and &lt;output&gt;
			Where:
			&lt;state&gt; is 0 (un-muted) or 1 (muted).
			&lt;input&gt; is 1 to the maximum supported input and &lt;output&gt; is 1 to the maximum
			supported output (see specific module documentation).
			</Notes>
			<EventResponse resp="XPOINTMUTE">
				<Parameters>
					<Parameter
						type="int"
						description="state - 0 (un-muted) or 1 (muted)" />
					<Parameter
						type="int"
						description="input - Input, 1 to the maximum supported input" />
					<Parameter
						type="int"
						description="output - Output, 1 to the maximum supported output"  />				
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="AudioProcessor">
		<Channel
			id="AUDIOPROC_LEVEL_UP"
			type="Ramping">
			<Chan>24</Chan>
			<OffAPI></OffAPI>
			<Notes>Ramping Function: Audio Processor level is incremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="AUDIOPROC_LEVEL_DN"
			type="Ramping">
			<Chan>25</Chan>
			<OffAPI></OffAPI>
			<Notes>Ramping Function: Audio Processor level is decremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="AUDIOPROC_STATE"
			type="Momentary">
			<Chan>26</Chan>
			<OnAPI>cycleAudioProcessorState()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle Audio Processor state when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="AUDIOPROC_STATE_ON"
			type="Discrete">
			<Chan>199</Chan>
			<OnAPI>setAudioProcessorStateOn(true)</OnAPI>
			<OffAPI>setAudioProcessorStateOn(false)</OffAPI>
			<Notes>Discrete Function: Audio Processor state is on while channel is active
			</Notes>
		</Channel>
		<Level id="AUDIOPROC_LVL">
			<Lvl>1</Lvl>
			<API>setAudioProcessorLevel()</API>
			<Notes>Set Audio Processor level</Notes>
			<Range dataType="integer">
				<Max>255</Max>
				<Min>0</Min>
			</Range>
		</Level>
		<Command id="GETAUDIOPROCADDR_CM">
			<Cmd>?AUDIOPROCADDR</Cmd>
			<API>getAudioProcessorAddress()</API>
			<Notes>
			?AUDIOPROCADDR-&lt;index&gt; -
			Query for the index of the Audio Processor object with address &lt;address&gt;. 
			Responds with:
			AUDIOPROCADDR-&lt;index&gt;,&lt;address&gt;			
			</Notes>
			<CmdResponse>AUDIOPROCADDR</CmdResponse>
		</Command>
		<Command id="GETAUDIOPROCIDX_CM">
			<Cmd>?AUDIOPROCIDX</Cmd>
			<Notes>
			?AUDIOPROCIDX-&lt;address&gt; -
			Query for the index of the Audio Processor object with address &lt;address&gt;.
			Responds with:
			AUDIOPROCIDX-&lt;index&gt;,&lt;address&gt;
			</Notes>
			<CmdResponse>AUDIOPROCIDX</CmdResponse>
		</Command>
		<Command id="GETINPUT_CM">
			<Cmd>?INPUT</Cmd>
			<API>getAudioProcessorInput()</API>
			<Notes>
			?INPUT -
			Query for the input connected to an output.
			 Responds with
			 SWITCHL&lt;sl&gt;I&lt;input&gt;O&lt;output&gt;
			 Where:
			 &lt;sl&gt; is AUDIO and &lt;input&gt; is 0 if there is no connection
			 </Notes>
			<CmdResponse>SWITCH</CmdResponse>
		</Command>
		<Command id="GETOUTPUT_CM">
			<Cmd>?OUTPUT</Cmd>
			<API>getAudioProcessorOutput()</API>
			<Notes>
			?OUTPUT -
			Query for the outputs connected to an input.
			Responds with:
			SWITCHL&lt;sl&gt;I&lt;input&gt;O&lt;output&gt;
			Where:
			&lt;sl&gt; is AUDIO and &lt;input&gt; is 0 if there is no connection</Notes>
			<CmdResponse>SWITCH</CmdResponse>
		</Command>
		<Command id="GETXPOINT_CM">
			<Cmd>?XPOINT</Cmd>
			<API>getAudioProcessorCrosspoint()</API>
			<Notes>
			?XPOINT - Query for Audio Processo.
			Responds with:
			XPOINT-&lt;value&gt;,&lt;input&gt;,&lt;output&gt;
			Where:
			&lt;value&gt; is 0 to 255.
			&lt;input&gt; is 1 to the maximum supported input.
			&lt;output&gt; is 1 to the maximum supported output
			</Notes>
			<CmdResponse>XPOINT</CmdResponse>
		</Command>
		<Command id="GETXPOINTMUTE_CM">
			<Cmd>?XPOINTMUTE</Cmd>
			<API>isAudioMixerCrosspointMuteOn(input,output)</API>
			<Notes>
			?XPOINTMUTE -
			Query for Audio Mixer Crosspoint Mute, 
			Responds with:
			XPOINTMUTE-&lt; state&gt;,&lt;input&gt;,&lt;output&gt; 
			Where:
			&lt;state&gt; is 0 (un-muted) or 1 (muted).
			&lt;input&gt; is 1 to the maximum supported input.
			&lt;output&gt; is 1 to the maximum supported output (see specific module documentation)
			</Notes>
			<CmdResponse>XPOINTMUTE</CmdResponse>
		</Command>
		<Command id="SETXPOINT_CM">
			<Cmd>XPOINT</Cmd>
			<API>setAudioMixerCrosspoint(input,output[],value)</API>
			<Notes>
			XPOINT-&lt;value&gt;,&lt;input&gt;,&lt;output,...&gt; -
				Set Audio Mixer Crosspoint for &lt;input&gt; to one or more &lt;outputs&gt;
				Where:
				&lt;value&gt; is 0 to 255. &lt;input&gt; is 1 to the maximum
				supported input and &lt;output&gt; is 1 to the maximum supported
				output (see specific module documentation)			
			</Notes>
		</Command>
		<Command id="SETXPOINTMUTE_CM">
			<Cmd>XPOINTMUTE</Cmd>
			<API>setAudioMixerCrosspointMuteOn(input,output,state)</API>
			<Notes>
			XPOINTMUTE-&lt;state&gt;,&lt;input&gt;,&lt;output&gt; -
				Set Audio Mixer Crosspoint Mute for &lt;input&gt; and &lt;output&gt; 
				Where:
				&lt;state&gt; is 0 (un-muted) or 1 (muted). &lt;input&gt; is 1 to the
				maximum supported input and &lt;output&gt; is 1 to the maximum
				supported output (see specific module documentation)		
			</Notes>
		</Command>
		<Command id="SWITCHAUDIOINPUTOUTPUT_CM">
			<Cmd>A</Cmd>
			<API>switchAudioProcessorInputToOutput(input,output[])</API>
			<Notes>
			AI&lt;input&gt;O&lt;output,...&gt; -
				Switch &lt;input&gt; to one or more &lt;outputs&gt;  for switch level Audio. Use &lt;input&gt; 0 for disconnect.
			</Notes>
		</Command>
		<Event id="">
			<Evt>AUDIOPROCESSOR_XPOINT_EVENT</Evt>
			<Notes>
			XPOINT-&lt;value&gt;,&lt;input&gt;,&lt;output&gt; - 
			Audio Processor Crosspoint changed for &lt;input&gt; to one or more
			&lt;output&gt;s
			Where: 
			&lt;value&gt; is 0 to 255. &lt;input&gt; is 1 to the maximum supported input
			&lt;output&gt; is 1 to the maximum supported output (see specific module documentation)</Notes>
			<EventResponse resp="XPOINT">
				<Parameters>
					<Parameter
						type="int"
						description="value - Crosspoint, 0 to 255." />
					<Parameter
						type="int"
						description="input - Input, 1 to the maximum supported input" />
					<Parameter
						type="int"
						description="output - Output, 1 to the maximum supported output" />				
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>AUDIOPROCESSOR_XPOINTMUTE_EVENT</Evt>
			<Notes>
			XPOINTMUTE-&lt;state&gt;,&lt;input&gt;,&lt;output&gt; -
			Audio Processor Crosspoint Mute changed for &lt;input&gt; and &lt;output&gt;
			Where: 
			&lt;state&gt; is 0 (un-muted) or 1 (muted). &lt;input&gt; is 1 to the
			maximum supported input
			&lt;output&gt; is 1 to the maximum supported output (see specific module documentation)
			</Notes>
			<EventResponse resp="XPOINTMUTE">
				<Parameters>
					<Parameter
						type="int"
						description="state - 0 (un-muted) or 1 (muted)" />
					<Parameter
						type="int"
						description="input - Input, 1 to the maximum supported input" />
					<Parameter
						type="int"
						description="output - Output, 1 to the maximum supported output"  />				
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>AUDIOPROCESSOR_INPUTOUTPUT_EVENT</Evt>
			<Notes>
			SWITCH-L&lt;sl&gt;I&lt;input&gt;O&lt;output&gt; -
			Audio Processor switch connections changed.
			Where:
			&lt;sl&gt; is AUDIO and &lt;input&gt; is 0 if there is no connection.</Notes>
			<EventResponse resp="SWITCH">
				<Parameters>
					<Parameter
						type="String"
						description="AUDIO - indicates the connection is an audio connection" />
					<Parameter
						type="int"
						description="input - Input, 1 to the maximum supported input, o if there is no connection" />
					<Parameter
						type="int"
						description="output - Output, 1 to the maximum supported output"  />				
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="Camera">
		<Channel
			id="CAM_PRESET"
			type="Momentary">
			<Chan>177</Chan>
			<OnAPI>cycleCameraPreset()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle camera preset when channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="PAN_LT"
			type="Ramping">
			<Chan>134</Chan>
			<OnAPI>setPanRamp(LEFT)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Ramping Function: Pan is ramped left when channel is active.
			</Notes>
		</Channel>
		<Channel
			id="PAN_RT"
			type="Ramping">
			<Chan>135</Chan>
			<OnAPI>setPanRamp(RIGHT)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Ramping Function: Pan is ramped right when channel is active.
			</Notes>
		</Channel>
		<Channel
			id="TILT_DN"
			type="Ramping">
			<Chan>133</Chan>
			<OnAPI>setTiltRamp(DOWN)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Ramping Function: Tilt is ramped down when channel is active.
			</Notes>
		</Channel>
		<Channel
			id="TILT_UP"
			type="Ramping">
			<Chan>132</Chan>
			<OnAPI>setTiltRamp(UP)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Ramping Function: Tilt is ramped up when channel is active.
			</Notes>
		</Channel>
		<Level id="PAN_LVL">
			<Lvl>27</Lvl>
			<API>setPan(pan)</API>
			<Notes>Set pan position, range is 0-255 (0=left).</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="PAN_LVL_FB">
			<Lvl>27</Lvl>
			<Notes>Feedback level indicating pan position change.</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="PAN_SPEED_LVL">
			<Lvl>29</Lvl>
			<API>setPanSpeed(speed)</API>
			<Notes>Set pan speed, range is 0-255 (0=slow).</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="PAN_SPEED_LVL_FB">
			<Lvl>29</Lvl>
			<Notes>Feedback level indicating pan speed change</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="TILT_LVL">
			<Lvl>28</Lvl>
			<API>setTilt(tilt)</API>
			<Notes>Set tilt position, range is 0-255 (0=down).</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="TILT_LVL_FB">
			<Lvl>28</Lvl>
			<Notes>Feedback level indicating tilt position changed.</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="TILT_SPEED_LVL">
			<Lvl>30</Lvl>
			<API>setTiltSpeed(speed)</API>
			<Notes>Set tilt speed, range is 0-255 (0=slow).</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="TILT_SPEED_LVL_FB">
			<Lvl>30</Lvl>
			<Notes>Feedback level indicating tilt speed changed.</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Command id="CAMERAPRESETSAVE_CM">
			<Cmd>CAMERAPRESETSAVE</Cmd>
			<API>saveCameraPreset(preset)</API>
			<Notes>
			CAMERAPRESETSAVE-&lt;preset&gt; - 
			Save Camera Preset.
			Where:
			&lt;preset&gt; is 1 to x and x is the maximum supported preset. 
			</Notes>
		</Command>
		<Command id="CAMERAPRESET_CM">
			<Cmd>CAMERAPRESET</Cmd>
			<API>setCameraPreset(preset)</API>
			<Notes>
			CAMERAPRESET-&lt;preset&gt; - 
			Recall camera preset.
			Where:
			&lt;preset&gt; is 1 to x and x is the maximum supported preset. 
			</Notes>
		</Command>
		<Command id="GETCAMERAPRESET_CM">
			<Cmd>?CAMERAPRESET</Cmd>
			<API>getCameraPreset()</API>
			<Notes>
			?CAMERAPRESET - 
			Query for camera preset, 
			Responds with:
			CAMERAPRESET-&lt;preset&gt;
			</Notes>
			<CmdResponse>CAMERAPRESET</CmdResponse>
		</Command>
		<Command id="GETCAMERAPRESETCOUNT_CM">
			<Cmd>?CAMERAPRESETCOUNT</Cmd>
			<API>getCameraPresetCount()</API>
			<Notes>
			?CAMERAPRESETCOUNT - 
			Query number of presets on a camera, 
			Responds with:
			CAMERAPRESETCOUNT-&lt;count&gt;
			</Notes>
			<CmdResponse>CAMERAPRESETCOUNT</CmdResponse>
		</Command>
		<Command id="GETCAMERAPRESETPROPERTIES_CM">
			<Cmd>?CAMERAPRESETPROPERTIES</Cmd>
			<API>getCameraPresetProperties()</API>
			<Notes>
			?CAMERAPRESETPROPERTIES - 
			Query properties for every camera preset, 
			Responds with:
			CAMERAPRESETPROPERTIES-&lt;index&gt;,&lt;displayName&gt;[;&lt;index&gt;,&lt;displayName&gt;]			
			</Notes>
			<CmdResponse>CAMERAPRESETPROPERTY</CmdResponse>
		</Command>
		<Command id="GETCAMERAPRESETPROPERTY_CM">
			<Cmd>?CAMERAPRESETPROPERTY</Cmd>
			<API>getCameraPresetProperty()</API>
			<Notes>
			?CAMERAPRESETPROPERTY-&lt;index&gt; - 
			Query properties for single camera preset,
			Responds with:
			CAMERAPRESETPROPERTY-&lt;index&gt;,"&lt;displayName&gt;"
			</Notes>
			<CmdResponse>CAMERAPRESETPROPERTY</CmdResponse>
		</Command>
		<Event id="">
			<Evt>CAMERA_CAMERAPRESETCOUNT_EVENT</Evt>
			<Notes>Returns integer number of camera presets</Notes>
			<EventResponse resp="CAMERAPRESETCOUNT">
				<Parameters>
					<Parameter type="Int"/>
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>CAMERA_CAMERAPRESET_EVENT</Evt>
			<Notes>
			Camera preset changed.
			Where:
			&lt;preset&gt; is 1-x and x is the maximum supported preset (see specific module documentation)
			</Notes>
			<EventResponse resp="CAMERAPRESET">
				<Parameters>
					<Parameter type="Int" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>CAMERA_CAMERAPRESETPROPERTIES_EVENT</Evt>
			<Notes>
			Returns string containing &lt;index&gt; and &lt;displayName&gt; for each camera preset.
			</Notes>
			<EventResponse resp="CAMERAPRESETPROPERTIES">
				<Parameters>
					<Parameter type="StringArray"/>
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>CAMERA_CAMERAPRESETPROPERTY_EVENT</Evt>
			<Notes>
			Returns string containing &lt;index&gt; and &lt;displayName&gt; for a camera preset.
			</Notes>
			<EventResponse resp="CAMERAPRESETPROPERTY">
				<Parameters>
					<Parameter type="String"/>
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="Custom">
		<Command id="CUSTOMLISTQUERY_CM">
			<Cmd>?CUSTOMLIST</Cmd>
			<API>getProperty("Custom-List")</API>
			<Notes>
			?CUSTOMLIST -
			Query for the list of supported custom commands.
			Responds with:
			CUSTOMLIST-&lt;command&gt;[,&lt;command&gt;]
			Where:
			&lt;command&gt; is one of a comma separated list of the 
			custom commands support by the module. 
			Only valid for Driver Design Modules
			</Notes>
			<CmdResponse>CUSTOMLIST</CmdResponse>
		</Command>
		<Command id="SETPROPERTY_CM">
			<Cmd>PROPERTY</Cmd>
			<API>setProperty(String name, String value)</API>
			<Notes>PROPERTY-&lt;name&gt;,&lt;value&gt; -
			Set the property to a value.
			Where: 
			&lt;name&gt; is the property name.
			&lt;value&gt; is the property value.</Notes>
		</Command>
		<Event id="">
			<Evt>CUSTOM_FEEDBACK_EVENT</Evt>
			<Notes>
			&lt;user_defined&gt; -
			Provides feedback for any custom functionality not provided by SNAPi.
			Where:
			&lt;user_defined&gt; is any user defined string.
			</Notes>
			<EventResponse resp="user_defined">
				<Parameters>
					<Parameter type="String" description="A user defined response String" />
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="Device">
		<!-- Note: Commands, methods, etc. are implemented by Module 
		as well as the Module and List controllers 
		-->
		<Command id="SETPROPERTY_CM">
			<Cmd>PROPERTY</Cmd>
			<API>setProperty(String name, String value) </API>
			<Notes>
			PROPERTY-&lt;name&gt;,&lt;value&gt; -
			Set the property to a value, 
			set Property &lt;name&gt; equal to &lt;value&gt;. 
			</Notes>
		</Command>
		<Command id="GETPROPERTY_CM">
			<Cmd>?PROPERTY</Cmd>
			<API>getProperty(String name)</API>
			<Notes>
			?PROPERTY-&lt;name&gt;
			Query for the value of property. 
			Responds with:
			PROPERTY-&lt;name&gt;,&lt;value&gt;
			</Notes>
			<CmdResponse>PROPERTY</CmdResponse>
		</Command>
		<Command id="GETLIST_CM">
			<Cmd>?LIST</Cmd>
			<API>ListController.GetListFactory(ComponentInstanceIf instance, Module mod, int index)</API>
			<Notes>
			?LIST-&lt;name&gt; - 
			Query to discover a PropertyList contents. 
			Where: &lt;name&gt; is the PropertyList name.
			If &lt;name&gt; is not recognized, no response; 
			otherwise, a series of NetLinx strings, one for each element in the PropertyList. 
			Responds with:
			LIST-&lt;name&gt;,&lt;index&gt;,&lt;key&gt;,&lt;value&gt; 
			Where: 
			&lt;name&gt; is the PropertyList name, 
			&lt;index&gt; is the one-based decimal ordinal value of this property in the list. 
			&lt;key&gt; is the property key.
			&lt;value&gt; is the property value. 
			LIST APIs are to be used for user defined property list, 
			these APIs are not intended to be used for well known SNAPI properties.
			</Notes>
			<CmdResponse>LIST</CmdResponse>
		</Command>
		<Command id="GETLISTSIZE_CM">
			<!-- This is implemented by ListController -->
			<Cmd>?LISTSIZE</Cmd>
			<API>ListController.GetListSizeFactory(ComponentInstanceIf instance, Module mod, int index)</API>
			<Notes>
			?LISTSIZE-&lt;name&gt; -
			Query to discover a PropertyList size. 
			Where: 
			&lt;name&gt; is the PropertyList name.
			If &lt;name&gt; is not recognized, no response; otherwise,
			Responds with: 
			LISTSIZE-&lt;name&gt;,&lt;size&gt; 
			Where: 
			&lt;name&gt; is the PropertyList name. 
			&lt;size&gt; is a decimal integer representing the size of the list. 
			LIST APIs are to be used for user defined property list, 
			these APIs are not intended to be used for well known SNAPI properties.
			</Notes>
			<CmdResponse>LISTSIZE</CmdResponse>
		</Command>
		<Command id="GETLISTSELECT_CM">
			<Cmd>?LISTSELECT</Cmd>
			<API>ListController.ListController.GetListSelectFactory(instance, mod, instance.getIndex())</API>
			<Notes>
			?LISTSELECT-&lt;name&gt; -
			Query to discover a PropertyList&#8217;s selected element. 
			Where: 
			&lt;name&gt; is the PropertyList name.
			If &lt;name&gt; is not recognized, no response. 
			If no selected element, 
			Responds with: 
			LISTSELECT-&lt;name&gt;,0
			Where: 
			&lt;name&gt; is the PropertyList name.
			Otherwise:
			Responds with: 
			LISTSELECT-&lt;name&gt;,&lt;index&gt;,&lt;key&gt;,&lt;value&gt; 
			Where, 
			&lt;name&gt; is the PropertyList name.
			&lt;index&gt; is the one-based decimal ordinal value of this property in the list.
			&lt;key&gt; is the property key.
			&lt;value&gt; is the property value. 
			LIST APIs are to be used for user defined property list, 
			these APIs are not intended to be used for well known SNAPI properties.</Notes>
			<CmdResponse>LISTSELECT</CmdResponse>
		</Command>
		<Command id="LISTSELECT">
			<Cmd>LISTSELECT</Cmd>
			<API>ListController.ListSelectFactory(ComponentInstanceIf instance, Module mod, int index)</API>
			<Notes>
			LISTSELECT-&lt;name&gt;,&lt;index&gt; -
			Command to a PropertyList to select the element at index.
			Where: 
			&lt;name&gt; is the PropertyList name.
			&lt;index&gt; is the one-based decimal ordinal value of a property in the list,
			or key name. 
			LIST APIs are to be used for user defined property list, these APIs are not 
			intended to be used for well known SNAPI properties.</Notes>
		</Command>
		<Command id="LISTNEXT">
			<Cmd>LISTNEXT</Cmd>
			<API>ListController.ListNextFactory(ComponentInstanceIf instance)</API>
			<Notes>
			LISTNEXT-&lt;name&gt; -
			Command to iterate in a forward* direction to the 
			PropertyList&#8217;s next selected element. *Forward means increasing
			ordinal value.
			Where: 
			&lt;name&gt; is the PropertyList name.
			LIST APIs are to be used for user defined property list, these APIs are not intended to 
			be used for well known SNAPI properties.</Notes>
		</Command>
		<Command id="LISTPREV">
			<Cmd>LISTPREV</Cmd>
			<API>ListController.ListPrevFactory(ComponentInstanceIf instance)</API>
			<Notes>
			LISTPREV-&lt;name&gt; -
			Command to iterate in a backward* direction to the 
			PropertyList&#8217;s next selected element. *Backward means decreasing 
			ordinal value.
			Where: 
			&lt;name&gt; is the PropertyList name.
			LIST APIs are to be used for user defined property list, these APIs are not intended to be 
			used for well known SNAPI properties.</Notes>
		</Command>
		<Command id="LISTSET">
			<Cmd>LISTSET</Cmd>
			<API>ListController.ListSetFactory(ComponentInstanceIf instance</API>
			<Notes>
			LISTSET-&lt;name&gt;,&lt;key&gt;,&lt;value&gt;[;&lt;key&gt;,&lt;value&gt;...] -
			Command to create a PropertyList.
			Where: 
			&lt;name&gt; is the PropertyList name.
			&lt;key&gt; is the property key.
			&lt;value&gt; is the property value.
			LIST APIs are to be used for user defined property list, 
			these APIs are not intended to be used for well known SNAPI properties.
			</Notes>
		</Command>
		<Channel
			id="MODULE_DEVICEONLINE"
			type="Feedback">
			<Chan>251</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Communication is established with device while channel is on</Notes>
		</Channel>
		<Channel
			id="MODULE_DATA_INITIALIZED"
			type="Feedback">
			<Chan>252</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>			
			<Notes>Module data is synchronized with device while channel is on</Notes>
		</Channel>
		<Command id="SETDIAGNOSTIC_MODE_CM">
			<Cmd>DIAGNOSTIC_MODE</Cmd>
			<API>diagnosticMode(String mode)</API>
			<Notes>
			DIAGNOSTIC_MODE-&lt;mode&gt; -
			Set the diagnostic mode.
			Where:
			&lt;mode&gt; is ON, ASSUMED, OFF. 
			ON: 
				Set device online.
				Set data initialized to true. 
				Online timer is disabled and not used. 
				Polling is disabled and not used External commands are processed. 
			ASSUMED: Set device online.
				Set data initialized to true.
				Online timer is disabled and not used.
				Polling is disabled and not used.
				External commands are processed.
				Assume value is set on send, call update with value. 
			OFF:
				Normal operation.
			</Notes>
		</Command>
		<Command id="GETDEBUGSTATE_CM">
			<Cmd>?DEBUG</Cmd>
			<API>getDebugLevel()</API>
			<Notes>
			?DEBUG -
			Query the debug level, 
			Responds with:
			DEBUG-&lt;state&gt;
			Where:
			&lt;state&gt; is 1-4 for ERROR, WARNING, DEBUG, INFO
			</Notes>
			<CmdResponse>DEBUG</CmdResponse>
		</Command>
		<Command id="GETFWVERSION_CM">
			<Cmd>?FWVERSION</Cmd>
			<API>getFirmwareVersion()</API>
			<Notes>
			?FWVERSION -
			Query for the device firmware version, 
			Responds with: 
			FWVERSION-&lt;version&gt;
			</Notes>
			<CmdResponse>FWVERSION</CmdResponse>
		</Command>
		<Command id="GETVERSION_CM">
			<Cmd>?VERSION</Cmd>
			<API>getBundleVersion()</API>
			<Notes>
			?VERSION -
			Query for the module version, 
			Responds with:
			VERSION-&lt;version&gt;
			</Notes>
			<CmdResponse>VERSION</CmdResponse>
		</Command>
		<Command id="GETDRIVERVERSION_CM">
			<Cmd>?DRIVERVERSION</Cmd>
			<API>getDriverVersion()</API>
			<Notes>
			?VERSION -
			Query for the device driver version, 
			Responds with: 
			DRIVERVERSION-&lt;version&gt; 
			(Only valid for Driver Design Modules)
			</Notes>
			<CmdResponse>DRIVERVERSION</CmdResponse>
		</Command>
		<Command id="PASSTHRU_CM">
		<API>passThru(byte[] buffer)</API>
			<Cmd>PASSTHRU</Cmd>
			<API>passThru(byte[] buffer)</API>
			<Notes>
			PASSTHRU-&lt;buffer&gt; -
			SendSend a message directly to the device.
			Where:
			&lt;buffer&gt; is the data to send
			</Notes>
		</Command>
		<Command id="REINITIALIZE_CM">
			<Cmd>REINIT</Cmd>
			<API>reinitialize()</API>
			<Notes>
			REINIT -
			Reinitialize communication with the device
			</Notes>
		</Command>
		<Command id="SETDEBUGSTATE_CM">
			<Cmd>DEBUG</Cmd>
			<API>setDebugLevel(int i)</API>
			<Notes>
			DEBUG-&lt;state&gt; -
			Set the debug state.
			Where:
			&lt;state&gt; is 1-4 for ERROR, WARNING, DEBUG, INFO 
			</Notes>
		</Command>
		<Command id="SETDEVICEDATETIME_CM">
			<Cmd>CLOCK</Cmd>
			<API>setDeviceDateTime(Date date)</API>
			<Notes>
			CLOCK-&lt;mm/dd/yyyy&gt; &lt;hh:mm:ss&gt; -
			or
			CLOCK-&lt;mm-dd-yyyy&gt; &lt;hh:mm:ss&gt; -
			or
			CLOCK-&lt;mm-dd-yyyy&gt; -	
			Set the device date/time.
			Where:
			&lt;mm/dd/yyyy&gt; is a date in the format of month/day/year
			&lt;mm-dd-yyyy&gt; is a date in the format of month-day-year
			&lt;hh:mm:ss&gt; is a time in the format hour:minutes:seconds
			</Notes>
		</Command>
		<Command id="SETPASSBACKSTATE_CM">
			<Cmd>PASSBACKSTATE</Cmd>
			<API>passbackon() or passbackoff()</API>
			<Notes>
			PASSBACKSTATE-&lt;state&gt; -
			Set the passback state.
			Where:
			&lt;state&gt; is 1 or 0. 
			When passback is on (1), all responses from the device will be passed back 
			to the NetLinx program as a string from the virtual device
			</Notes>
		</Command>
		<Command id="GETIPADDRESS_CM">
			<Cmd>?PROPERTY-IP_Address</Cmd>
			<API>getProperty(String name)</API>
			<Notes>
			?PROPERTY-IP_Address
			Query the current value of IP address.
			</Notes>
		</Command>
		<Command id="SETIPADDRESS_CM">
			<Cmd>PROPERTY-IP_Address</Cmd>
			<API>setProperty(String key, String value)</API>
			<Notes>
			PROPERTY-IP_Address,&lt;xxx.xxx.xxx.xxx&gt; -
			or
			PROPERTY-IP_Address,&lt;hostname&gt; -
			Set the value of IP address.
			Where:
			&lt;xxx.xxx.xxx.xxx&gt; is an IP address.
			&lt;hostname&gt; is a host name.
			REINIT required to take affect. 
			</Notes>
		</Command>
		<Command id="GETPORT_CM">
			<Cmd>?PROPERTY-Port</Cmd>
			<API>getProperty(String name)</API>
			<Notes>
			?PROPERTY-Port -
			Query the current value of the port number. 
			Associated with PROPERTY-IP_Address.
			</Notes>
		</Command>
		<Command id="SETPORT_CM">
			<Cmd>PROPERTY-Port</Cmd>
			<API>setProperty(String key, String value)</API>
			<Notes>
			PROPERTY-Port,&lt;port number&gt; -
			Set the value of the port number associated with the IP address.
			Where:
			&lt;port number&gt; is a port number.
			REINIT required to take affect. 
			</Notes>
		</Command>
		<Command id="GETBAUDRATE_CM">
			<Cmd>?PROPERTY-Baud_Rate</Cmd>
			<API>getProperty(String name)</API>
			<Notes>
			?PROPERTY-Baud_Rate -
			Query the current value of the baud rate. 
			Associated with the Serial port.
			</Notes>
		</Command>
		<Command id="SETBAUDRATE_CM">
			<Cmd>PROPERTY-Baud_Rate</Cmd>
			<API>setProperty(String key, String value)</API>
			<Notes>
			PROPERTY-Baud_Rate,&lt;baud rate&gt; -
			Where:
			&lt;baud rate&gt; is a serial port baud rate.
			Set the value of the baud rate associated with the Serial port.
			REINIT required to take affect. 
			</Notes>
		</Command>
		<Command id="GETDEVICEID_CM">
			<Cmd>?PROPERTY-Device_ID</Cmd>
			<API>getProperty(String name)</API>
			<Notes>
			?PROPERTY-Device_ID -
			Query the current value of the device id. 
			If supported by the device this is the id of the end device.
			</Notes>
		</Command>
		<Command id="SETDEVICEID_CM">
			<Cmd>PROPERTY-Device_ID</Cmd>
			<API>setProperty(String key, String value)</API>
			<Notes>
			PROPERTY-Device_ID,&lt;device id&gt; -
			Set the current value of the &lt;device id&gt;.
			Where:
			&lt;device id&gt; is a new device ID.
			If supported by the device this is the id of the end device. 
			REINIT required to take affect. 
			</Notes>
		</Command>
		<Command id="SETPOLLTIMER_CM">
			<Cmd>PROPERTY-Poll_Time</Cmd>
			<API>setProperty(String key, String value)</API>
			<Notes>
			PROPERTY-Poll_Time,&lt;time&gt; -
			Set the current value of the poll timer interval.
			Where:
			&lt;time&gt; is expressed in milliseconds. 
			Warning setting the interval lower than 10,000ms (10 seconds) is not recommended. 
			REINIT is not required to take affect. 
			</Notes>
		</Command>
		<Command id="GETPOLLTIMER_CM">
			<Cmd>?PROPERTY-Poll_Time</Cmd>
			<API>getProperty(String name)</API>
			<Notes>
			?PROPERTY-Poll_Time -
			Query the current value of the poll time interval.
			</Notes>
		</Command>
		<Command id="SETONLINETIMEOUT_CM">
			<Cmd>PROPERTY-Online_Timeout</Cmd>
			<API>setProperty(String key, String value)</API>
			<Notes>
			PROPERTY-Online_Timeout,&lt;time&gt; -
			Set the current value of the online timeout interval. 
			Where:
			&lt;time&gt; is expressed in seconds. 
			This interval is the maximum time the device will remain in the online state 
			given that no communication has been received from the device. 
			REINIT required to take affect. 
			</Notes>
		</Command>
		<Command id="GETONLINETIMEOUT_CM">
			<Cmd>?PROPERTY-Online_Timeout</Cmd>
			<API>getProperty(String name)</API>
			<Notes>
			?PROPERTY-Online_Timeout -
			Query the current value of the online timeout interval.
			</Notes>
		</Command>
		<Command id="GETMINIMUMCMDINTERVAL_CM">
			<Cmd>?PROPERTY-Minimum_Command_Interval</Cmd>
			<API>getProperty(String name)</API>
			<Notes>
			?PROPERTY-Minimum_Command_Interval -
			Query the current value of the Minimum Time Interval Between Command Messages (in milliseconds). 
			This property is read-only.
			</Notes>
		</Command>
		<Event id="">
			<Evt>MODULE_DATAINITIALIZED_EVENT</Evt>
			<Notes>
			Feedback Channel: Module data is synchronized with device while channel is on
			</Notes>
			<Channels>
				<EvtChan
					type="Boolean"
					description="">252</EvtChan>
			</Channels>
		</Event>
		<Event id="">
			<Evt>MODULE_DIAGNOSTICMODE_EVENT</Evt>
			<Notes>
			DIAGNOSTIC_MODE-&lt;mode&gt; -
			Diagnostic mode changed
			Where:
			&lt;mode&gt; is a valid diagnostic mode.
			Valid values are ON, ASSUMED or OFF.
			</Notes>
			<EventResponse resp="DIAGNOSTIC_MODE">
				<Parameters>
					<Parameter
						type="String"
						description="A valid diagnostic mode which is one of ON, ASSUMED or OFF" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>MODULE_PASSBACK_EVENT</Evt>
			<Notes>
			PASSBACK-&lt;string&gt; -
			Passback message string returned from master
			Where:
			&lt;string&gt; is some string from the master. 
			</Notes>
			<EventResponse resp="PASSBACK">
				<Parameters>
					<Parameter
						type="String"
						description="" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>MODULE_PASSBACKSTATE_EVENT</Evt>
			<Notes>
			PASSBACKSTATE-&lt;state&gt; -
			Passback state changed
			Where:
			&lt;state&gt; is 1 or 0. 
			</Notes>
			<EventResponse resp="PASSBACKSTATE">
				<Parameters>
					<Parameter
						type="boolean"
						description="true(1) is enabled, false(0) is disabled" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>MODULE_DEBUGSTATE_EVENT</Evt>
			<Notes>
			DEBUG-&lt;state&gt;
			Where:
			&lt;state&gt; is 1-4 for ERROR, WARNING, DEBUG, INFO
			</Notes>
			<EventResponse resp="DEBUG">
				<Parameters>
					<Parameter
						type="state"
						description="is 1-4 for ERROR, WARNING, DEBUG, INFO" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>MODULE_CHANNEL_EVENT</Evt>
			<Notes>
			Feedback Channel: Indicates a channel state change.
			The actual channel is that of the channel which changed.
			</Notes>
			<Channels>
				<EvtChan
					type="Boolean"
					description="">0</EvtChan>
			</Channels>
		</Event>
		<Event id="">
			<Evt>MODULE_LEVEL_EVENT</Evt>
			<Notes>
			Indicates some level has changed
			</Notes>
			<Levels>
				<EvtLevel type="integer" description="Any valid level" >0</EvtLevel>
			</Levels>
		</Event>
		<Event id="">
			<Evt>MODULE_PUSH_EVENT</Evt>
			<Notes>Indicates a button was pressed</Notes>
			<Channels>
				<EvtChan type="Integer" description="any valid button channel">0</EvtChan>
			</Channels>
		</Event>
		<Event id="">
			<Evt>MODULE_RELEASE_EVENT</Evt>
			<Notes>Indicates a button was released</Notes>
			<Channels>
				<EvtChan type="Integer" description="any valid button channel">0</EvtChan>
			</Channels>
		</Event>
		<Event id="">
			<Evt>MODULE_STRING_EVENT</Evt>
			<Notes>
			STRING-&lt;string&gt;
			Where:
			&lt;cmd&gt; is a string to be sent
			</Notes>
			<EventResponse resp="STRING">
				<Parameters>
					<Parameter
						type="string"
						description="is a string to send" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>MODULE_COMMAND_EVENT</Evt>
			<Notes>
			COMMAND-&lt;cmd&gt;
			Where:
			&lt;cmd&gt; is a command sent to a a master
			</Notes>
			<EventResponse resp="COMMAND">
				<Parameters>
					<Parameter
						type="cmd"
						description="is a master command" />
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component  id="Dialer">
		<Command id="DIALINDEX_CM">
			<Cmd>DIALINDEX</Cmd>
			<API>dial(index)</API>
			<Notes>DIALINDEX-&lt;index&gt; - 
			Dial a speed dial index.
			Where:
			&lt;index&gt; is 1 to x and x is the maximum supported speed dial index (see specific module documentation)
			</Notes>
		</Command>
		<Command id="DIALID_CM">
			<Cmd>DIALID</Cmd>
			<API>dial(recordID)</API>
			<Notes>DIALID-&lt;recordID&gt; - 
			Dial a speed dial record.
			</Notes>
		</Command>
		<Command id="DTMF_CM">
			<Cmd>DTMF</Cmd>
			<API>dialDTMF(char)</API>
			<Notes>DTMF-&lt;digit&gt; - 
			Send a DTMF tone for a character without regard for hook status
			</Notes>
		</Command>
		<Command id="DIALNUMBER_CM">
			<Cmd>DIALNUMBER</Cmd>
			<API>dialNumber(number)</API>
			<Notes>DIALNUMBER-&lt;number&gt; - 
			Dial a number.
			Where:
			&lt;number&gt; is the number to be dialed.
			</Notes>
		</Command>
		<Command id="GETDIALERSTATUS_CM">
			<Cmd>?DIALERSTATUS</Cmd>
			<API>getDialerStatus()</API>
			<Notes>
			?DIALERSTATUS - 
			Query dialer status, 
			Responds with:
			DIALERSTATUS-&lt;status&gt;
			Where:
			&lt;status&gt; is DIALING,BUSY,RINGING,DISCONNECTED,NEGOTIATING,FAULT,CONNECTED
			</Notes>
			<CmdResponse>DIALERSTATUS</CmdResponse>
		</Command>
		<Channel id="DIAL_AUDIBLE_RING" type="Momentary">
			<Chan>205</Chan>
			<OnAPI>cycleAudibleRing()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Cycle audible ring when channel is activated
			</Notes>
		</Channel>
		<Channel id="DIAL_AUTO_ANSWER" type="Momentary">
			<Chan>204</Chan>
			<OnAPI>cycleAutoAnswer()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Cycle auto answer when channel is activated
			</Notes>
		</Channel>
		<Channel id="DIAL_OFF_HOOK" type="Momentary">
			<Chan>202</Chan>
			<OnAPI>cycleOffHook()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Cycle hook state when channel is activated
			</Notes>
		</Channel>
		<Channel id="DIAL_FLASH_HOOK" type="Momentary">
			<Chan>208</Chan>
			<OnAPI>flashHook()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Flash hook when channel is activated
			</Notes>
		</Channel>
		<Channel id="DIAL_REDIAL" type="Momentary">
			<Chan>201</Chan>
			<OnAPI>redial()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Redial when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="DIAL_AUDIBLE_RING_ON"
			type="Discrete">
			<Chan>240</Chan>
			<OnAPI>setAudibleRingOn(state)</OnAPI>
			<OffAPI>setAudibleRingOn(state)</OffAPI>
			<Notes>Discrete Function Channel: Audible ring is on while channel is active</Notes>
		</Channel>
		<Channel
			id="DIAL_AUTO_ANSWER_ON"
			type="Discrete">
			<Chan>239</Chan>
			<OnAPI>setAutoAnswerOn(state)</OnAPI>
			<OffAPI>setAutoAnswerOn(state)</OffAPI>
			<Notes>Discrete Function Channel: Auto answer is on while channel is active</Notes>
		</Channel>
		<Channel
			id="DIAL_OFF_HOOK_ON"
			type="Discrete">
			<Chan>238</Chan>
			<OnAPI>setOffHook(state)</OnAPI>
			<OffAPI>setOffHook(state)</OffAPI>
			<Notes>Discrete Function Channel: Hook state is off hook while channel is active</Notes>
		</Channel>
		<Channel
			id="DIAL_AUDIBLE_RING_FB"
			type="Feedback">
			<Chan>240</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Channel: Audible ring is on if channel is on.</Notes>
		</Channel>
		<Channel
			id="DIAL_AUTO_ANSWER_FB"
			type="Feedback">
			<Chan>239</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Channel: Auto answer is on if channel is on.</Notes>
		</Channel>
		<Channel
			id="DIAL_OFF_HOOK_FB"
			type="Feedback">
			<Chan>238</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Channel: Hook state is off hook if channel is on.</Notes>
		</Channel>
		<Event id="">
			<Evt>DIALER_DIALERSTATUS_EVENT</Evt>
			<Notes>Dialer status changed</Notes>
			<EventResponse resp="DIALERSTATUS">
				<Parameters>
					<Parameter
						type="String"
						description="Dialer status. Values include DIALING,BUSY,RINGING,DISCONNECTED,NEGOTIATING,FAULT,CONNECTED" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>DIALER_INCOMINGCALL_EVENT</Evt>
			<Notes>An incoming call is detected. If available via caller ID, the phone number will be supplied</Notes>
			<EventResponse resp="INCOMINGCALL">
				<Parameters>
					<Parameter
						type="String"
						description="Caller ID, if available" />
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="DiscDevice">
		<Channel
			id="DISC_NEXT"
			type="Momentary">
			<Chan>55</Chan>
			<OnAPI>nextDisc()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Set disc next when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="DISC_PREV"
			type="Momentary">
			<Chan>56</Chan>
			<OnAPI>previousDisc()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Set disc previous when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="DISC_TRAY"
			type="Momentary">
			<Chan>120</Chan>
			<OnAPI>cycleDiscTray()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Open or Close the disc tray when the channel is activated
			</Notes>
		</Channel>
		<Channel
			id="DISC_RANDOM"
			type="Momentary">
			<Chan>124</Chan>
			<OnAPI>cycleRandom()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle random when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="DISC_REPEAT"
			type="Momentary">
			<Chan>125</Chan>
			<OnAPI>cycleRepeat()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle repeat when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="DISC_RANDOM_DISC_ON"
			type="Momentary">
			<Chan>178</Chan>
			<OnAPI>setRandomState(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Random-disc is on while channel is active
			</Notes>
		</Channel>
		<Channel
			id="DISC_RANDOM_ALL_ON"
			type="Momentary">
			<Chan>179</Chan>
			<OnAPI>setRandomState(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Random-all is on while channel is active
			</Notes>
		</Channel>
		<Channel
			id="DISC_RANDOM_OFF_ON"
			type="Momentary">
			<Chan>180</Chan>
			<OnAPI>setRandomState(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Random-off is on while channel is active
			</Notes>
		</Channel>
		<Channel
			id="DISC_REPEAT_DISC_ON"
			type="Momentary">
			<Chan>181</Chan>
			<OnAPI>setRepeatState(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Repeat-disc is on while channel is active
			</Notes>
		</Channel>
		<Channel
			id="DISC_REPEAT_TRACK_ON"
			type="Momentary">
			<Chan>182</Chan>
			<OnAPI>setRepeatState(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Repeat-track is on while channel is active
			</Notes>
		</Channel>
		<Channel
			id="DISC_REPEAT_ALL_ON"
			type="Momentary">
			<Chan>183</Chan>
			<OnAPI>setRepeatState(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Repeat-all is on while channel is active
			</Notes>
		</Channel>
		<Channel
			id="DISC_REPEAT_OFF_ON"
			type="Momentary">
			<Chan>184</Chan>
			<OnAPI>setRepeatState(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Repeat-off is on while channel is active
			</Notes>
		</Channel>
		<Command id="GETDISCCAPACITY_CM">
			<Cmd>?DISCCAPACITY</Cmd>
			<API>getDiscCapacity()</API>
			<Notes>
			?DISCCAPACITY -
			Query for the disc capacity.
			Responds with:
			DISCCAPACITY-&lt;discs&gt;
			Where:
			&lt;discs&gt; is the number of disc slots supported by the device (see specific module documentation) 
			</Notes>
			<CmdResponse>DISCCAPACITY</CmdResponse>
		</Command>
		<Command id="GETDISCINFO_CM">
			<Cmd>?DISCINFO</Cmd>
			<API>getDiscInfo()</API>
			<Notes>
			?DISCINFO -
			Query for disc info.
			Responds with:
			DISCINFO-&lt;num&gt;,&lt;duration&gt;,&lt;# of titles&gt;,&lt;#of tracks&gt;,&lt;discType&gt;,&lt;id&gt; &lt;num&gt; is disc number &lt;duration&gt; is a disc duration String in the format [-]hh:mm:ss.ff &lt;# of titles&gt; is the number of titles in this disc &lt;# of tracks&gt; is the number of tracks in this disc &lt;disctype&gt; is the disc type (CD, DVD, LASER_DISC) &lt;id&gt; is the disc database id. 
			</Notes>
			<CmdResponse>DISCINFO</CmdResponse>
		</Command>
		<Command id="GETTITLEINFO_CM">
			<Cmd>?TITLEINFO</Cmd>
			<API>getTitleInfo()</API>
			<Notes>
			?TITLEINFO -
			Query for title info changed.
			Responds with:
			TITLEINFO-&lt;num&gt;,&lt;duration&gt;,&lt;# of tracks&gt;,&lt;discNumber&gt; &lt;num&gt; is title number &lt;duration&gt; is a title duration String in the format [-]hh:mm:ss.ff &lt;# of tracks&gt; is the number of tracks int his title &lt;discNumber&gt; is the disc number the title belongs to. 
			</Notes>
			<CmdResponse>TITLEINFO</CmdResponse>
		</Command>
		<Command id="QUERYDISCPROPERTIES_CM">
			<Cmd>?DISCPROPS</Cmd>
			<API>queryDiscProperties()</API>
			<Notes>
			?DISCPROPS Query for the disc properties.
			Responds with multiple:
			DISCPROP-&lt;key&gt;,&lt;value&gt; 
			commands, one for each key 
			</Notes>
			<CmdResponse>DISCPROPS</CmdResponse>
		</Command>
		<Command id="QUERYDISCPROPERTY_CM">
			<Cmd>?DISCPROP</Cmd>
			<API>queryDiscProperty(java.lang.String)</API>
			<Notes>
			?DISCPROP-&lt;key&gt; -
			Query for the disc property.
			Responds with:
			DISCPROP-&lt;key&gt;,&lt;value&gt;
			</Notes>
			<CmdResponse>DISCPROP</CmdResponse>
		</Command>
		<Command id="QUERYTITLEPROPERTIES_CM">
			<Cmd>?TITLEPROPS</Cmd>
			<API>queryTitleProperties()</API>
			<Notes>
			?TITLEPROPS Query for the title properties.
			Responds with multiple: 
			TITLEPROP-&lt;key&gt;,&lt;value&gt; 
			commands, one for each key 
			</Notes>
			<CmdResponse>TITLEPROPS</CmdResponse>
		</Command>
		<Command id="QUERYTITLEPROPERTY_CM">
			<Cmd>?TITLEPROP</Cmd>
			<API>queryDiscProperty(java.lang.String)</API>
			<Notes>
			?TITLEPROPS-&lt;key&gt; -
			Query for the title properties.
			Responds with multiple:
			TITLEPROP-&lt;key&gt;,&lt;value&gt; 
			commands, one for each key 
			</Notes>
			<CmdResponse>TITLEPROP</CmdResponse>
		</Command>
		<Command id="SETDISC_CM">
			<Cmd>SETDISC</Cmd>
			<API></API>
			<Notes>
			SETDISC-&lt;discNumber&gt; -
			Set disc number to &lt;discNumber&gt;
			Where: 
			&lt;discNumber&gt; is 1 to &lt;x&gt; where x is the disc capacity. (see getDiscCapactiy() or module specific documentation)
			</Notes>
		</Command>
		<Command id="SETTITLECOUNTERNOTIFICATIONON_CM">
			<Cmd>TITLECOUNTERNOTIFY</Cmd>
			<API>setTitleCounterNotificationOn(boolean)</API>
			<Notes>
			TITLECOUNTERNOTIFY-&lt;state&gt; -
			Turn title counter notification on or off.
			Where:
			&lt;state&gt; is 1 or 0
			</Notes>
		</Command>
		<Event id="">
			<Evt>DISCDEVICE_DISCPROPERTIES_EVENT</Evt>
			<Notes>
			DISCPROP-&lt;key&gt;,&lt;value&gt; -
			Disc properties query changed.
			Responds with multiple: 
			DISCPROP-&lt;key&gt;,&lt;value&gt; 
			commands, one for each key			
			</Notes>
			<EventResponse resp="DISCPROP">
				<Parameters>
					<Parameter
						type="StringArray"
						description="Represents the property information for all discs." />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>DISCDEVICE_RANDOMSTATE_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Channels>
				<EvtChan
					type="boolean"
					description="Random All On">179</EvtChan>
				<EvtChan
					type="boolean"
					description="Random Disc On">178</EvtChan>
				<EvtChan
					type="boolean"
					description="Random Off On">180</EvtChan>
			</Channels>
		</Event>
		<Event id="">
			<Evt>DISCDEVICE_REPEATSTATE_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Channels>
				<EvtChan
					type="boolean"
					description="Repeat All On">183</EvtChan>
				<EvtChan
					type="boolean"
					description="Repeat Disc On">181</EvtChan>
				<EvtChan
					type="boolean"
					description="Repeat Off On">184</EvtChan>
				<EvtChan
					type="boolean"
					description="Repeat Track On">182</EvtChan>
			</Channels>
		</Event>
		<Event id="">
			<Evt>DISCDEVICE_DISCCAPACITY_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="DISCCAPACITY">
				<Parameters>
					<Parameter
						type="Int"
						description="Number of disc slots supported by the device" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>DISCDEVICE_DISCINFO_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="DISCINFO">
				<Parameters>
					<Parameter type="String" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>DISCDEVICE_TITLEINFO_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="TITLEINFO">
				<Parameters>
					<Parameter type="String" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>DISCDEVICE_TITLECOUNTERNOTIFICATION_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
		</Event>
		<Event id="">
			<Evt>DISCDEVICE_TITLECOUNTER_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="TITLECOUNTER">
				<Parameters>
					<Parameter type="String" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>DISCDEVICE_TITLEPROPERTIES_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="TITLEPROP">
				<Parameters>
					<Parameter
						type="StringArray"
						description="Represents the property information for all titles." />
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="Display">
		<Channel
			id="BRIGHT_UP"
			type="Momentary">
			<Chan>148</Chan>
			<OnAPI>incrementBrightness()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Brightness is incremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="BRIGHT_DN"
			type="Momentary">
			<Chan>149</Chan>
			<OnAPI>decrementBrightness()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Brightness is decremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="COLOR_UP"
			type="Momentary">
			<Chan>150</Chan>
			<OnAPI>incrementColor()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Color is incremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="COLOR_DN"
			type="Momentary">
			<Chan>151</Chan>
			<OnAPI>decrementColor()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Color is decremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="CONTRAST_UP"
			type="Momentary">
			<Chan>152</Chan>
			<OnAPI>incrementContrast()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Contrast is incremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="CONTRAST_DN"
			type="Momentary">
			<Chan>153</Chan>
			<OnAPI>decrementContrast()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Contrast is decremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="SHARP_UP"
			type="Momentary">
			<Chan>154</Chan>
			<OnAPI>incrementSharpness()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Sharpness is incremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="SHARP_DN"
			type="Momentary">
			<Chan>155</Chan>
			<OnAPI>decrementSharpness()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Sharpness is decremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="TINT_UP"
			type="Momentary">
			<Chan>156</Chan>
			<OnAPI>incrementTint()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Tint is incremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="TINT_DN"
			type="Momentary">
			<Chan>157</Chan>
			<OnAPI>decrementTint()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Tint is decremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="ASPECT_RATIO"
			type="Momentary">
			<Chan>142</Chan>
			<OnAPI>cycleAspectRatio()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle aspect ratios when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="PIP_POS"
			type="Momentary">
			<Chan>191</Chan>
			<OnAPI>cyclePIPPosition()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle PIP positions when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="PIP_SWAP"
			type="Momentary">
			<Chan>193</Chan>
			<OnAPI>swapPIP()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Swap PIP when channel is activated</Notes>
		</Channel>
		<Channel
			id="PIP"
			type="Momentary">
			<Chan>194</Chan>
			<OnAPI>cyclePIP()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle PIP when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="PIP_ON"
			type="Discrete">
			<Chan>195</Chan>
			<OnAPI>setPIPOn(boolean)</OnAPI>
			<OffAPI>setPIPOn(boolean)</OffAPI>
			<Notes>Discrete Function: PIP is on while channel is active</Notes>
		</Channel>
		<Channel
			id="PIC_MUTE"
			type="Momentary">
			<Chan>210</Chan>
			<OnAPI>cyclePictureMute()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle picture mute when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="PIC_MUTE_ON"
			type="Discrete">
			<Chan>211</Chan>
			<OnAPI>setPictureMuteOn(boolean)</OnAPI>
			<OffAPI>setPictureMuteOn(boolean)</OffAPI>
			<Notes>Discrete Function: Picture Mute is on while channel is active
			</Notes>
		</Channel>
		<Channel
			id="PIC_FREEZE"
			type="Momentary">
			<Chan>213</Chan>
			<OnAPI>cycleFreeze()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle freeze when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="PIC_FREEZE_ON"
			type="Discrete">
			<Chan>214</Chan>
			<OnAPI>setFreezeOn(boolean)</OnAPI>
			<OffAPI>setFreezeOn(boolean)</OffAPI>
			<Notes>Discrete Function: Freeze is on while channel is active
			</Notes>
		</Channel>
		<Level id="BRIGHT_LVL">
			<Lvl>10</Lvl>
			<API>setBrightness(int)</API>
			<Notes>Set brightness level</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="COLOR_LVL">
			<Lvl>11</Lvl>
			<API>setColor(int)</API>
			<Notes>Set color level</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="CONTRAST_LVL">
			<Lvl>12</Lvl>
			<API>setContrast(int)</API>
			<Notes>Set contrast level</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="SHARP_LVL">
			<Lvl>13</Lvl>
			<API>setSharpness(int)</API>
			<Notes>Set sharpness level</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="TINT_LVL">
			<Lvl>14</Lvl>
			<API>setTint(int)</API>
			<Notes>Set tint level</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Command id="SETASPECTRATIO_CM">
			<Cmd>ASPECT</Cmd>
			<API></API>
			<Notes>
			ASPECT-&lt;aspectRatio&gt; Set aspect ratio.</Notes>
		</Command>
		<Command id="GETASPECTRATIO_CM">
			<Cmd>?ASPECT</Cmd>
			<API>getAspectRatio(), getAspectRatio(int)</API>
			<Notes>
			?ASPECT -
			Query aspect ratio. 
			Responds with: 
			ASPECT-&lt;aspectratio&gt;
			</Notes>
			<CmdResponse>ASPECT</CmdResponse>
		</Command>
		<Command id="GETASPECTRATIOCOUNT_CM">
			<Cmd>?ASPECTRATIOCOUNT</Cmd>
			<API>getAspectRatioCount()</API>
			<Notes>
			?ASPECTRATIOCOUNT -
			Query aspect ratio count.
			Responds with: 
			ASPECTRATIOCOUNT-&lt;count&gt;
			</Notes>
			<CmdResponse>ASPECTRATIOCOUNT</CmdResponse>
		</Command>
		<Command id="GETASPECTRATIOPROPERTY_CM">
			<Cmd>?ASPECTRATIOPROPERTY</Cmd>
			<API>getAspectRatioProperty(), getAspectRatioProperty(java.lang.String), getAspectRatioProperty(int)
			</API>
			<Notes>
			?ASPECTRATIOPROPERTY-&lt;index&gt; -
			Query properties for single aspect ratio.
			Responds with:
			ASPECTRATIOPROPERTY-&lt;index&gt;,&lt;displayName&gt;,&lt;value&gt;
			</Notes>
			<CmdResponse>ASPECTRATIOPROPERTY</CmdResponse>
		</Command>
		<Command id="GETASPECTRATIOPROPERTIES_CM">
			<Cmd>?ASPECTRATIOPROPERTIES</Cmd>
			<API>getAspectRatioProperties()</API>
			<Notes>
			?ASPECTRATIOPROPERTIES Query properties for all aspect ratios, one ASPECTRATIOPROPERTY response for each aspect ratio. ASPECTRATIOPROPERTY-&lt;index&gt;,&lt;displayName&gt;,&lt;value&gt; </Notes>
			<CmdResponse>ASPECTRATIOPROPERTY</CmdResponse>
		</Command>
		<Command id="GETASPECTRATIOSELECT_CM">
			<Cmd>?ASPECTRATIOSELECT</Cmd>
			<API>getAspectRatioSelect()</API>
			<Notes>
			?ASPECTRATIOSELECT Gets the index of the currently selected aspect ratio property.
			</Notes>
			<CmdResponse>ASPECTRATIOSELECT</CmdResponse>
		</Command>
		<Command id="ASPECTRATIOSELECT_CM">
			<Cmd>ASPECTRATIOSELECT</Cmd>
			<API>setAspectRatio(java.lang.String), setAspectRatio(int)</API>
			<Notes>
			ASPECTRATIOSELECT-&lt;index&gt; -
			Sets the current aspect ratio, 
			Where:
			&lt;index&gt; is an integer number between 1 and the value returned by ?ASPECTRATIOSELECT.
			Responds with:
			ASPECTRATIOSELECT-&lt;index&gt;
			</Notes>
		</Command>
		<Event id="">
			<Evt>DISPLAY_ASPECTRATIO_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="ASPECT">
				<Parameters>
					<Parameter
						type="String"
						description="Represents the current aspect ratio" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>DISPLAY_ASPECTRATIOCOUNT_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="ASPECTRATIOCOUNT">
				<Parameters>
					<Parameter
						type="Int"
						description="Represents the number of aspect ratios" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>DISPLAY_ASPECTRATIOPROPERTY_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="ASPECTRATIOPROPERTY">
				<Parameters>
					<Parameter
						type="String"
						description="Represents the property information for the selected aspect ratio" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>DISPLAY_ASPECTRATIOPROPERTIES_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="ASPECTRATIOPROPERTIES">
				<Parameters>
					<Parameter
						type="StringArray"
						description="Represents the property information for all aspect ratios." />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>DISPLAY_ASPECTRATIOSELECT_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="ASPECTRATIOSELECT">
				<Parameters>
					<Parameter
						type="Int"
						description="Represents the index of the currently selected aspect ratio." />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>DISPLAY_BRIGHTNESS_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Levels>
				<EvtLevel description="Represents the current brightness level">10</EvtLevel>
			</Levels>
		</Event>
		<Event id="">
			<Evt>DISPLAY_COLOR_EVENT</Evt>
			<Notes>Represents the current color level</Notes>
			<Levels>
				<EvtLevel>11</EvtLevel>
			</Levels>
		</Event>
		<Event id="">
			<Evt>DISPLAY_CONTRAST_EVENT</Evt>
			<Notes>Represents the current contrast level</Notes>
			<Levels>
				<EvtLevel>12</EvtLevel>
			</Levels>
		</Event>
		<Event id="">
			<Evt>DISPLAY_SHARPNESS_EVENT</Evt>
			<Notes>Represents the current sharpness level</Notes>
			<Levels>
				<EvtLevel>13</EvtLevel>
			</Levels>
		</Event>
		<Event id="">
			<Evt>DISPLAY_TINT_EVENT</Evt>
			<Notes>Represents the current tint level</Notes>
			<Levels>
				<EvtLevel>14</EvtLevel>
			</Levels>
		</Event>
		<!-- <Event id=""> -->
		<!-- <Evt>DISPLAY_VIDEOTYPE_EVENT</Evt> -->
		<!-- <Notes>TODO: DLJ</Notes> -->
		<!-- <EventResponse resp="VIDEOTYPE"> -->
		<!-- <Parameters> -->
		<!-- <Parameter type="String" description="Represents the current video type" /> -->
		<!-- </Parameters> -->
		<!-- </EventResponse> -->
		<!-- </Event> -->
		<!-- <Event id=""> -->
		<!-- <Evt>DISPLAY_ACTIVEWINDOW_EVENT</Evt> -->
		<!-- <Notes>TODO: DLJ</Notes> -->
		<!-- <EventResponse resp="ACTIVEWINDOW"> -->
		<!-- <Parameters> -->
		<!-- <Parameter type="String" description="Represents the current mult-screen select status" /> -->
		<!-- </Parameters> -->
		<!-- </EventResponse> -->
		<!-- </Event> -->
		<Event id="">
			<Evt>DISPLAY_PICTUREMUTE_EVENT</Evt>
			<Notes>Represents the current picture mute status</Notes>
			<Channels>
				<EvtChan type="Boolean">211</EvtChan>
			</Channels>
		</Event>
		<Event id="">
			<Evt>DISPLAY_FREEZE_EVENT</Evt>
			<Notes>Represents the current freeze status</Notes>
			<Channels>
				<EvtChan type="Boolean">214</EvtChan>
			</Channels>
		</Event>
		<Event id="">
			<Evt>DISPLAY_PIP_EVENT</Evt>
			<Notes>Represents the current PIP status</Notes>
			<Channels>
				<EvtChan type="Boolean">195</EvtChan>
			</Channels>
		</Event>
	</Component>
	<Component id="Gain">
    <Channel id="GAIN_UP" type="Ramping">
      <Chan>140</Chan>
      <OnAPI>[setGainRamp(java.lang.String)]</OnAPI>
      <OffAPI>[setGainRamp(java.lang.String)]</OffAPI>
      <Notes>GAIN_UP Ramping Channel: Gain is ramped up while channel is
				active</Notes>
    </Channel>
    <!--<Channel id="GAIN_UP_FB" type="Feedback">
      <Chan>140</Chan>
      <OnAPI></OnAPI>
      <OffAPI></OffAPI>
      <Notes>GAIN_UP_FB Feedback Channel: Gain is ramping up while channel
				is on</Notes>
    </Channel>-->
    <Channel id="GAIN_DN" type="Ramping">
      <Chan>141</Chan>
      <OnAPI>[setGainRamp(java.lang.String)]</OnAPI>
      <OffAPI>[setGainRamp(java.lang.String)]</OffAPI>
      <Notes>GAIN_DN Ramping Channel: Gain is ramped down while channel is
				active</Notes>
    </Channel>
    <!--<Channel id="GAIN_DN_FB" type="Feedback">
      <Chan>141</Chan>
      <OnAPI></OnAPI>
      <OffAPI></OffAPI>
      <Notes>GAIN_DN_FB Feedback Channel: Gain is ramping down while
				channel is on</Notes>
    </Channel>-->
    <Channel id="GAIN_MUTE_ON" type="Discrete">
      <Chan>143</Chan>
      <OnAPI>[setGainMuteOn(boolean)]</OnAPI>
      <OffAPI>[setGainMuteOn(boolean)]</OffAPI>
      <Notes>GAIN_MUTE_ON Discrete Function Channel: Gain mute is on while
				channel is active</Notes>
    </Channel>
    <!--<Channel id="GAIN_MUTE_FB" type="Feedback">
      <Chan>143</Chan>
      <OnAPI></OnAPI>
      <OffAPI></OffAPI>
      <Notes>GAIN_MUTE_FB Feedback Channel: Gain is muted if channel is on</Notes>
    </Channel>-->
    <Channel id="GAIN_CYCLE_MUTE" type="Momentary">
      <Chan>144</Chan>
      <OnAPI>[cycleGainMute()]</OnAPI>
      <OffAPI></OffAPI>
      <Notes>GAIN_CYCLE_MUTE Momentary Function Channel: Cycle gain mute
				when channel is activated</Notes>
    </Channel>
    <Level id="GAIN_LVL">
      <Lvl>5</Lvl>
      <API>[setGain(int)]</API>
      <Notes>GAIN_LVL Set gain, range is 0-255</Notes>
      <Range dataType="integer">
        <Min>0</Min>
        <Max>255</Max>
      </Range>
    </Level>
    <Event id="">
      <Evt>GAIN_GAINMUTE_EVENT</Evt>
      <Notes></Notes>
      <Channels>
        <Chan type="Boolean" description="Gain Mute On">143</Chan>
      </Channels>
    </Event>
    <Event id="">
      <Evt>GAIN_GAINRAMP_EVENT</Evt>
      <Notes></Notes>
      <Channels>
        <Chan description="Gain Ramp Up On">140</Chan>
        <Chan description="Gain Ramp Down On">141</Chan>
      </Channels>
    </Event>
    <Event id="">
      <Evt>GAIN_GAIN_EVENT</Evt>
      <Notes></Notes>
      <Levels>
        <Lvl type="integer" description="Gain value">5</Lvl>
      </Levels>
    </Event>
  </Component>
  
	<Component id="HVAC">
		<Channel
			id="HVAC_FAN"
			type="Momentary">
			<Chan>213</Chan>
			<OnAPI>cycleFanState()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle the fan state when channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_HUMIDIFY_STATE"
			type="Momentary">
			<Chan>217</Chan>
			<OnAPI>cycleHumidityState()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle the humidity state when channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_STATE"
			type="Momentary">
			<Chan>218</Chan>
			<OnAPI>cycleHVACState()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle the HVAC state when channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_COOL_DN"
			type="Momentary">
			<Chan>141</Chan>
			<OnAPI>decrementCoolSetpoint()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Decrement the cool setpoint when channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_DEHUMIDIFY_DN"
			type="Momentary">
			<Chan>151</Chan>
			<OnAPI>decrementDehumidifySetpoint()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Decrement the dehumidify setpoint when channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_HEAT_DN"
			type="Momentary">
			<Chan>144</Chan>
			<OnAPI>decrementHeatSetpoint()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Decrement the heat setpoint when channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_HUMIDIFY_DN"
			type="Momentary">
			<Chan>149</Chan>
			<OnAPI>decrementHumdidifySetpoint()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Decrement the humidify setpoint when channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_COOL_UP"
			type="Momentary">
			<Chan>140</Chan>
			<OnAPI>incrementCoolSetpoint()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Increment the cool setpoint when channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_DEHUMIDIFY_UP"
			type="Momentary">
			<Chan>150</Chan>
			<OnAPI>incrementDehumidifySetpoint()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Increment the dehumidify setpoint when channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_HEAT_UP"
			type="Momentary">
			<Chan>143</Chan>
			<OnAPI>incrementHeatSetpoint()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Increment the heat setpoint when channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_HUMIDIFY_UP"
			type="Momentary">
			<Chan>148</Chan>
			<OnAPI>incrementHumdidifySetpoint()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Increment the humidify setpoint when channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_FAN_ON"
			type="Discrete">
			<Chan>214</Chan>
			<OnAPI>setFanState(ON)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Discrete Function: Fan state is on while channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_FAN_AUTO"
			type="Discrete">
			<Chan>215</Chan>
			<OnAPI>setFanState(AUTO)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Discrete Function: Fan state is auto while channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_FAN_AUTO_FB"
			type="Feedback">
			<Chan>215</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Channel: Fan state is Auto while channel is on.</Notes>
		</Channel>
		<Channel
			id="HVAC_HOLD_ON"
			type="Discrete">
			<Chan>211</Chan>
			<OnAPI>setHoldOn()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Discrete Function: Thermostat hold mode is on while channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_HUMIDIFY_AUTO"
			type="Momentary">
			<Chan>228</Chan>
			<OnAPI>setHumidifyState(AUTO)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Humidity state is auto while channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_DEHUMIDIFY"
			type="Momentary">
			<Chan>229</Chan>
			<OnAPI>setHumidifyState(DEHUMIDIFY)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Humidity state is dehumidify while channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_HUMIDIFY"
			type="Momentary">
			<Chan>230</Chan>
			<OnAPI>setHumidifyState(HUMIDIFY)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Humidity state is humidify while channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_HUMIDIFY_OFF"
			type="Momentary">
			<Chan>231</Chan>
			<OnAPI>setHumidifyState(OFF)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Humidity state is off while channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_HUMIDIFY_OFF_FB"
			type="Feedback">
			<Chan>231</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Channel: Humidity state change.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_DEHUMIDIFING_FB"
			type="Feedback">
			<Chan>232</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Channel: Humidity status change.
			</Notes>
		</Channel>
	<Channel
			id="HVAC_HUMIDIFING_FB"
			type="Feedback">
			<Chan>233</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Channel: Humidity status change.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_AUTO"
			type="Momentary">
			<Chan>219</Chan>
			<OnAPI>setHVACState(AUTO)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: HVAC state is auto while channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_COOL"
			type="Momentary">
			<Chan>220</Chan>
			<OnAPI>setHVACState(COOL)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: HVAC state is cool while channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_HEAT"
			type="Momentary">
			<Chan>221</Chan>
			<OnAPI>setHVACState(HEAT)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: HVAC state is heat while channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_OFF"
			type="Momentary">
			<Chan>222</Chan>
			<OnAPI>setHVACState(OFF)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: HVAC state is off while channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_EHEAT"
			type="Momentary">
			<Chan>223</Chan>
			<OnAPI>setHVACState(EMERGENCY_HEAT)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: HVAC state is emergency heat while channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_LOCK_ON"
			type="Discrete">
			<Chan>212</Chan>
			<OnAPI>setLockOn(state)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Discrete Function: Thermostat is locked while channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_FAN_ON_FB"
			type="Feedback">
			<Chan>214</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Function: Fan state is on while channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_FAN_STATUS_FB"
			type="Feedback">
			<Chan>216</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Channel: Fan status is on when channel is on.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_HOLD_FB"
			type="Feedback">
			<Chan>211</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Function: Thermostat hold mode is on while channel is activated.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_HUMIDIFY_AUTO_FB"
			type="Feedback">
			<Chan>228</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Function: Humidify state change to AUTO.</Notes>
		</Channel>
		<Channel
			id="HVAC_DEHUMIDIFY_FB"
			type="Feedback">
			<Chan>229</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Function: Humidify state change to DEHUMIDIFY.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_HUMIDIFY_FB"
			type="Feedback">
			<Chan>230</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Function: Humidify state change to HUMIDIFY.</Notes>
		</Channel>
		<Channel
			id="HVAC_AUTO_FB"
			type="Feedback">
			<Chan>219</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Function: HVAC state change to AUTO.</Notes>
		</Channel>
		<Channel
			id="HVAC_COOL_FB"
			type="Feedback">
			<Chan>220</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Function: HVAC state change to COOL.</Notes>
		</Channel>
		<Channel
			id="HVAC_HEAT_FB"
			type="Feedback">
			<Chan>221</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Function: HVAC state change to HEAT.</Notes>
		</Channel>
		<Channel
			id="HVAC_OFF_FB"
			type="Feedback">
			<Chan>222</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Function: HVAC state change to OFF.</Notes>
		</Channel>
		<Channel
			id="HVAC_EHEAT_FB"
			type="Feedback">
			<Chan>223</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Function: HVAC state change to EMERGENCY_HEAT.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_COOLING_FB"
			type="Feedback">
			<Chan>224</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Function: HVAC status change to COOL.</Notes>
		</Channel>
		<Channel
			id="HVAC_HEATING_FB"
			type="Feedback">
			<Chan>225</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Function: HVAC status change to HEAT.</Notes>
		</Channel>
		<Channel
			id="HVAC_COOLING2_FB"
			type="Feedback">
			<Chan>226</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Function: HVAC status change to COOL_2.</Notes>
		</Channel>
		<Channel
			id="HVAC_EHEATING_FB"
			type="Feedback">
			<Chan>227</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Function: HVAC status change to EMERGENCY_HEAT.
			</Notes>
		</Channel>
		<Channel
			id="HVAC_LOCK_FB"
			type="Feedback">
			<Chan>212</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Function: Thermostat is locked while channel is on.
			</Notes>
		</Channel>
		<Level id="HVAC_COOL_LVL">
			<Lvl>31</Lvl>
			<API>setCoolSetpoint(int)</API>
			<Notes>Set the cool setpoint, value is in degrees C or F depending on temperature scale.
			</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>

		<Level id="HVAC_COOL_LVL_FB">
			<Lvl>31</Lvl>
			<Notes>Feedback level indicating the cool setpoint changed
			</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="HVAC_DEHUMIDIFY_LVL">
			<Lvl>38</Lvl>
			<API>setDehumidifySetpoint(int)</API>
			<Notes>Set the dehumidify setpoint, value is in percent.</Notes>
			<Range dataType="integer">
				<Min>1</Min>
				<Max>100</Max>
			</Range>
		</Level>
		<Level id="HVAC_DEHUMIDIFY_LVL_FB">
			<Lvl>38</Lvl>
			<Notes>Feedback level indicating the dehumidify setpoint changed</Notes>
			<Range dataType="integer">
				<Min>1</Min>
				<Max>100</Max>
			</Range>
		</Level>
		<Level id="HVAC_HEAT_LVL">
			<Lvl>32</Lvl>
			<API>setHeatSetpoint(int)</API>
			<Notes>Set the heat setpoint, value is in degrees C or F depending on temperature scale.
			</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="HVAC_HEAT_LVL_FB">
			<Lvl>32</Lvl>
			<Notes>Feedback level indicating the heat setpoint changed.
			</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="HVAC_INDOOR_TEMP_LVL_FB">
			<Lvl>33</Lvl>
			<Notes>Feedback level indicating indoor temperature changed, value is in degrees C or F depending on temperature scale
			</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="HVAC_OUTDOOR_TEMP_LVL_FB">
			<Lvl>34</Lvl>
			<Notes>Feedback level indicating outdoor temperature changed, value is in degrees C or F depending on temperature scale
			</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="HVAC_INDOOR_HUMID_LVL_FB">
			<Lvl>35</Lvl>
			<API>setHeatSetpoint(int)</API>
			<Notes>Feedback level indicating indoor humidity changed, value is in percent
			</Notes>
			<Range dataType="integer">
				<Min>1</Min>
				<Max>100</Max>
			</Range>
		</Level>
		<Level id="HVAC_OUTDOOR_HUMID_LVL_FB">
			<Lvl>36</Lvl>
			<Notes>Feedback level indicating outdoor humidity changed, value is in percent
			</Notes>
			<Range dataType="integer">
				<Min>1</Min>
				<Max>100</Max>
			</Range>
		</Level>
		<Level id="HVAC_HUMIDIFY_LVL">
			<Lvl>37</Lvl>
			<API>setHeatSetpoint(int)</API>
			<Notes>Set the humidify setpoint, value is in percent.</Notes>
			<Range dataType="integer">
				<Min>1</Min>
				<Max>100</Max>
			</Range>
		</Level>
		<Level id="HVAC_HUMIDIFY_LVL_FB">
			<Lvl>37</Lvl>
			<Notes>Feedback level indicating the humidify setpoint changed</Notes>
			<Range dataType="integer">
				<Min>1</Min>
				<Max>100</Max>
			</Range>
		</Level>
		<Command id="GETHVACHUMID_CM">
			<Cmd>?HVACHUMID</Cmd>
			<API>getHumidifyState()</API>
			<Notes>
			?HVACHUMID -
			Query for the humidify state.
			Responds with:
			HVACHUMID-&lt;state&gt;
			</Notes>
			<CmdResponse>HVACHUMID</CmdResponse>
		</Command>
		<Command id="GETHVACHUMIDSTATUS_CM">
			<Cmd>
			?HVACHUMIDSTATUS</Cmd>
			<API>getHumidifyStatus()</API>
			<Notes>
			?HVACHUMIDSTATUS -
			Query for the humidify status.
			Responds with:
			HVACHUMIDSTATUS-&lt;status&gt;</Notes>
			<CmdResponse>HVACHUMIDSTATUS</CmdResponse>
		</Command>
		<Command id="GETHVACSCALE_CM">
			<Cmd>?HVACSCALE</Cmd>
			<API>getTemperatureScale()</API>
			<Notes>
			?HVACSCALE -
			Query for the temperature scale.
			Responds with:
			HVACSCALE-&lt;scale&gt;
			</Notes>
			<CmdResponse>HVACSCALE</CmdResponse>
		</Command>
		<Command id="SETHVACHUMID_CM">
			<Cmd>HVACHUMID</Cmd>
			<API>setHumidifyState()</API>
			<Notes>HVACHUMID Set the humidify state, HVACHUMID-&lt;state&gt; </Notes>
			<CmdResponse>HVACHUMID</CmdResponse>
		</Command>
		<Command id="SETHVACSCALE_CM">
			<Cmd>HVACSCALE</Cmd>
			<API>setTemperatureScale()</API>
			<Notes>
			HVACSCALE -
			Set the temperature scale, HVACSCALE-&lt;scale&gt; </Notes>
			<CmdResponse>HVACSCALE</CmdResponse>
		</Command>
		<Event id="">
			<Evt>HVAC_HVACHUMID_EVENT</Evt>
			<Notes>Humidify state changed, &lt;state&gt; is OFF,HUMIDIFY, DEHUMIDIFY,AUTO</Notes>
			<EventResponse resp="HVACHUMID">
				<Parameters>
					<Parameter
						type="String"
						description="Represents the current humidify state" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>HVAC_HVACHUMIDSTATUS_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="HVACHUMIDSTATUS">
				<Parameters>
					<Parameter
						type="String"
						description="Represents the current humidify status" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>HVAC_HVACSCALE_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="HVACSCALE">
				<Parameters>
					<Parameter
						type="String"
						description="Represents the current temperature scale" />
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="DocumentCamera">
		<Channel
			id="DOCCAM_LIGHT"
			type="Momentary">
			<Chan>176</Chan>
			<OnAPI>cycleLight()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle lights when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="DOCCAM_LOWER_LIGHT_ON"
			type="Discrete">
			<Chan>197</Chan>
			<OnAPI>setLowerLightOn(boolean)</OnAPI>
			<OffAPI>setLowerLightOn(boolean)</OffAPI>
			<Notes>TODO: DLJ</Notes>
		</Channel>
		<Channel
			id="DOCCAM_UPPER_LIGHT_ON"
			type="Discrete">
			<Chan>198</Chan>
			<OnAPI>setUpperLightOn(boolean)</OnAPI>
			<OffAPI>setUpperLightOn(boolean)</OffAPI>
			<Notes>TODO: DLJ</Notes>
		</Channel>
		<Event id="">
			<Evt>DOCUMENTCAMERA_LOWERLIGHT_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Channels>
				<EvtChan
					type="Boolean"
					description="Lower Light On">197</EvtChan>
			</Channels>
		</Event>
		<Event id="">
			<Evt>DOCUMENTCAMERA_UPPERLIGHT_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Channels>
				<EvtChan
					type="Boolean"
					description="Upper Light On">197</EvtChan>
			</Channels>
		</Event>
	</Component>
	
	<Component id="IODevice">
		<Command id="GETIOCHANNELCOUNT_CM">
			<Cmd>?IOCHANNELCOUNT</Cmd>
			<API>getIOChannelCount()</API>
			<Notes>
			?IOCHANNELCOUNT - 
			Query for the number of channels on an IO device. 
			Responds with:
			IOCHANNELCOUNT-&lt;count&gt;.
			</Notes>
			<CmdResponse>IOCHANNELCOUNT</CmdResponse>
		</Command>
		<Command id="GETIOCHANNELDIRECTION_CM">
			<Cmd>?IOCHANNELDIRECTION</Cmd>
			<API>getIOChannelDirection(io-chan)</API>
			<Notes>
			?IOCHANNELDIRECTION-&lt;io-chan&gt; - 
			Query for direction of the I/O channel.
			Where: 
			&lt;io-chan&gt; is the integer channel number. 
			Responds with:
			IOCHANNELDIRECTION-&lt;direction&gt;
			Where:
			direction is INPUT or OUTPUT.</Notes>
			<CmdResponse>IOCHANNELDIRECTION</CmdResponse>
		</Command>
		<Command id="GETIOCHANNELINPUTSENSE_CM">
			<Cmd>?IOCHANNELINPUTSENSE</Cmd>
			<API>getIOChannelInputSense(io-chan)</API>
			<Notes>
			?IOCHANNELINPUTSENSE-&lt;io-chan&gt; - 
			Query for input sense of the I/O channel. 
			Where:
			&lt;io-chan&gt; is the integer channel number. 
			Responds with:
			IOCHANNELINPUTSENSE-&lt;sense&gt; 
			Where:
			sense is LOW or HIGH.</Notes>
			<CmdResponse>IOCHANNELINPUTSENSE</CmdResponse>
		</Command>
		<Command id="GETIOCHANNELSTATE_CM">
			<Cmd>?IOCHANNELSTATE</Cmd>
			<API>getIOChannelState(io-chan)</API>
			<Notes>
			?IOCHANNELSTATE-&lt;io-chan&gt; - 
			Query for state of the I/O channel.
			Where:
			&lt;io-chan&gt; is the integer channel number. 
			Responds with:
			IOCHANNELSTATE-&lt;state&gt;
			Where:
			state is ON or OFF.
			</Notes>
			<CmdResponse>IOCHANNELSTATE</CmdResponse>
		</Command>
		<Command id="SETIOCHANNELDIRECTION_CM">
			<Cmd>IOCHANNELDIRECTION</Cmd>
			<API>setIOChannelDirection(io-chan,io-dir)</API>
			<Notes>
			IOCHANNELDIRECTION-&lt;io-chan&gt;,&lt;io-dir&gt; - 
			Sets the I/O channel direction. 
			Where:
			&lt;io-chan&gt; is the integer channel number and &lt;io-dir&gt; is INPUT or OUTPUT.
			</Notes>
		</Command>
		<Command id="SETIOCHANNELINPUTSENSE_CM">
			<Cmd>IOCHANNELINPUTSENSE</Cmd>
			<API>setIOChannelInputSense(io-chan,io-sense)</API>
			<Notes>
			IOCHANNELINPUTSENSE-&lt;io-chan&gt;,&lt;io-sense&gt; - 
			Sets the I/O channel input sense. 
			Where:
			&lt;io-chan&gt; is the integer channel number and &lt;io-sense&gt; is HIGH or LOW.</Notes>
		</Command>
		<Command id="SETIOCHANNELSTATE_CM">
			<Cmd>IOCHANNELSTATE</Cmd>
			<API>setIOChannelState(io-chan,io-state)</API>
			<Notes>
			IOCHANNELSTATE-&lt;io-chan&gt;,&lt;io-state&gt; - 
			Sets the I/O channel input sense.
			Where:
			&lt;io-chan&gt; is the integer channel number and &lt;io-state&gt; is ON or OFF.</Notes>
		</Command>
		<Event id="">
			<Evt>IODEVICE_IOCHANNELCOUNT_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="IOCHANNELCOUNT" description="IOCHANNELCOUNT-&lt;count&gt; - Response to ?IOCHANNELCOUNT." >
				<Parameters>
					<Parameter
						type="Int"
						description="count - is an integer value." />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>IODEVICE_IOCHANNELDIRECTION_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="IOCHANNELDIRECTION" description="IOCHANNELDIRECTION-&lt;io-chan&gt;,&lt;io-dir&gt; - Response to ?IOCHANNELDIRECTION." >
				<Parameters>
					<Parameter
						type="Int"
						description="io-chan - The integer channel number." />
					<Parameter
						type="String"
						description="io-dir - is INPUT or OUTPUT." />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>IODEVICE_IOCHANNELINPUTSENSE_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="IOCHANNELINPUTSENSE" description="IOCHANNELINPUTSENSE-&lt;io-chan&gt;,&lt;sense&gt; - Response to ?IOCHANNELINPUTSENSE." >
				<Parameters>
					<Parameter
						type="Int"
						description="io-chan - The integer channel number." />
					<Parameter
						type="String"
						description="sense - is HIGH or LOW." />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>IODEVICE_IOCHANNELSTATE_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="IOCHANNELSTATE" description="IOCHANNELSTATE-&lt;io-chan&gt;,&lt;state&gt; - Response to ?IOCHANNELSTATE." >
				<Parameters>
					<Parameter
						type="Int"
						description="io-chan - The integer channel number." />
					<Parameter
						type="String"
						description="state - is ON or OFF." />
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="KeypadSystem">
		<Command id="GETKEYPADSYSTEMBUTTONSTATE_CM">
			<Cmd>?KEYPADSYSTEMBUTTONSTATE</Cmd>
			<API>getKeypadButtonState(keypadAddress)</API>
			<Notes>
			?KEYPADSYSTEMBUTTONSTATE-&lt;keypadAddress&gt; -
			Query the state of a button, at the given button &lt;address&gt;.
			Responds with: 
			KEYPADSYSTEMBUTTONSTATE-&lt;address&gt;,&lt;state&gt; 
			Where:
			&lt;state&gt; is CLICK, DOUBLE_CLICK, PUSH, or RELEASE.			
			</Notes>
			<CmdResponse>KEYPADSYSTEMBUTTONSTATE</CmdResponse>
		</Command>
		<Command id="GETKEYPADSYSTEMBUTTONSTATUS_CM">
			<Cmd>?KEYPADSYSTEMBUTTONSTATUS</Cmd>
			<API>getKeypadButtonStatus(keypadAddress)</API>
			<Notes>
			?KEYPADSYSTEMBUTTONSTATUS-&lt;keypadAddress&gt; -
			Query the status of a button, at the given button &lt;address&gt;. 
			Responds with:
			KEYPADSYSTEMBUTTONSTATUS-&lt;address&gt;,&lt;status&gt;
			Where:
			&lt;status&gt; is ON, OFF, or BLINK.			
			</Notes>
			<CmdResponse>KEYPADSYSTEMBUTTONSTATUS</CmdResponse>
		</Command>
		<Command id="SETKEYPADSYSTEMBUTTONSTATE_CM">
			<Cmd>KEYPADSYSTEMBUTTONSTATE</Cmd>
			<API>setKeypadButtonState(keypadAddress,buttonState)</API>
			<Notes>KEYPADSYSTEMBUTTONSTATE-&lt;keypadAddress&gt;,&lt;buttonState&gt; -
			Set the state of a button, at the given button &lt;address&gt;,
			for the keypad at index/port, to a button state of CLICK,
			DOUBLE_CLICK, PUSH, or RELEASE.			
			</Notes>
		</Command>
		<Command id="SETKEYPADSYSTEMBUTTONSTATUS_CM">
			<Cmd>KEYPADSYSTEMBUTTONSTATUS</Cmd>
			<API>setKeypadButtonStatus(keypadAddress,buttonStatus)</API>
			<Notes>KEYPADSYSTEMBUTTONSTATUS-&lt;keypadAddress&gt;,&lt;buttonStatus&gt; -
			Set the status of a button, at the given button &lt;address&gt;,
			for the keypad at index/port. to a button status of ON, OFF or BLINK			
			</Notes>
		</Command>
		<Event id="">
			<Evt>KEYPADSYSTEM_KEYPADSYSTEMBUTTONSTATE_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse 
				resp="KEYPADSYSTEMBUTTONSTATE" 
				description="KEYPADSYSTEMBUTTONSTATE-&lt;keypadAddress&gt;,&lt;buttonState&gt; - 
				State of a button changed at the given button &lt;address&gt;
				Where:
				&lt;state&gt; is CLICK, DOUBLE_CLICK, PUSH or RELEASE." 
			>
				<Parameters>
					<Parameter
						type="String"
						description="keypadAddress - address for the keypad." />
					<Parameter
						type="String"
						description="buttonState - button state of CLICK, DOUBLE_CLICK, PUSH or RELEASE." />			
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>KEYPADSYSTEM_KEYPADSYSTEMBUTTONSTATUS_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse 
				resp="KEYPADSYSTEMBUTTONSTATUS" 
				description="KEYPADSYSTEMBUTTONSTATUS-&lt;keypadAddress&gt;,&lt;buttonStatus&gt; - 
				Status of a button changed at the given button &lt;address&gt;
				Where:
				&lt;status&gt; is ON, OFF, or BLINK." 
			>
				<Parameters>
					<Parameter
						type="String"
						description="keypadAddress - address for the keypad." />
					<Parameter
						type="String"
						description="buttonStatus - button status of ON, OFF or BLINK." />			
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="Lens">
		<Channel
			id="ZOOM_OUT"
			type="Ramping">
			<Chan>158</Chan>
			<OnAPI>setZoomRamp(java.lang.String)</OnAPI>
			<OffAPI>setZoomRamp(java.lang.String)</OffAPI>
			<Notes>Ramping Function: Zoom is ramped out (wide) while channel is active
			</Notes>
		</Channel>
		<Channel
			id="ZOOM_IN"
			type="Ramping">
			<Chan>159</Chan>
			<OnAPI>setZoomRamp(java.lang.String)</OnAPI>
			<OffAPI>setZoomRamp(java.lang.String)</OffAPI>
			<Notes>Ramping Function: Zoom is ramped in (tele) while channel is active
			</Notes>
		</Channel>
		<Channel
			id="FOCUS_NEAR"
			type="Ramping">
			<Chan>160</Chan>
			<OnAPI>setFocusRamp(java.lang.String)</OnAPI>
			<OffAPI>setFocusRamp(java.lang.String)</OffAPI>
			<Notes>Ramping Function: Focus is ramped near while channel is active
			</Notes>
		</Channel>
		<Channel
			id="FOCUS_FAR"
			type="Ramping">
			<Chan>161</Chan>
			<OnAPI>setFocusRamp(java.lang.String)</OnAPI>
			<OffAPI>setFocusRamp(java.lang.String)</OffAPI>
			<Notes>Ramping Function: Focus is ramped far while channel is active
			</Notes>
		</Channel>
		<Channel
			id="AUTO_FOCUS_ON"
			type="Discrete">
			<Chan>162</Chan>
			<OnAPI>setAutoFocus(boolean)</OnAPI>
			<OffAPI>setAutoFocus(boolean)</OffAPI>
			<Notes>Discrete Function: Auto focus is on while channel is active
			</Notes>
		</Channel>
		<Channel
			id="AUTO_IRIS_ON"
			type="Discrete">
			<Chan>163</Chan>
			<OnAPI>setAutoIris(boolean)</OnAPI>
			<OffAPI>setAutoIris(boolean)</OffAPI>
			<Notes>Discrete Function: Auto iris is on while channel is active
			</Notes>
		</Channel>
		<Channel
			id="AUTO_FOCUS"
			type="Momentary">
			<Chan>172</Chan>
			<OnAPI>cycleAutoFocus()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle auto focus when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="AUTO_IRIS"
			type="Momentary">
			<Chan>173</Chan>
			<OnAPI>cycleAutoIris()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle auto iris when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="IRIS_OPEN"
			type="Ramping">
			<Chan>174</Chan>
			<OnAPI>setIrisRamp(java.lang.String)</OnAPI>
			<OffAPI>setIrisRamp(java.lang.String)</OffAPI>
			<Notes>Ramping Function: Iris is ramped open while channel is active
			</Notes>
		</Channel>
		<Channel
			id="IRIS_CLOSE"
			type="Ramping">
			<Chan>175</Chan>
			<OnAPI>setIrisRamp(java.lang.String)</OnAPI>
			<OffAPI>setIrisRamp(java.lang.String)</OffAPI>
			<Notes>Ramping Function: Iris is ramped closed while channel is active
			</Notes>
		</Channel>
		<Level id="ZOOM_LVL">
			<Lvl>15</Lvl>
			<API>setZoom(int)</API>
			<Notes>Set zoom position (0=out/Wide)</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="FOCUS_LVL">
			<Lvl>16</Lvl>
			<API>setFocus(int)</API>
			<Notes>Set focus position (0=near)</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="IRIS_LVL">
			<Lvl>17</Lvl>
			<API>setIris(int)</API>
			<Notes>Set iris position (0=closed)</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="ZOOM_SPEED_LVL">
			<Lvl>18</Lvl>
			<API>setZoomSpeed(int)</API>
			<Notes>Set zoom speed (0=slow)</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="FOCUS_SPEED_LVL">
			<Lvl>19</Lvl>
			<API>setFocusSpeed(int)</API>
			<Notes>Set focus speed (0=slow)</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="IRIS_SPEED_LVL">
			<Lvl>20</Lvl>
			<API>setIrisSpeed(int)</API>
			<Notes>Set iris speed (0=slow)</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Event id="">
			<Evt>LENS_AUTOFOCUS_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Channels>
				<EvtChan
					type="Boolean"
					description="Represents the current Auto Focus status">162</EvtChan>
			</Channels>
		</Event>
		<Event id="">
			<Evt>LENS_AUTOIRIS_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Channels>
				<EvtChan
					type="Boolean"
					description="Represents the current Auto Iris status">163</EvtChan>
			</Channels>
		</Event>
		<Event id="">
			<Evt>LENS_FOCUS_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Levels>
				<EvtLevel
					type="integer"
					description="Represents the current focus setting where 0 represents near focus and 255 represents far focus">16</EvtLevel>
			</Levels>
		</Event>
		<Event id="">
			<Evt>LENS_FOCUSRAMP_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Channels>
				<EvtChan
					type="boolean"
					description="Focus Ramp Far">161</EvtChan>
				<EvtChan
					type="boolean"
					description="Focus Ramp Near">160</EvtChan>
			</Channels>
		</Event>
		<Event id="">
			<Evt>LENS_FOCUSSPEED_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Levels>
				<EvtLevel
					type="integer"
					description="Represents the focus speed, where 0=slowest speed and 255=fastest speed">19</EvtLevel>
			</Levels>
		</Event>
		<Event id="">
			<Evt>LENS_IRIS_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Levels>
				<EvtLevel
					type="integer"
					description="Represents the current iris setting, where 0 represents a fully closed iris and 255 represents a fully open iris">17</EvtLevel>
			</Levels>
		</Event>
		<Event id="">
			<Evt>LENS_IRISRAMP_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Channels>
				<EvtChan
					type="boolean"
					description="Iris Ramp Open">174</EvtChan>
				<EvtChan
					type="boolean"
					description="Iris Ramp Close">175</EvtChan>
			</Channels>
		</Event>
		<Event id="">
			<Evt>LENS_IRISSPEED_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Levels>
				<EvtLevel
					type="integer"
					description="Represents the iris speed, where 0=slowest speed and 255=fastest speed">20</EvtLevel>
			</Levels>
		</Event>
		<Event id="">
			<Evt>LENS_ZOOM_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Levels>
				<EvtLevel
					type="integer"
					description="Represents the current zoom setting, where 0 represents the widest zoom the camera supports and 255 represents the nearest zoom the camera supports (telephoto)">15</EvtLevel>
			</Levels>
		</Event>
		<Event id="">
			<Evt>LENS_ZOOMRAMP_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Channels>
				<EvtChan
					type="boolean"
					description="Zoom Ramp In">159</EvtChan>
				<EvtChan
					type="boolean"
					description="Zoom Ramp Out">158</EvtChan>
			</Channels>
		</Event>
		<Event id="">
			<Evt>LENS_ZOOMSPEED_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Levels>
				<EvtLevel
					type="integer"
					description="Represents the zoom speed, where 0=slowest speed and 255=fastest speed">18</EvtLevel>
			</Levels>
		</Event>
	</Component>
	<Component id="LightSystem">
		<Command id="CYCLELIGHTSYSTEMSTATE_CM">
			<Cmd>LIGHTSYSTEMSTATE</Cmd>
			<API>cycleLight(address)</API>
			<Notes>
			LIGHTSYSTEMSTATE-&lt;address&gt;,TOGGLE - 
			Cycle the state of a light, at the given light &lt;address&gt;. 
			This command is relevant for light loads and scenes.
			</Notes>
		</Command>
		<Command id="GETLIGHTSYSTEMSTATE_CM">
			<Cmd>?LIGHTSYSTEMSTATE</Cmd>
			<API>isLightOn(address)</API>
			<Notes>
			?LIGHTSYSTEMSTATE-&lt;address&gt; - 
			Query the state of a light, at the given light &lt;address&gt;,
			Responds with:
			LIGHTSYSTEMSTATE-&lt;address&gt;,&lt;state&gt;
			Where:
			&lt;state&gt; is true for ON, or false for OFF. 
			This command is relevant for light loads, presets, and scenes.
			</Notes>
			<CmdResponse>LIGHTSYSTEMSTATE</CmdResponse>
		</Command>
		<Command id="GETLIGHTSYSTEMLEVEL_CM">
			<Cmd>?LIGHTSYSTEMLEVEL</Cmd>
			<API>getLightLevel(address)</API>
			<Notes>
			?LIGHTSYSTEMLEVEL-&lt;address&gt; - 
			LIGHTSYSTEMLEVEL-&lt;address&gt;,&lt;level&gt;".
			Where:
			&lt;level&gt; is 0-255. 
			This command is relevant for light loads only.
			</Notes>
			<CmdResponse>LIGHTSYSTEMLEVEL</CmdResponse>
		</Command>
		<Command id="SETLIGHTSYSTEMLEVELTIME_CM">
			<Cmd>LIGHTSYSTEMLEVEL</Cmd>
			<API>setLightLevel(address,level,time)</API>
			<Notes>
			LIGHTSYSTEMLEVEL-&lt;address&gt;,&lt;level&gt;,&lt;time&gt; - 
			Set the level of a light, at the given light &lt;address&gt;, to a given &lt;level&gt;, ramped over
			the specified &lt;time&gt;.
			Where:
			&lt;level&gt; is 0-255 and &lt;time&gt; is in seconds. 
			This command is relevant for light loads only.			
			</Notes>
		</Command>
		<Command id="SETLIGHTSYSTEMLEVEL_CM">
			<Cmd>LIGHTSYSTEMLEVEL</Cmd>
			<API>setLightLevel(address,level)</API>
			<Notes>
			LIGHTSYSTEMLEVEL-&lt;address&gt;,&lt;level&gt; - 
			Set the level of a light, at the given light &lt;address&gt;, to a given &lt;level&gt;
			Where:
			&lt;level&gt; is 0-255. 
			This command is relevant for light loads only.
			</Notes>
		</Command>
		<Command id="SETLIGHTSYSTEMRAMPDOWN_CM">
			<Cmd>LIGHTSYSTEMRAMP</Cmd>
			<API>setLightLevelRamp(address,DOWN)</API>
			<Notes>
			LIGHTSYSTEMRAMP-&lt;address&gt;,DOWN - 
			Ramp Down a light level, at the given light &lt;address&gt;, until
			LIGHTSYSTEMRAMP-&lt;address&gt;,STOP is sent. 
			This command is relevant for light loads and scenes.			
			</Notes>
		</Command>
		<Command id="SETLIGHTSYSTEMRAMPSTOP_CM">
			<Cmd>LIGHTSYSTEMRAMP</Cmd>
			<API>setLightLevelRamp(address,STOP)</API>
			<Notes>
LIGHTSYSTEMRAMP-&lt;address&gt;,STOP - 
	Stop ramping the light level, at the given light &lt;address&gt;. 
	This command is relevant for light loads and scenes.			
			</Notes>
		</Command>
		<Command id="SETLIGHTSYSTEMRAMPUP_CM">
			<Cmd>LIGHTSYSTEMRAMP</Cmd>
			<API>setLightLevelRamp(address,UP)</API>
			<Notes>
LIGHTSYSTEMRAMP-&lt;address&gt;,UP - 
	Ramp Up a light level, at the given light &lt;address&gt;, until LIGHTSYSTEMRAMP-
	&lt;address&gt;,STOP is sent. 
	This command is relevant for light loads and scenes.			
			</Notes>
		</Command>
		<Command id="SETLIGHTSYSTEMSTATEOFF_CM">
			<Cmd>LIGHTSYSTEMSTATE</Cmd>
			<API>setLightOff(address)</API>
			<Notes>
LIGHTSYSTEMSTATE-&lt;address&gt;,OFF - 
	Set the state of a light OFF, at the given light &lt;address&gt;. 
	This is implemented in base and should not be overridden. 
	This command is relevant for light loads, presets, and scenes.			
			</Notes>
		</Command>
		<Command id="SETLIGHTSYSTEMSTATEON_CM">
			<Cmd>LIGHTSYSTEMSTATE</Cmd>
			<API>setLightOn(address)</API>
			<Notes>
LIGHTSYSTEMSTATE-&lt;address&gt;,ON - 
	Set the state of a light ON, at the given light &lt;address&gt;. 
	This is implemented in base and should not be overridden. 
	This command is relevant for light loads, presets, and scenes.			
			</Notes>
		</Command>
		<Command id="SETLIGHTSYSTEMSTATE_CM">
			<Cmd>LIGHTSYSTEMSTATE</Cmd>
			<API>setLight(address,state)</API>
			<Notes>
			LIGHTSYSTEMSTATE-&lt;address&gt;,&lt;lightstate&gt; - 
			Set the state of a light, at the given light &lt;address&gt;, 
			Where:
			&lt;lightstate&gt; is ON or OFF. 
			This command is relevant for light loads, presets, and scenes.
			</Notes>
		</Command>
		<Event id="">
			<Evt>LIGHTSYSTEM_LIGHTSYSTEMLEVEL_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="LIGHTSYSTEMLEVEL" description="LIGHTSYSTEMLEVEL-&lt;address&gt;,&lt;level&gt; - 
Level of a light changed at the given &lt;address&gt;, where &lt;level&gt; is an integer from 0-255.
Response to ?LIGHTSYSTEMLEVEL." 
			>
				<Parameters>
					<Parameter
						type="String"
						description="address - Light address." />
					<Parameter
						type="Int"
						description="level - Level of the light that changed." />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>LIGHTSYSTEM_LIGHTSYSTEMRAMP_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="LIGHTSYSTEMRAMP" description="LIGHTSYSTEMRAMP-&lt;address&gt;,&lt;control&gt; - 
Light is ramping at the given &lt;address&gt;, where ramp &lt;control&gt; is UP, DOWN, or STOP." 
			>
				<Parameters>
					<Parameter
						type="String"
						description="address - Light address." />
					<Parameter
						type="String"
						description="control - Ramp controls, one of UP, DOWN, or STOP." />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>LIGHTSYSTEM_LIGHTSYSTEMSTATE_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="LIGHTSYSTEMSTATE" description="LIGHTSYSTEMSTATE-&lt;address&gt;,&lt;state&gt; - 
State of a light changed at the given &lt;address&gt;, where &lt;state&gt; is ON or OFF." 
			>
				<Parameters>
					<Parameter
						type="String"
						description="address - Light address." />
					<Parameter
						type="String"
						description="state - Light state, one of ON or OFF." />
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="MediaTransport">
		<Channel
			id="PLAY"
			type="Momentary">
			<Chan>1</Chan>
			<OnAPI>setMediaTransport(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Deck is set to play when the channel is activated
			</Notes>
		</Channel>
		<Channel
			id="STOP"
			type="Momentary">
			<Chan>2</Chan>
			<OnAPI>setMediaTransport(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Deck is set to stop when the channel is activated
			</Notes>
		</Channel>
		<Channel
			id="PAUSE"
			type="Momentary">
			<Chan>3</Chan>
			<OnAPI>setMediaTransport(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Deck is set to pause when the channel is activated
			</Notes>
		</Channel>
		<Channel
			id="FFWD"
			type="Momentary">
			<Chan>4</Chan>
			<OnAPI>setMediaTransport(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Deck is set to next track/chapter when the channel is activated
			</Notes>
		</Channel>
		<Channel
			id="REW"
			type="Momentary">
			<Chan>5</Chan>
			<OnAPI>setMediaTransport(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Deck is set to previous track/chapter when the channel is activated
			</Notes>
		</Channel>
		<Channel
			id="SFWD"
			type="Momentary">
			<Chan>6</Chan>
			<OnAPI>setMediaTransport(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Deck is set to search forward when the channel is activated
			</Notes>
		</Channel>
		<Channel
			id="SREV"
			type="Momentary">
			<Chan>7</Chan>
			<OnAPI>setMediaTransport(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Deck is set to search reverse when the channel is activated
			</Notes>
		</Channel>
		<Channel
			id="RECORD"
			type="Momentary">
			<Chan>8</Chan>
			<OnAPI>setMediaTransport(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Deck is set to record when the channel is activated
			</Notes>
		</Channel>
		<Channel
			id="TAPE_LOADED_FB"
			type="Feedback">
			<Chan>122</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback: Tape is loaded while channel is on</Notes>
		</Channel>
		<Channel
			id="RECORD_LOCK_FB"
			type="Feedback">
			<Chan>123</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback: Tape is record locked while channel is on</Notes>
		</Channel>
		<Channel
			id="SLOW_FWD"
			type="Momentary">
			<Chan>188</Chan>
			<OnAPI>setMediaTransport(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Deck is set to slow forward when the channel is activated
			</Notes>
		</Channel>
		<Channel
			id="SLOW_REV"
			type="Momentary">
			<Chan>189</Chan>
			<OnAPI>setMediaTransport(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Deck is set to slow reverse when the channel is activated
			</Notes>
		</Channel>
		<Channel
			id="SCAN_SPEED"
			type="Momentary">
			<Chan>192</Chan>
			<OnAPI>cycleScanSpeed()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycles the scan speed when the channel is activated
			</Notes>
		</Channel>
		<Channel
			id="FRAME_FWD"
			type="Momentary">
			<Chan>185</Chan>
			<OnAPI>setMediaTransport(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Deck is set to step frame forward when the channel is activated
			</Notes>
		</Channel>
		<Channel
			id="FRAME_REV"
			type="Momentary">
			<Chan>186</Chan>
			<OnAPI>setMediaTransport(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Deck is set to step frame reverse when the channel is activated
			</Notes>
		</Channel>
		<Channel
			id="PLAY_FB"
			type="Feedback">
			<Chan>241</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback: Transport state change</Notes>
		</Channel>
		<Channel
			id="STOP_FB"
			type="Feedback">
			<Chan>242</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback: Transport state change</Notes>
		</Channel>
		<Channel
			id="PAUSE_FB"
			type="Feedback">
			<Chan>243</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback: Transport state change</Notes>
		</Channel>
		<Channel
			id="FFWD_FB"
			type="Feedback">
			<Chan>244</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback: Transport state change</Notes>
		</Channel>
		<Channel
			id="REW_FB"
			type="Feedback">
			<Chan>245</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback: Transport state change</Notes>
		</Channel>
		<Channel
			id="SFWD_FB"
			type="Feedback">
			<Chan>246</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback: Transport state change</Notes>
		</Channel>
		<Channel
			id="SREV_FB"
			type="Feedback">
			<Chan>247</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback: Transport state change</Notes>
		</Channel>
		<Channel
			id="RECORD_FB"
			type="Feedback">
			<Chan>248</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback: Transport state change</Notes>
		</Channel>
		<Channel
			id="SLOW_FWD_FB"
			type="Feedback">
			<Chan>249</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback: Transport state change</Notes>
		</Channel>
		<Channel
			id="SLOW_REV_FB"
			type="Feedback">
			<Chan>250</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback: Transport state change</Notes>
		</Channel>
		<Command id="GETTRACKINFO_CM">
			<Cmd>?TRACKINFO</Cmd>
			<API>getTrackInfo()</API>
			<Notes>
			?TRACKINFO -
			Query for the track info.
			Responds with:
			TRACKINFO-&lt;num&gt;,&lt;duration&gt;,&lt;discNumber&gt;
			Where:
			&lt;duration&gt; is a String in the format hh:mm:ss.ff
			</Notes>
			<CmdResponse>TRACKINFO</CmdResponse>
		</Command>
		<Command id="GETTRACKPROPERTIES_CM">
			<Cmd>?TRACKPROPS</Cmd>
			<API>queryTrackProperties()</API>
			<Notes>
			?TRACKPROPS -
			Query for the track properties.
			Responds with multiple:
			TRACKPROP-&lt;key&gt;,&lt;value&gt; 
			commands, one for each key 
			</Notes>
			<CmdResponse>TRACKPROPS</CmdResponse>
		</Command>
		<Command id="GETTRACKPROPERTY_CM">
			<Cmd>?TRACKPROP</Cmd>
			<API>queryTrackProperty(java.lang.String)</API>
			<Notes>
			?TRACKPROPS -
			Query for the track properties.
			Responds with multiple:
			TRACKPROP-&lt;key&gt;,&lt;value&gt; 
			commands, one for each key 
			</Notes>
			<CmdResponse>TRACKPROP</CmdResponse>
		</Command>
		<Command id="SETPLAYPOSITION_CM">
			<Cmd>PLAYPOSITION</Cmd>
			<API></API>
			<Notes>
			PLAYPOSITION-&lt;counter&gt; -
			Set the play position.
			Where: 
			&lt;counter&gt; is a String in the format [-]hh:mm:ss.ff, mm should be 0 &gt;= mm &lt; 60, ss should be 0 &gt;= ss &lt; 60, ff should be valid for the disc type 
			</Notes>
		</Command>
		<Command id="SETTRACKCOUNTERNOTIFICATIONON_CM">
			<Cmd>TRACKCOUNTERNOTIFY</Cmd>
			<API>setTrackCounterNotificationOn(boolean)</API>
			<Notes>
			TRACKCOUNTERNOTIFY-&lt;state&gt; -
			Turn track counter notification on or off.
			Where:
			&lt;state&gt; is 1 or 0</Notes>
		</Command>
		<Command id="SETTAPECOUNTERNOTIFICATION_CM">
			<Cmd>TAPECOUNTERNOTIFY</Cmd>
			<API>setTrackCounterNotificationOn(boolean)</API>
			<Notes>
			TAPECOUNTERNOTIFY-&lt;state&gt; -
			Turn counter notification on or off.
			Where: 
			&lt;state&gt; is 1 or 0
			</Notes>
		</Command>
		<Event id="">
			<Evt>MEDIATRANSPORT_TRACKPROPERTIES_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="TRACKPROPS">
				<Parameters>
					<Parameter
						type="StringArray"
						description="Represents the property information for all media." />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>MEDIATRANSPORT_TRACKPROPERTY_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="TRACKPROP">
				<Parameters>
					<Parameter
						type="String"
						description="Represents the property information for media." />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>MEDIATRANSPORT_MEDIACOUNTER_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="TRACKCOUNTER">
				<Parameters>
					<Parameter type="String" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>MEDIATRANSPORT_TRACKINFO_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="TRACKINFO">
				<Parameters>
					<Parameter type="String" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>MEDIATRANSPORT_MEDIATRANSPORT_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="PLAYPOSITION">
				<Parameters>
					<Parameter type="String" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>MEDIATRANSPORT_TRACKCOUNTERNOTIFICATION_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="TRACKCOUNTERNOTIFY">
				<Parameters>
					<Parameter type="Boolean" />
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="Menu">
		<Channel
			id="DIGIT_0"
			type="Momentary">
			<Chan>10</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button DIGIT_0</Notes>
		</Channel>
		<Channel
			id="DIGIT_1"
			type="Momentary">
			<Chan>11</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button DIGIT_1</Notes>
		</Channel>
		<Channel
			id="DIGIT_2"
			type="Momentary">
			<Chan>12</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button DIGIT_2</Notes>
		</Channel>
		<Channel
			id="DIGIT_3"
			type="Momentary">
			<Chan>13</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button DIGIT_3</Notes>
		</Channel>
		<Channel
			id="DIGIT_4"
			type="Momentary">
			<Chan>14</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button DIGIT_4</Notes>
		</Channel>
		<Channel
			id="DIGIT_5"
			type="Momentary">
			<Chan>15</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button DIGIT_5</Notes>
		</Channel>
		<Channel
			id="DIGIT_6"
			type="Momentary">
			<Chan>16</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button DIGIT_6</Notes>
		</Channel>
		<Channel
			id="DIGIT_7"
			type="Momentary">
			<Chan>17</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button DIGIT_7</Notes>
		</Channel>
		<Channel
			id="DIGIT_8"
			type="Momentary">
			<Chan>18</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button DIGIT_8</Notes>
		</Channel>
		<Channel
			id="DIGIT_9"
			type="Momentary">
			<Chan>19</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button DIGIT_9</Notes>
		</Channel>
		<Channel
			id="MENU_ENTER"
			type="Momentary">
			<Chan>21</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button ENTER</Notes>
		</Channel>
		<Channel
			id="MENU_CANCEL"
			type="Momentary">
			<Chan>43</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button CANCEL</Notes>
		</Channel>
		<Channel
			id="MENU_FUNC"
			type="Momentary">
			<Chan>44</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button MENU_FUNC</Notes>
		</Channel>
		<Channel
			id="MENU_UP"
			type="Momentary">
			<Chan>45</Chan>
			<OnAPI>moveMenuCursor(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Move menu cursor UP</Notes>
		</Channel>
		<Channel
			id="MENU_DN"
			type="Momentary">
			<Chan>46</Chan>
			<OnAPI>moveMenuCursor(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Move menu cursor DOWN</Notes>
		</Channel>
		<Channel
			id="MENU_LT"
			type="Momentary">
			<Chan>47</Chan>
			<OnAPI>moveMenuCursor(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Move menu cursor LEFT</Notes>
		</Channel>
		<Channel
			id="MENU_RT"
			type="Momentary">
			<Chan>48</Chan>
			<OnAPI>moveMenuCursor(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Move menu cursor RIGHT</Notes>
		</Channel>
		<Channel
			id="MENU_SELECT"
			type="Momentary">
			<Chan>49</Chan>
			<OnAPI>selectMenuItem()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Select current menu item</Notes>
		</Channel>
		<Channel
			id="MENU_EXIT"
			type="Momentary">
			<Chan>50</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button EXIT</Notes>
		</Channel>
		<Channel
			id="MENU_UP_LT"
			type="Momentary">
			<Chan>51</Chan>
			<OnAPI>moveMenuCursor(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Move menu cursor UP_LEFT</Notes>
		</Channel>
		<Channel
			id="MENU_UP_RT"
			type="Momentary">
			<Chan>52</Chan>
			<OnAPI>moveMenuCursor(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Move menu cursor UP_RIGHT</Notes>
		</Channel>
		<Channel
			id="MENU_DN_LT"
			type="Momentary">
			<Chan>53</Chan>
			<OnAPI>moveMenuCursor(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Move menu cursor DOWN_LEFT</Notes>
		</Channel>
		<Channel
			id="MENU_DN_RT"
			type="Momentary">
			<Chan>54</Chan>
			<OnAPI>moveMenuCursor(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Move menu cursor DOWN_RIGHT</Notes>
		</Channel>
		<Channel
			id="MENU_VIDEO"
			type="Momentary">
			<Chan>57</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button VIDEO</Notes>
		</Channel>
		<Channel
			id="MENU_THUMBS_DN"
			type="Momentary">
			<Chan>58</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button THUMBS_DOWN</Notes>
		</Channel>
		<Channel
			id="MENU_THUMBS_UP"
			type="Momentary">
			<Chan>59</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button THUMBS_UP</Notes>
		</Channel>
		<Channel
			id="MENU_ACCEPT"
			type="Momentary">
			<Chan>60</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button ACCEPT to answer an incoming call
			</Notes>
		</Channel>
		<Channel
			id="MENU_REJECT"
			type="Momentary">
			<Chan>61</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button REJECT to reject an incoming call
			</Notes>
		</Channel>
		<Channel
			id="MENU_LIVE_TV"
			type="Momentary">
			<Chan>62</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button LIVE_TV</Notes>
		</Channel>
		<Channel
			id="MENU_SLEEP"
			type="Momentary">
			<Chan>63</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button SLEEP</Notes>
		</Channel>
		<Channel
			id="MENU_PPV"
			type="Momentary">
			<Chan>64</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button PPV</Notes>
		</Channel>
		<Channel
			id="MENU_FUNCTION"
			type="Momentary">
			<Chan>65</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button FUNCTION</Notes>
		</Channel>
		<Channel
			id="MENU_SETUP"
			type="Momentary">
			<Chan>66</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button SETUP</Notes>
		</Channel>
		<Channel
			id="MENU_XM"
			type="Momentary">
			<Chan>77</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button XM</Notes>
		</Channel>
		<Channel
			id="MENU_FM"
			type="Momentary">
			<Chan>78</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>MENU_FM Momentary Function: Press menu button FM</Notes>
		</Channel>
		<Channel
			id="MENU_AM"
			type="Momentary">
			<Chan>79</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button AM</Notes>
		</Channel>
		<Channel
			id="MENU_CLEAR"
			type="Momentary">
			<Chan>80</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button CLEAR</Notes>
		</Channel>
		<Channel
			id="MENU_BACK"
			type="Momentary">
			<Chan>81</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button BACK</Notes>
		</Channel>
		<Channel
			id="MENU_FORWARD"
			type="Momentary">
			<Chan>82</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button FORWARD</Notes>
		</Channel>
		<Channel
			id="MENU_ADVANCE"
			type="Momentary">
			<Chan>83</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button ADVANCE</Notes>
		</Channel>
		<Channel
			id="MENU_DIMMER"
			type="Momentary">
			<Chan>84</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button DIMMER</Notes>
		</Channel>
		<Channel
			id="MENU_HOLD"
			type="Momentary">
			<Chan>85</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button HOLD</Notes>
		</Channel>
		<Channel
			id="MENU_LIST"
			type="Momentary">
			<Chan>86</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button LIST</Notes>
		</Channel>
		<Channel
			id="MENU_LT_PAREN"
			type="Momentary">
			<Chan>87</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button LEFT_PAREN</Notes>
		</Channel>
		<Channel
			id="MENU_RT_PAREN"
			type="Momentary">
			<Chan>88</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button RIGHT_PAREN</Notes>
		</Channel>
		<Channel
			id="MENU_UNDERSCORE"
			type="Momentary">
			<Chan>89</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button UNDER_SCORE</Notes>
		</Channel>
		<Channel
			id="MENU_DASH"
			type="Momentary">
			<Chan>90</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button DASH</Notes>
		</Channel>
		<Channel
			id="MENU_ASTERISK"
			type="Momentary">
			<Chan>91</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button ASTERISK</Notes>
		</Channel>
		<Channel
			id="MENU_DOT"
			type="Momentary">
			<Chan>92</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button DOT</Notes>
		</Channel>
		<Channel
			id="MENU_POUND"
			type="Momentary">
			<Chan>93</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button POUND</Notes>
		</Channel>
		<Channel
			id="MENU_COMMA"
			type="Momentary">
			<Chan>94</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button COMMA</Notes>
		</Channel>
		<Channel
			id="MENU_DIAL"
			type="Momentary">
			<Chan>95</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button DIAL</Notes>
		</Channel>
		<Channel
			id="MENU_CONFERENCE"
			type="Momentary">
			<Chan>96</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button CONFERENCE</Notes>
		</Channel>
		<Channel
			id="MENU_DISPLAY"
			type="Momentary">
			<Chan>99</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button DISPLAY</Notes>
		</Channel>
		<Channel
			id="MENU_SUBTITLE"
			type="Momentary">
			<Chan>100</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button SUBTITLE</Notes>
		</Channel>
		<Channel
			id="MENU_INFO"
			type="Momentary">
			<Chan>101</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button INFO</Notes>
		</Channel>
		<Channel
			id="MENU_FAVORITES"
			type="Momentary">
			<Chan>102</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button FAVORITES</Notes>
		</Channel>
		<Channel
			id="MENU_CONTINUE"
			type="Momentary">
			<Chan>103</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button CONTINUE</Notes>
		</Channel>
		<Channel
			id="MENU_RETURN"
			type="Momentary">
			<Chan>104</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button RETURN</Notes>
		</Channel>
		<Channel
			id="MENU_GUIDE"
			type="Momentary">
			<Chan>105</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button GUIDE</Notes>
		</Channel>
		<Channel
			id="MENU_PAGE_UP"
			type="Momentary">
			<Chan>106</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button PAGE_UP</Notes>
		</Channel>
		<Channel
			id="MENU_PAGE_DN"
			type="Momentary">
			<Chan>107</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button PAGE_DOWN</Notes>
		</Channel>
		<Channel
			id="MENU_PROGRAM"
			type="Momentary">
			<Chan>111</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button PROGRAM</Notes>
		</Channel>
		<Channel
			id="MENU_AB_REPEAT"
			type="Momentary">
			<Chan>112</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button AB_REPEAT</Notes>
		</Channel>
		<Channel
			id="MENU_HELP"
			type="Momentary">
			<Chan>113</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button HELP</Notes>
		</Channel>
		<Channel
			id="MENU_TITLE"
			type="Momentary">
			<Chan>114</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button TITLE</Notes>
		</Channel>
		<Channel
			id="MENU_TOP_MENU"
			type="Momentary">
			<Chan>115</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button TOP_MENU</Notes>
		</Channel>
		<Channel
			id="MENU_ZOOM"
			type="Momentary">
			<Chan>116</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button ZOOM</Notes>
		</Channel>
		<Channel
			id="MENU_ANGLE"
			type="Momentary">
			<Chan>117</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button ANGLE</Notes>
		</Channel>
		<Channel
			id="MENU_AUDIO"
			type="Momentary">
			<Chan>118</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button AUDIO</Notes>
		</Channel>
		<Channel
			id="MENU_PREVIEW_INPUT"
			type="Momentary">
			<Chan>129</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button PREVIEW_INPUT</Notes>
		</Channel>
		<Channel
			id="MENU_SEND_INPUT"
			type="Momentary">
			<Chan>130</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button SEND_INPUT</Notes>
		</Channel>
		<Channel
			id="MENU_SEND_GRAPHICS"
			type="Momentary">
			<Chan>131</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button SEND_GRAPHICS</Notes>
		</Channel>
		<Channel
			id="MENU_FLASH"
			type="Momentary">
			<Chan>203</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button FLASH</Notes>
		</Channel>
		<Channel
			id="MENU_RESET"
			type="Momentary">
			<Chan>215</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button RESET</Notes>
		</Channel>
		<Channel
			id="MENU_INSTANT_REPLAY"
			type="Momentary">
			<Chan>218</Chan>
			<OnAPI>pressMenuButton(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Press menu button INSTANT_REPLAY</Notes>
		</Channel>
		<Command id="PRESSMENUBUTTON_CM">
			<Cmd>ALPHA</Cmd>
			<API>pressMenuButton(java.lang.String)</API>
			<Notes>
			TODO: DLJ
			Press menu button</Notes>
		</Command>
	</Component>
	<Component id="Motor">
		<Channel
			id="MOTOR_STOP"
			type="Momentary">
			<Chan>2</Chan>
			<OnAPI>setMotorDirection(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Set Motor direction to stop, causing motor to stop between opened and closed
			</Notes>
		</Channel>
		<Channel
			id="MOTOR_OPEN"
			type="Momentary">
			<Chan>4</Chan>
			<OnAPI>setMotorDirection(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Set Motor direction to open, causing motor to move in the OPEN direction
			</Notes>
		</Channel>
		<Channel
			id="MOTOR_CLOSE"
			type="Momentary">
			<Chan>5</Chan>
			<OnAPI>setMotorDirection(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Set Motor direction to close, causing motor to move in the CLOSE direction
			</Notes>
		</Channel>
		<Level id="MOTOR_POS_LVL">
			<Lvl>6</Lvl>
			<API>setMotorPosition(int)</API>
			<Notes>Recall Motor position, 0 is close, 255 is open</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Event id="">
			<Evt>MOTOR_MOTORDIRECTION_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Channels>
				<EvtChan
					type="boolean"
					description="Motor Stop">2</EvtChan>
				<EvtChan
					type="boolean"
					description="Motor Open">4</EvtChan>
				<EvtChan
					type="boolean"
					description="Motor Close">5</EvtChan>
			</Channels>
		</Event>
		<Event id="">
			<Evt>MOTOR_MOTORPOSITION_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Levels>
				<EvtLevel
					type="integer"
					description="Motor Position">6</EvtLevel>
			</Levels>
		</Event>
	</Component>
	<Component id="PoolSpa">
		<Channel id="POOL_HEAT" type="Momentary">
			<Chan>123</Chan>
			<OnAPI>cyclePoolHeatState()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Cycle Pool heat state when channel
				is activated.
			</Notes>
		</Channel>
		<Channel id="SPA_HEAT" type="Momentary">
			<Chan>124</Chan>
			<OnAPI>cycleSpaHeatState()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Cycle Spa heat state when channel
				is activated.
			</Notes>
		</Channel>
		<Channel id="SPA_JETS" type="Momentary">
			<Chan>125</Chan>
			<OnAPI>cycleSpaJets()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Cycle Spa jets when channel is activated.
			</Notes>
		</Channel>
		<Channel id="POOL_HEAT_DN" type="Momentary">
			<Chan>153</Chan>
			<OnAPI>decrementPoolSetpoint()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Pool setpoint is decremented when channel is activated.
			</Notes>
		</Channel>
		<Channel id="SPA_HEAT_DN" type="Momentary">
			<Chan>155</Chan>
			<OnAPI>decrementSpaSetpoint()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Spa setpoint is decremented when channel is activated.
			</Notes>
		</Channel>
		<Channel id="POOL_HEAT_UP" type="Momentary">
			<Chan>152</Chan>
			<OnAPI>incrementPoolSetpoint()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Pool setpoint is incremented when channel is activated.
			</Notes>
		</Channel>
		<Channel id="SPA_HEAT_UP" type="Momentary">
			<Chan>154</Chan>
			<OnAPI>incrementSpaSetpoint()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Spa setpoint is incremented when channel is activated.
			</Notes>
		</Channel>
		<Channel id="POOL_HEATER" type="Momentary">
			<Chan>175</Chan>
			<OnAPI>setPoolHeatState(HEATER)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Set Pool heat state to heater.
			</Notes>
		</Channel>
		<Channel id="POOL_HEAT_OFF" type="Momentary">
			<Chan>174</Chan>
			<OnAPI>setPoolHeatState(OFF)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Set Pool heat state to off.
			</Notes>
		</Channel>
		<Channel id="POOL_SOLAR" type="Momentary">
			<Chan>176</Chan>
			<OnAPI>setPoolHeatState(SOLAR)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Set Pool heat state to solar.
			</Notes>
		</Channel>
		<Channel id="POOL_SOLAR_PREF" type="Momentary">
			<Chan>177</Chan>
			<OnAPI>setPoolHeatState(SOLAR_PREFERRED)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Set Pool heat state to solar preferred.
			</Notes>
		</Channel>
		<Channel id="POOL_LIGHT_ON" type="Discrete">
			<Chan>172</Chan>
			<OnAPI>setPoolLightOn(state)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Discrete Function Channel: Pool light is on while channel is active.
			</Notes>
		</Channel>
		<Channel id="POOL_PUMP_ON" type="Discrete">
			<Chan>170</Chan>
			<OnAPI>setPoolPumpOn(state)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Discrete Function Channel: Pool pump is on while channel is active.
			</Notes>
		</Channel>
		<Channel id="SPA_BLOWER_ON" type="Discrete">
			<Chan>186</Chan>
			<OnAPI>setSpaBlowerOn(state)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Discrete Function Channel: Spa blower is on while channel is active.
			</Notes>
		</Channel>
		<Channel id="SPA_HEATER" type="Momentary">
			<Chan>179</Chan>
			<OnAPI>setSpaHeatState(HEATER)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Set Spa heat state to heater.
			</Notes>
		</Channel>
		<Channel id="SPA_HEAT_OFF" type="Momentary">
			<Chan>178</Chan>
			<OnAPI>setSpaHeatState(OFF)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Set Spa heat state to off.
			</Notes>
		</Channel>
		<Channel id="SPA_SOLAR" type="Momentary">
			<Chan>180</Chan>
			<OnAPI>setSpaHeatState(SOLAR)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Set Spa heat state to solar.
			</Notes>
		</Channel>
		<Channel id="SPA_SOLAR_PREF" type="Momentary">
			<Chan>181</Chan>
			<OnAPI>setSpaHeatState(SOLAR_PREFERRED)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Set Spa heat state to solar preferred.
			</Notes>
		</Channel>
		<Channel id="SPA_JETS_HI" type="Momentary">
			<Chan>185</Chan>
			<OnAPI>setSpaJets(HIGH)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Set Spa jets to high.
			</Notes>
		</Channel>
		<Channel id="SPA_JETS_LO" type="Momentary">
			<Chan>183</Chan>
			<OnAPI>setSpaJets(LOW)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Set Spa jets to low.
			</Notes>
		</Channel>
		<Channel id="SPA_JETS_MED" type="Momentary">
			<Chan>184</Chan>
			<OnAPI>setSpaJets(MEDIUM)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Set Spa jets to medium.
			</Notes>
		</Channel>
		<Channel id="SPA_JETS_OFF" type="Momentary">
			<Chan>182</Chan>
			<OnAPI>setSpaJets(OFF)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Set Spa jets to off.
			</Notes>
		</Channel>
		<Channel id="SPA_LIGHT_ON" type="Discrete">
			<Chan>173</Chan>
			<OnAPI>setSpaLightOn(state)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Discrete Function Channel: Spa light is on while channel is active.
			</Notes>
		</Channel>
		<Channel id="SPA_PUMP_ON" type="Discrete">
			<Chan>171</Chan>
			<OnAPI>setSpaPumpOn(state)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Discrete Function Channel: Spa pump is on while channel is active.
			</Notes>
		</Channel>	
		<Channel
			id="POOL_HEATER_FB"
			type="Feedback">
			<Chan>175</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Pool heater set to heat state, see state chart.
			</Notes>
		</Channel>
		<Channel
			id="POOL_HEAT_OFF_FB"
			type="Feedback">
			<Chan>174</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Pool heater set to off state, see state chart.
			</Notes>
		</Channel>
		<Channel
			id="POOL_SOLAR_FB"
			type="Feedback">
			<Chan>176</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Pool heater set to solar state, see state chart.
			</Notes>
		</Channel>
		<Channel
			id="POOL_SOLAR_PREF_FB"
			type="Feedback">
			<Chan>177</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Pool heater set to solar preferred state, see state chart.
			</Notes>
		</Channel>
		<Channel
			id="POOL_HEATING_FB"
			type="Feedback">
			<Chan>187</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Pool heater status is heater, see state chart.
			</Notes>
		</Channel>
		<Channel
			id="POOL_HEATING_SOLAR_FB"
			type="Feedback">
			<Chan>188</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Pool heater status is solar, see state chart.
			</Notes>
		</Channel>
		<Channel
			id="POOL_LIGHT_FB"
			type="Feedback">
			<Chan>172</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Pool light is on while channel is active.
			</Notes>
		</Channel>
		<Channel
			id="POOL_PUMP_FB"
			type="Feedback">
			<Chan>170</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Pool pump is on while channel is active.
			</Notes>
		</Channel>
		<Channel
			id="SPA_BLOWER_FB"
			type="Feedback">
			<Chan>186</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Spa blower is on while channel is active.
			</Notes>
		</Channel>
		<Channel
			id="SPA_HEATER_FB"
			type="Feedback">
			<Chan>179</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Spa heater set to heat state, see state chart.
			</Notes>
		</Channel>
		<Channel
			id="SPA_HEAT_OFF_FB"
			type="Feedback">
			<Chan>178</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Spa heater set to off state, see state chart.
			</Notes>
		</Channel>
		<Channel
			id="SPA_SOLAR_FB"
			type="Feedback">
			<Chan>180</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Spa heater set to solar state, see state chart.
			</Notes>
		</Channel>
		<Channel
			id="SPA_SOLAR_PREF_FB"
			type="Feedback">
			<Chan>181</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Spa heater set to solar preferred state, see state chart.
			</Notes>
		</Channel>
		<Channel
			id="SPA_HEATING_FB"
			type="Feedback">
			<Chan>189</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Spa heater status is heater, see state chart.
			</Notes>
		</Channel>
		<Channel
			id="SPA_HEATING_SOLAR_FB"
			type="Feedback">
			<Chan>190</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Spa heater status is solar, see state chart.
			</Notes>
		</Channel>
		<Channel
			id="SPA_JETS_HI_FB"
			type="Feedback">
			<Chan>185</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Spa jets state is high, see state chart.
			</Notes>
		</Channel>
		<Channel
			id="SPA_JETS_LO_FB"
			type="Feedback">
			<Chan>183</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Spa jets state is low, see state chart.
			</Notes>
		</Channel>
		<Channel
			id="SPA_JETS_MED_FB"
			type="Feedback">
			<Chan>184</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Spa jets state is medium, see state chart.
			</Notes>
		</Channel>
		<Channel
			id="SPA_JETS_OFF_FB"
			type="Feedback">
			<Chan>182</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Spa jets state is off, see state chart.
			</Notes>
		</Channel>
		<Channel
			id="SPA_LIGHT_FB"
			type="Feedback">
			<Chan>173</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Spa light is on while channel is active.
			</Notes>
		</Channel>
		<Channel
			id="SPA_PUMP_FB"
			type="Feedback">
			<Chan>171</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Spa pump is on while channel is active.
			</Notes>
		</Channel>
		<Command id="GETPOOLSCALE_CM">
			<Cmd>?POOLSCALE</Cmd>
			<API>getPoolSpaTemperatureScale()</API>
			<Notes>
			?POOLSCALE -
			Query for the Pool/Spa temperature scale.
			Responds with:
			POOLSCALE-&lt;scale&gt; 
			where
			&lt;scale&gt; is FAHRENHEIT, CELSIUS
			</Notes>
			<CmdResponse>POOLSCALE</CmdResponse>
		</Command>
		<Command id="GETPOOLAUX_CM">
			<Cmd>?POOLAUX</Cmd>
			<API>isPoolSpaAuxOn(aux)</API>
			<Notes>
			?POOLAUX-&lt;auxNumber&gt; - 
			Query for Pool/Spa Aux state.
			Responds with:
			POOLAUX-&lt;aux number&gt;,&lt;state&gt; 
			Where:
			&lt;state&gt; is 0 (false) or 1 (true)			
			</Notes>
			<CmdResponse>POOLAUX</CmdResponse>
		</Command>
		<Command id="SETPOOLAUX_CM">
			<Cmd>POOLAUX</Cmd>
			<API>setPoolSpaAuxOn(aux, state)</API>
			<Notes>
				POOLAUX-&lt;auxNumber&gt;,&lt;state&gt; -
				Set Pool/Spa Aux stat.
				Where: 
				&lt;aux number&gt; is the number of the aux relay 1 to x
				&lt;state&gt; is 1 (on) or 0 (off) (see specific module documentation)
			</Notes>
			<CmdResponse>POOLAUX</CmdResponse>
		</Command>
		<Command id="SETPOOLSCALE_CM">
			<Cmd>POOLSCALE</Cmd>
			<API>setPoolSpaTemperatureScale(ts)</API>
			<Notes>
				POOLSCALE-&lt;ts&gt; -
				Set the Pool/Spa temperature scale.
				Where:
				&lt;ts&gt; is FAHRENHEIT, CELSIUS
			</Notes>
			<CmdResponse>POOLSCALE</CmdResponse>
		</Command>
		<Level id="OUTDOOR_TEMP_LVL">
			<Lvl>34</Lvl>
			<Notes>Outdoor air temperature changed, value is in degrees C or F depending on temperature scale</Notes>
			<Range dataType="integer">
				<Max>255</Max>
				<Min>0</Min>
			</Range>
		</Level>
		<Level id="POOL_HEAT_LVL">
			<Lvl>39</Lvl>
			<API>setPoolSetpoint(nTemperature)</API>
			<Notes>Set Pool setpoint, value is in degrees C or F depending on temperature scale.
			</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="POOL_HEAT_LVL_FB">
			<Lvl>39</Lvl>
			<Notes>Feedback level indicating Pool setpoint changed.
			</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="SPA_HEAT_LVL">
			<Lvl>40</Lvl>
			<API>setSpaSetpoint(nTemperature)</API>
			<Notes>Set Spa setpoint, value is in degrees C or F depending on temperature scale.
			</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="SPA_HEAT_LVL_FB">
			<Lvl>40</Lvl>
			<Notes>Feedback level indicating Spa setpoint changed.
			</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="POOL_TEMP_LVL_FB">
			<Lvl>41</Lvl>
			<Notes>Pool temperature changed, value is in degrees C or F depending on temperature scale</Notes>
			<Range dataType="integer">
				<Max>255</Max>
				<Min>0</Min>
			</Range>
		</Level>
		<Level id="SPA_TEMP_LVL_FB">
			<Lvl>42</Lvl>
			<Notes>Spa temperature changed, value is in degrees C or F depending on temperature scale</Notes>
			<Range dataType="integer">
				<Max>255</Max>
				<Min>0</Min>
			</Range>
		</Level>
		<Event 
			id=""
			description="Pool/Spa Aux state changed where &lt;aux number&gt; is
the number of the aux relay 1 to x where x is the
maximum supported aux relay and &lt;state&gt; is 1 (on)
or 0 (off) (see specific module documentation)"
		>
			<Evt>POOLSPA_POOLAUX_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="POOLAUX">
				<Parameters>
					<Parameter type="Integer" description="the number of the aux relay 1 to x where x is the maximum supported aux relay" />
					<Parameter type="Integer" description="1 (on) or 0 (off)" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event 
			id="" 
		 	description="Pool temperature scale changed, &lt;scale&gt; is FAHRENHEIT, CELSIUS"
		>
			<Evt>POOLSPA_POOLSCALE_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="POOLSCALE">
				<Parameters>
					<Parameter type="String" description="FAHRENHEIT or CELSIUS" />
				</Parameters>
			</EventResponse>
		</Event>
			
	</Component>
	<Component id="Power">
		<Channel
			id="POWER"
			type="Momentary">
			<Chan>9</Chan>
			<OnAPI>cyclePower()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle power when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="PWR_ON"
			type="Momentary">
			<Chan>27</Chan>
			<OnAPI>setPower(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Power is turned on when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="PWR_OFF"
			type="Momentary">
			<Chan>28</Chan>
			<OnAPI>setPower(java.lang.String)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Power is turned off when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="POWER_STARTUP_FB"
			type="Feedback">
			<Chan>253</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback: Indicates Power is starting up and cannot accept commands
			</Notes>
		</Channel>
		<Channel
			id="POWER_SHUTDOWN_FB"
			type="Feedback">
			<Chan>254</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback: Indicates Power is shutting down and cannot accept commands
			</Notes>
		</Channel>
		<Channel
			id="POWER_ON"
			type="Discrete">
			<Chan>255</Chan>
			<OnAPI>setPower(java.lang.String)</OnAPI>
			<OffAPI>setPower(java.lang.String)</OffAPI>
			<Notes>Discrete Function: Power is on while channel is active</Notes>
		</Channel>
		<Channel
			id="POWER_ON_FB"
			type="Feedback">
			<Chan>255</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback: Power/Lamp state changed, power is on while channel is on
			</Notes>
		</Channel>
		<Channel
			id="LAMP_POWER_FB"
			type="Feedback">
			<Chan>255</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback: Power/Lamp state changed, power is on while channel is on
			</Notes>
		</Channel>
		<Command id="GETCOOLDOWNTIME_CM">
			<Cmd>?COOLDOWN</Cmd>
			<API>getShuttingDownTime()</API>
			<Notes>
			?COOLDOWN -
			Query for shut down time.
			Responds with:
			COOLDOWN-&lt;time&gt;
			Where:
			&lt;time&gt; is in seconds
			</Notes>
			<CmdResponse>COOLDOWN</CmdResponse>
		</Command>
		<Command id="GETWARMUPTIME_CM">
			<Cmd>?WARMUP</Cmd>
			<API>getStartingUpTime()</API>
			<Notes>
			?WARMUP -
			Query for start up time.
			Responds with:
			WARMUP-&lt;time&gt; 
			Where:
			&lt;time&gt; is in seconds
			</Notes>
			<CmdResponse>WARMUP</CmdResponse>
		</Command>
		<Command id="SETCOOLDOWNTIME_CM">
			<Cmd>COOLDOWN</Cmd>
			<API></API>
			<Notes>
			COOLDOWN-&lt;seconds&gt; -
			Set shut down time.
			Where:
			&lt;time&gt; is in seconds 
			</Notes>
		</Command>
		<Command id="COUNTERNOTIFY_CM">
			<Cmd>COUNTERNOTIFY</Cmd>
			<API>setCounterNotificationOn(boolean)</API>
			<Notes>
			COUNTERNOTIFY-&lt;state&gt; -
			Turn power counter notification on or off.
			Where:
			&lt;state&gt; is 1 or 0
			</Notes>
		</Command>
		<Command id="SETWARMUPTIME_CM">
			<Cmd>WARMUP</Cmd>
			<API></API>
			<Notes>WARMUP-&lt;seconds&gt; -
			Set warm up time.
			Where: 
			&lt;time&gt; is in seconds 
			</Notes>
		</Command>
		<Command id="COOLINGDOWNCOUNTER_RESPONSE">
			<Cmd>COOLING</Cmd>
			<API>POWER_COOLINGDOWNCOUNTER_EVENT</API>
			<Notes>
			COOLING-&lt;time&gt; -
			Cooling down counter time.
			Where:
			&lt;time&gt; is seconds remaining 
			</Notes>
		</Command>
		<Command id="WARMINGCOUNTER_RESPONSE">
			<Cmd>WARMING</Cmd>
			<API>POWER_WARMINGCOUNTER_EVENT</API>
			<Notes>WARMING-&lt;time&gt; Warming up counter time, &lt;time&gt; is seconds remaining 
			</Notes>
		</Command>
		<Command id="SETLAMPTIME_CM">
			<Cmd>LAMPTIME</Cmd>
			<API></API>
			<Notes>LAMPTIME-&lt;hours&gt; Set lamp time in hours</Notes>
		</Command>
		<Command id="GETLAMPTIME_CM">
			<Cmd>?LAMPTIME</Cmd>
			<API>getLampTime()</API>
			<Notes>
			?LAMPTIME -
			Query for lamp time.
			Responds with:
			LAMPTIME-&lt;time&gt;
			Where:
			&lt;time&gt; is in hours
			</Notes>
			<CmdResponse>LAMPTIME</CmdResponse>
		</Command>
		<Command id="SETFILTERTIME_CM">
			<Cmd>FILTERTIME</Cmd>
			<API></API>
			<Notes>FILTERTIME-&lt;hours&gt; Set filter time in hours</Notes>
		</Command>
		<Command id="GETFILTERTIME_CM">
			<Cmd>?FILTERTIME</Cmd>
			<API>getFilterTime()</API>
			<Notes>
			?FILTERTIME -
			Query for filter time.
			Responds with:
			FILTERTIME-&lt;time&gt; 
			Where:
			&lt;time&gt; is in hours
			</Notes>
			<CmdResponse>FILTERTIME</CmdResponse>
		</Command>
		<Event id="">
			<Evt>POWER_COOLINGCOUNTER_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="COOLING">
				<Parameters>
					<Parameter
						type="Int"
						description="Represents the remaining shutdown time in seconds" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>POWER_POWER_STATE_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="">
				<Parameters>
					<Parameter
						type="String"
						description="Represents the current power state" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>POWER_POWER_STATUS_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Channels>
				<EvtChan
					type="boolean"
					description="Startup FB">253</EvtChan>
				<EvtChan
					type="boolean"
					description="Shutdown FB">254</EvtChan>
				<EvtChan
					type="boolean"
					description="Power On">255</EvtChan>
			</Channels>
		</Event>
		<Event id="">
			<Evt>POWER_WARMINGCOUNTER_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="WARMING">
				<Parameters>
					<Parameter
						type="Int"
						description="Represents the remaining startup time in seconds" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>POWER_SHUTDOWNEXPIRE_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="">
				<Parameters>
					<Parameter
						type="Int"
						description="Represents the shutdown time expire" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>POWER_STARTUPEXPIRE_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="">
				<Parameters>
					<Parameter
						type="Int"
						description="Represents the startup time expire" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>POWER_LAMPTIME_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="LAMPTIME">
				<Parameters>
					<Parameter
						type="Int"
						description="Represents the lamp time in hours" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>POWER_FILTERTIME_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="FILTERTIME">
				<Parameters>
					<Parameter
						type="Int"
						description="Represents the filter time in hours" />
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="PreAmp">
		<Channel
			id="BALANCE_UP"
			type="Momentary">
			<Chan>164</Chan>
			<OnAPI>incrementBalance()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Channel: Balance is incremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="BALANCE_DN"
			type="Momentary">
			<Chan>165</Chan>
			<OnAPI>decrementBalance()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Channel: Balance is decremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="BASS_UP"
			type="Momentary">
			<Chan>166</Chan>
			<OnAPI>incrementBass()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Channel: Bass is incremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="BASS_DN"
			type="Momentary">
			<Chan>167</Chan>
			<OnAPI>decrementBass()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Channel: Bass is decremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="TREBLE_UP"
			type="Momentary">
			<Chan>168</Chan>
			<OnAPI>incrementTreble()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Channel: Treble is incremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="TREBLE_DN"
			type="Momentary">
			<Chan>169</Chan>
			<OnAPI>decrementTreble()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Ramping Function: Treble is decremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="SURROUND_NEXT"
			type="Momentary">
			<Chan>170</Chan>
			<OnAPI>nextSurroundMode()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Next surround mode is selected when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="SURROUND_PREV"
			type="Momentary">
			<Chan>171</Chan>
			<OnAPI>previousSurroundMode()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Previous surround mode is selected when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="LOUDNESS"
			type="Momentary">
			<Chan>206</Chan>
			<OnAPI>cycleLoudness()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle loudness when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="LOUDNESS_ON"
			type="Discrete">
			<Chan>207</Chan>
			<OnAPI>setLoudnessOn(boolean)</OnAPI>
			<OffAPI>setLoudnessOn(boolean)</OffAPI>
			<Notes>Discrete Function: Loudness is on while channel is active
			</Notes>
		</Channel>
		<Level id="BALANCE_LVL">
			<Lvl>2</Lvl>
			<API>setBalance(int)</API>
			<Notes>Set balance level, range is 0 to 255, 0 is left and 255 is right
			</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="BASS_LVL">
			<Lvl>3</Lvl>
			<API>setBass(int)</API>
			<Notes>Set bass level</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Level id="TREBLE_LVL">
			<Lvl>4</Lvl>
			<API>setTreble(int)</API>
			<Notes>Set treble level</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Command id="GETSURROUNDMODE_CM">
			<Cmd>?SURROUND</Cmd>
			<API>getSurroundMode()</API>
			<Notes>
			?SURROUND -
			Query surround mode.
			Responds with:
			SURROUND-&lt;mode&gt;
			</Notes>
			<CmdResponse>SURROUND</CmdResponse>
		</Command>
		<Command id="SETSURROUNDMODE_CM">
			<Cmd>SURROUND</Cmd>
			<API></API>
			<Notes>
			SURROUND-&lt;mode&gt; -
			Surround mode changed</Notes>
		</Command>
		<Command id="GETEQUALIZER_CM">
			<Cmd>?EQUALIZER</Cmd>
			<API>getEqualizer(int[]), getEqualizer(), getEqualizer(int)</API>
			<Notes>
			?EQUALIZER -
			Query Equalizer for all supported (bands) and their (gains). 
			Responds with: 
			EQUALIZER-(band)=(gain)[,(band)=(gain)]+
			Where:
			(band) ranges from 1 to 255 and its (gain) ranges from 0 to 255
			</Notes>
			<CmdResponse>EQUALIZER</CmdResponse>
		</Command>
		<Command id="SETEQUALIZER_CM">
			<Cmd>EQUALIZER</Cmd>
			<API>setEqualizer(int[],int[]), setEqualizer(int,int)</API>
			<Notes>
			EQUALIZER_OFFSET-(band)=(offset) -
			Adjust Equalizer Band, given (band) number is a sequential index, and (offset) adjusts its gain, 
			Where: 
			(offset) ranges from -255 to 255
			</Notes>
		</Command>
		<Command id="GETEQUALIZERBANDS_CM">
			<Cmd>?EQUALIZER_BANDS</Cmd>
			<API>getEqualizerBands()</API>
			<Notes>
			?EQUALIZER_BANDS -
			Query Equalizer for all its supported (bands), 
			Where: 
			(band) numbers range from 1 to 255. Returns EQUALIZER_BANDS-(band)[,(band)]+
			</Notes>
			<CmdResponse>EQUALIZER_BANDS</CmdResponse>
		</Command>
		<Command id="ADJUSTEQUALIZEROFFSET_CM">
			<Cmd>EQUALIZER_OFFSET</Cmd>
			<API></API>
			<Notes>
			EQUALIZER_OFFSET-(band)=(offset) -
			Adjust Equalizer Band, given (band) number is a sequential index, and (offset) adjusts its gain.
			Where: 
			(offset) ranges from -255 to 255
			</Notes>
		</Command>
		<Event id="">
			<Evt>PREAMP_BALANCE_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Levels>
				<EvtLevel
					type="integer"
					description="Represents the balance value">2</EvtLevel>
			</Levels>
		</Event>
		<Event id="">
			<Evt>PREAMP_BASS_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Levels>
				<EvtLevel
					type="integer"
					description="Represents the bass value">3</EvtLevel>
			</Levels>
		</Event>
		<Event id="">
			<Evt>PREAMP_LOUDNESS_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Channels>
				<EvtChan
					type="Boolean"
					description="Represents the current loudness status">207</EvtChan>
			</Channels>
		</Event>
		<Event id="">
			<Evt>PREAMP_SURROUNDMODE_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="SURROUND">
				<Parameters>
					<Parameter
						type="String"
						description="Represents the current surround mode status" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>PREAMP_TREBLE_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Levels>
				<EvtLevel
					type="Int"
					description="Represents the treble value">4</EvtLevel>
			</Levels>
		</Event>
		<Event id="">
			<Evt>PREAMP_EQUALIZER_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="EQUALIZER">
				<Parameters>
					<Parameter
						type="integer"
						description="band" />
					<Parameter
						type="integer"
						description="gain" />
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="Preset">
		<Command id="GETPRESET_CM">
			<Cmd>?PRESET</Cmd>
			<API>getPreset()</API>
			<Notes>
				?PRESET -
				Query current preset.
				Responds with: 
				PRESET-&lt;index&gt;
			</Notes>
			<CmdResponse>PRESET</CmdResponse>
		</Command>
		<Command id="GETPRESETCOUNT_CM">
			<Cmd>?PRESETCOUNT</Cmd>
			<API>getPresetCount()</API>
			<Notes>
				?PRESETCOUNT -
				Query total number of presets.
				Responds with: 
				PRESETCOUNT-&lt;preseCount&gt;
			</Notes>
			<CmdResponse>PRESETCOUNT</CmdResponse>
		</Command>
		<Command id="GETPRESETSELECT_CM">
			<Cmd>?PRESETSELECT</Cmd>
			<API>getPreset()</API>
			<Notes>
				?PRESETSELECT -
				Query for the currently selected index of valid presets.
				Responds with: 
				PRESETSELECT-&lt;index&gt;
			</Notes>
			<CmdResponse>PRESETSELECT</CmdResponse>
		</Command>
		<Command id="GETNEXTPRESET_CM">
			<Cmd>?NEXTPRESET</Cmd>
			<API>nextPreset()</API>
			<Notes>
				?NEXTPRESET -
				Query for the next valid preset.
				Responds with: 
				PRESET-&lt;index&gt;
			</Notes>
			<CmdResponse>PRESET</CmdResponse>
		</Command>
		<Command id="GETPREVIOUSPRESET_CM">
			<Cmd>?PREVIOUSPRESET</Cmd>
			<API>previousPreset()</API>
			<Notes>
				?PREVIOUSPRESET -
				Query for the previous valid preset.
				Responds with: 
				PRESET-&lt;index&gt;
			</Notes>
			<CmdResponse>PRESET</CmdResponse>
		</Command>
		<Command id="SETPRESET_CM">
			<Cmd>PRESET</Cmd>
			<API>setPreset(int index)</API>
			<Notes>
				PRESET-&lt;index&gt; -
				Set preset to the value &lt;index&gt;.
			</Notes>
		</Command>
		<Command id="SETPRESETCOUNT_CM">
			<Cmd>PRESETCOUNT</Cmd>
			<API>setPresetCount(int presetCount)</API>
			<Notes>
				PRESETCOUNT-&lt;presetCount&gt; -
				Set the number of valid presets. 
			</Notes>
		</Command>
		
		<Event id="">
			<Evt>PRESET_PRESET_EVENT</Evt>
			<Notes>
				PRESET-&lt;index&gt; -
				&lt;index&gt; represents the current preset value.
			</Notes>
			<EventResponse resp="PRESET">
				<Parameters>
					<Parameter
						type="integer"
						description="Represents the current preset value" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>PRESET_PRESETCOUNT_EVENT</Evt>
			<Notes>
				PRESETCOUNT-&lt;presetCount&gt; -
				&lt;presetCount&gt; represents the current number of presets.
			</Notes>
			<EventResponse resp="PRESETCOUNT">
				<Parameters>
					<Parameter
						type="integer"
						description="Represents the current number of presets" />
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="RelayDevice">
		<Command id="GETRELAYCHANNELCOUNT_CM">
			<Cmd>?RELAYCHANNELCOUNT</Cmd>
			<API>getRelayChannelCount()</API>
			<Notes>
			?RELAYCHANNELCOUNT -
			Query for the number of channels on a relay device.
			Responds with:
			RELAYCHANNELCOUNT-&lt;count&gt;
			</Notes>
			<CmdResponse>RELAYCHANNELCOUNT</CmdResponse>
		</Command>
		<Command id="GETRELAYCHANNELSTATE_CM">
			<Cmd>?RELAYCHANNELSTATE</Cmd>
			<API>getRelayChannelState()</API>
			<Notes>
			Query for the relay channel state.
			Where:
			?RELAYCHANNELSTATE -
			&lt;relay chan&lt; is the integer channel number.
			Responds with:
			RELAYCHANNELSTATE-&lt;relay chan&lt;
			</Notes>
			<CmdResponse>RELAYCHANNELSTATE</CmdResponse>
		</Command>
		<Command id="SETRELAYCHANNELSTATE_CM">
			<Cmd>RELAYCHANNELSTATE</Cmd>
			<API>setRelayChannelState()</API>
			<Notes>
			RELAYCHANNELSTATE-&lt;relay chan&lt;,&lt;state&lt; -
			Query for the relay channel state.
			Where:
			&lt;relay chan&lt; is the integer channel number.
			&lt;state&lt; is the state of the channel. 
			</Notes>
		</Command>
		<Event id="">
			<Evt>RELAY_CHANNELCOUNT_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="RELAYCHANNELCOUNT">
				<Parameters>
					<Parameter
						type="Int"
						description="Represents the current number of channels" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>RELAY_CHANNELSTATE_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="RELAYCHANNELSTATE">
				<Parameters>
					<Parameter
						type="Int"
						description="Represents the channel" />
					<Parameter
						type="Int"
						description="Represents the current state of the given channel" />
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="SecuritySystem">
		<Command id="GETPOINTCOUNT_CM">
			<Cmd>?SECPOINTCOUNT</Cmd>
			<API>getPointCount()</API>
			<Notes>
			?SECPOINTCOUNT Query for the number of supported Security Points.
			Responds with:
			SECPOINTCOUNT-&lt;pointCount&gt; 
			Where:
			&lt;pointCount&gt; is 1 to the maximum number of points supported.
			</Notes>
			<CmdResponse>SECPOINTCOUNT</CmdResponse>
		</Command>
		<Command id="GETPOINTSTATE_CM">
			<Cmd>?SECPOINTSTATE</Cmd>
			<API>getPointState(int)</API>
			<Notes>
			?SECPOINTSTATE-&lt;point&gt; -
			Query for Point State.
			Responds with:
			SECPOINTSTATE-&lt;point&gt;,&lt;state&gt;
			Where: 
			&lt;point&gt; is 1 to the maximum point as returned by getPointCount() 
			(see specific module documentation)
			&lt;state&gt; is BYPASS or ACTIVE 
			</Notes>
			<CmdResponse>SECPOINTSTATE</CmdResponse>
		</Command>
		<Command id="GETPOINTSTATUS_CM">
			<Cmd>?SECPOINTSTATUS</Cmd>
			<API>getPointStatus(int)</API>
			<Notes>
			?SECPOINTSTATUS-&lt;point&gt;-
			Query for Point Status.
			Responds with:
			SECPOINTSTATUS-&lt;point&gt;,&lt;status&gt;
			Where:
			&lt;point&gt; is 1 to the maximum point as returned by getPointCount() (see specific module documentation)
			&lt;status&gt; is ACTIVE, FAULT or BYPASSED 
			</Notes>
			<CmdResponse>SECPOINTSTATUS</CmdResponse>
		</Command>
		<Command id="GETSECURITYSTATE_CM">
			<Cmd>?SECSTATE</Cmd>
			<API>getSecurityState()</API>
			<Notes>
			?SECSTATE -
			Query for Security State.
			Responds with:
			SECSTATE-&lt;state&gt; 
			Where:
			&lt;state&gt; is ARM_HOME, ARM, ARM_HOME_NOW, ARM_NOW, DISARM, FIRE, PANIC, POLICE, MEDICAL or NONE 
			</Notes>
			<CmdResponse>SECSTATE</CmdResponse>
		</Command>
		<Command id="GETSECURITYSTATUS_CM">
			<Cmd>?SECSTATUS</Cmd>
			<API>getSecurityStatus()</API>
			<Notes>
			?SECSTATUS -
			Query for Security Status.
			Responds with:
			SECSTATUS-&lt;status&gt;
			Where:
			&lt;status&gt; is DISARMED, ARMED_HOME, ARMED, ALARM 
			</Notes>
			<CmdResponse>SECSTATUS</CmdResponse>
		</Command>
		<Command id="ISOKTOARM_CM">
			<Cmd>?SECARMABLE</Cmd>
			<API>isOKToArm()</API>
			<Notes>
			?SECARMABLE -
			Query for Security arm-able status.
			Responds with:
			SECARMABLE-&lt;status&gt;
			Where:
			&lt;status&gt; is 1 or 0</Notes>
			<CmdResponse>SECARMABLE</CmdResponse>
		</Command>
		<Command id="SETPOINTSTATE_CM">
			<Cmd>SECPOINTSTATE</Cmd>
			<API>setPointState(int,java.lang.String,java.lang.String)</API>
			<Notes>SECPOINTSTATE-&lt;point&gt;,&lt;state&gt;,&lt;password&gt; -
			Set Point State.
			Where:
			&lt;point&gt; is 1 to the maximum point as returned by getPointCount() (see specific module documentation)
			&lt;state&gt; is ACTIVE or BYPASS
			&lt;password&gt; is the password required to complete the operation (see specific module documentation). 
			</Notes>
		</Command>
		<Command id="SETSECURITYSTATE_CM">
			<Cmd>SECSTATE</Cmd>
			<API>setSecurityState(java.lang.String,java.lang.String)</API>
			<Notes>
			SECSTATE-&lt;state&gt;,&lt;password&gt; -
			Set Security State.
			Where:
			&lt;state&gt; is ARM_HOME, ARM, ARM_HOME_NOW, ARM_NOW, DISARM, FIRE, PANIC, POLICE, MEDICAL
			&lt;password&gt; is the password required to complete the operation (see specific module documentation). 
			</Notes>
		</Command>
		<Event id="">
			<Evt>SECURITYSYSTEM_OKTOARM_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="SECARMABLE">
				<Parameters>
					<Parameter type="Boolean" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>SECURITYSYSTEM_SECURITYSTATUS_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="SECSTATUS">
				<Parameters>
					<Parameter type="String" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>SECURITYSYSTEM_SECURITYSTATE_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="SECSTATE">
				<Parameters>
					<Parameter type="String" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>SECURITYSYSTEM_POINTSTATE_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="SECPOINTSTATE">
				<Parameters>
					<Parameter type="String" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>SECURITYSYSTEM_POINTSTATUS_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="SECPOINTSTATUS">
				<Parameters>
					<Parameter type="String" />
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="Sensor">
		<Channel id="SENSOR_FB">
			<Chan>255</Chan>
			<Notes>Feedback Function: Sensor state changed, sensor is on while channel is on
			</Notes>
		</Channel>
		<Level id="SENSOR_VALUE">
			<Lvl>7</Lvl>
			<Notes>Feedback Function: Value of the sensor changed, range is specific to the sensor type
			</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
	</Component>
	<Component id="SourceSelect">
		<Channel
			id="SOURCE_CYCLE"
			type="Momentary">
			<Chan>196</Chan>
			<OnAPI>cycleInputSelect()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle input source when channel is activated
			</Notes>
		</Channel>
		<Command id="GETINPUTCOUNT_CM">
			<Cmd>?INPUTCOUNT</Cmd>
			<API>getInputCount()</API>
			<Notes>
			?INPUTCOUNT Query for the number of inputs
			</Notes>
			<CmdResponse>INPUTCOUNT</CmdResponse>
		</Command>
		<Command id="GETINPUTLIST_CM">
			<Cmd>?INPUTLIST</Cmd>
			<API>getInputList()</API>
			<Notes>
			?INPUTLIST -
			Query input list for all inputs.
			Responds with one INPUTLIST reponse for each input:
			INPUTLIST-&lt;index&gt;,&lt;device label&gt;
			</Notes>
			<CmdResponse>INPUTLIST</CmdResponse>
		</Command>
		<Command id="GETINPUTLISTCOUNT_CM">
			<Cmd>?INPUTLISTCOUNT</Cmd>
			<API>getInputListCount()</API>
			<Notes>
			?INPUTLISTCOUNT -
			Query for the number of input groups.
			Responds with: 
			INPUTLISTCOUNT-&lt;input count&gt;
			</Notes>
			<CmdResponse>INPUTLISTCOUNT</CmdResponse>
		</Command>
		<Command id="GETINPUT_CM">
			<Cmd>?INPUT</Cmd>
			<API>getInputSource()</API>
			<Notes>
			?INPUT -
			Query for the current input.
			Responds with: 
			INPUT-&lt;device label&gt;
			Where:
			&lt;device label&gt; is one of the values returned in the query ?INPUTLIST. 
			</Notes>
			<CmdResponse>INPUT</CmdResponse>
		</Command>
		<Command id="SETINPUT_CM">
			<Cmd>INPUT</Cmd>
			<API>setInputSource(java.lang.String,int),setInputSource(com.amx.duet.componentsdk.datatype.InputSourceInfo)
			</API>
			<Notes>INPUT-&lt;displayName&gt; Set the current input.</Notes>
		</Command>
		<Command id="GETINPUTPROPERTIES_CM">
			<Cmd>?INPUTPROPERTIES</Cmd>
			<API>getInputProperties()</API>
			<Notes>
			?INPUTPROPERTIES -
			Query input properties.
			Responds with one INPUTPROPERTY response for each input: 
			INPUTPROPERTY-&lt;index&gt;,&lt;inputGroup&gt;,&lt;signalType&gt;,&lt;deviceLabel&gt;,&lt;displayName&gt;, 
			Where:
			&lt;index&gt; is a virtual input number between 1 and &lt;count&gt;.
			&lt;inputGroup&gt; is the integer value of the virtual input port on the device (mutually exclusive group)
			&lt;signalType&gt;
			&lt;deviceLabel&gt; is the label on the device
			&lt;displayName&gt; is the text shown on the device display. 
			</Notes>
			<CmdResponse>INPUTPROPERTY</CmdResponse>
		</Command>
		<Command id="GETINPUTPROPERTY_CM">
			<Cmd>?INPUTPROPERTY</Cmd>
			<API></API>
			<Notes>
			?INPUTPROPERTY-&lt;index&gt; -
			Query input properties for single input.
			Where:
			&lt;index&gt; is a virtual input number between 1 and &lt;count&gt;
			Responds with:
			INPUTPROPERTY-&lt;index&gt;,&lt;inputGroup&gt;,&lt;signalType&gt;,&lt;deviceLabel&gt;,&lt;displayName&gt;
			&lt;index&gt; is a virtual input number between 1 and &lt;count&gt;
			&lt;inputGroup&gt; is the integer value of the virtual input port on the device (mutually exclusive group).
			&lt;signalType&gt;
			&lt;deviceLabel&gt; is the label on the device.
			&lt;displayName&gt; is the text shown on the device display. 
			</Notes>
			<CmdResponse>INPUTPROPERTY</CmdResponse>
		</Command>
		<Command id="GETINPUTSELECT_CM">
			<Cmd>?INPUTSELECT</Cmd>
			<API>getInputSelect()</API>
			<Notes>
			?INPUTSELECT -
			Gets the current input.
			Responds with:
			INPUTSELECT-&lt;index&gt;
			Where:
			&lt;index&gt; is a virtual input number between 1 and the value returned by ?INPUTCOUNT, 
			</Notes>
			<CmdResponse>INPUTSELECT</CmdResponse>
		</Command>
		<Command id="GETINPUTGROUPSELECT_CM">
			<Cmd>?INPUTGROUPSELECT</Cmd>
			<API>getInputGroupSelect()</API>
			<Notes>
			?INPUTGROUPSELECT -
			Gets the current input group.
			Responds with:
			INPUTGROUPSELECT-&lt;inputGroup&gt;
			Where:
			&lt;inputGroup&gt; is a number between 1 and the value returned by ?INPUTLISTCOUNT, 
			</Notes>
			<CmdResponse>INPUTGROUPSELECT</CmdResponse>
		</Command>
		<Command id="INPUTSELECT_CM">
			<Cmd>INPUTSELECT</Cmd>
			<API>setInputSelect(int)</API>
			<Notes>INPUTSELECT-&lt;index&gt; -
			Sets the current input.
			Where: 
			&lt;index&gt; is a virtual input number between 1 and the value returned by ?INPUTCOUNT. 
			If value is changed,
			Responds with:
			INPUTSELECT-&lt;index&gt; and INPUT-&lt;index&gt;,&lt;instance&gt;
			</Notes>
		</Command>
		<Command id="INPUTGROUPSELECT_CM">
			<Cmd>INPUTGROUPSELECT</Cmd>
			<API></API>
			<Notes>INPUTGROUPSELECT-&lt;inputGroup&gt; -
			Sets the current input group.
			Where:
			&lt;inputGroup&gt; is a virtual input number between 1 and the value returned by ?INPUTLISTCOUNT.
			if value is changed,
			Responds with: 
			INPUTGROUPSELECT-&lt;inputGroup&gt;
			</Notes>
		</Command>
		<Command id="CYCLEINPUTSELECT_CM">
			<Cmd>CYCLESELECT</Cmd>
			<API>cycleInputSelect()</API>
			<Notes>CYCLESELECT -
			Cycles to the next input group.
			Responds with:
			INPUTSELECT-&lt;index&gt;
			</Notes>
		</Command>
		<Event id="">
			<Evt>SOURCESELECT_INPUTCOUNT_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="INPUTCOUNT">
				<Parameters>
					<Parameter
						type="Int"
						description="Represents the number of inputs" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>SOURCESELECT_INPUTPROPERTIES_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="INPUTPROPERTIES">
				<Parameters>
					<Parameter
						type="StringArray"
						description="String[] String (index),(inputGroup),(signalType),(deviceLabel),(displayName) for each input select" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>SOURCESELECT_INPUTPROPERTY_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="INPUTPROPERTY">
				<Parameters>
					<Parameter
						type="String"
						description="String (index),(inputGroup),(signalType),(deviceLabel),(displayName) for the input selected" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>SOURCESELECT_INPUTSELECT_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="INPUTSELECT">
				<Parameters>
					<Parameter
						type="Int"
						description="Represents the input selected" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>SOURCESELECT_INPUTSOURCE_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="INPUT">
				<Parameters>
					<Parameter
						type="String"
						description="Represents the current input source selected" />
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="TextKeypad">
		<Command id="TEXT_CM">
			<Cmd>TEXT</Cmd>
			<API>clearDisplay()</API>
			<Notes>TEST-
			Clear display. "-" is optional
			</Notes>
		</Command>
		<Command id="SETTEXTBACKLIGHT_CM">
			<Cmd>TEXTBACKLIGHT</Cmd>
			<API>setBacklightOn(state)</API>
			<Notes>
			TEXTBACKLIGHT-&lt;state&gt;
			Set BacklightOn.
			Where:
			&lt;state&gt; is 1 (on) or 0 (off) (see specific module documentation)
			</Notes>
		</Command>
		<Command id="SETTEXT_CM">
			<Cmd>TEXT</Cmd>
			<API>setText(line,column,text)</API>
			<Notes>
			TEXT-&lt;line&gt;,&lt;column&gt;,&lt;text&gt;
			Set text starting at a given line and column. Characters will be overwritten as needed
			based on text. Text will not wrap around to the next line.
			</Notes>
		</Command>
		<Command id="SETTEXTDISPLAY_CM">
			<Cmd>TEXT</Cmd>
			<API>setTextDisplay(text)</API>
			<Notes>
			TEXT-&lt;text&gt;
			Set text starting at line 1 and column 1. Text will wrap around to the next line to fill the display.
			</Notes>
		</Command>
		<Command id="SETTEXTLINE_CM">
			<Cmd>TEXT</Cmd>
			<API>setTextLine(line,text)</API>
			<Notes>
			TEXT-&lt;line&gt;,&lt;text&gt;
			Set text starting at column 1 of the line specified. Text will not wrap around to the next  line.
			</Notes>
		</Command>
	</Component>
	<Component id="Switcher">
		<Command id="GETINPUT_CM">
			<Cmd>?INPUT</Cmd>
			<API>getInput(sl,output)</API>
			<Notes>
			?INPUT-[&lt;sl&gt;,]&lt;output&gt; - 
			Query for the input connected to an output 
			Responds with:
			SWITCHL&lt;sl&gt;I&lt;input&gt;O&lt;output&gt; 
			Where:
			&lt;sl&gt; is ALL, VIDEO, or AUDIO.
			&lt;input&gt; is 0 if there is no connection. 
			If &lt;sl&gt; is not supplied, ALL will be assumed.
			</Notes>
			<CmdResponse>SWITCH</CmdResponse>
		</Command>
		<Command 
			id="GETOUTPUTS_CM"
			description="This is in fact get outputs since it can return 0, 1 or more"
			>
			<Cmd>?OUTPUT</Cmd>
			<API>getOutputs(sl,input)</API>
			<Notes>
			?OUTPUT-[&lt;sl&gt;,]&lt;input&gt; - 
			Query for the outputs connected to an input.
			Responds with:
			SWITCHL&lt;sl&gt;I&lt;input&gt;O&lt;output&gt;,&lt;output&gt;... 
			Where:
			&lt;sl&gt; is ALL, VIDEO, or AUDIO and &lt;output&gt; is 0 if there is no connection. 
			If &lt;sl&gt; is not supplied, ALL will be assumed.
			</Notes>
			<CmdResponse>SWITCH</CmdResponse>
		</Command>
		<Command id="GETSWITCHPRESET_CM">
			<Cmd>?SWITCHPRESET</Cmd>
			<API>getSwitcherPreset()</API>
			<Notes>
			?SWITCHPRESET - 
			Query for switcher preset, 
			Responds with:
			SWITCHPRESET-&lt;preset&gt;
			</Notes>
			<CmdResponse>SWITCHPRESET</CmdResponse>
		</Command>
		<Command id="SWITCHPRESETSAVE_CM">
			<Cmd>SWITCHPRESETSAVE</Cmd>
			<API>saveSwitcherPreset(preset)</API>
			<Notes>
			SWITCHPRESETSAVE-&lt;preset&gt; -
			Save switcher preset.
			Where:
			&lt;preset&gt; is 1-x and x is the maximum supported preset
			(see specific module documentation)
			</Notes>
		</Command>
		<Command id="SWITCHPRESET_CM">
			<Cmd>SWITCHPRESET</Cmd>
			<API>setSwitcherPreset(preset)</API>
			<Notes>
			SWITCHPRESET-&lt;preset&gt; -
			Recall switcher preset.
			Where:
			&lt;preset&gt; is 1-x and x is the maximum supported preset 
			(see specific module documentation)
			</Notes>
		</Command>
		<Command id="SWITCHLEVELALLINPUTTOOUTPUT_CM">
			<Cmd>CI</Cmd>
			<API>switchInputToOutput(ALL,input,output)</API>
			<Notes>
			CI&lt;input&gt;O&lt;output&gt; -
			Switch &lt;input&gt; to &lt;output&gt; for switcher level All.
			Use &lt;input&gt; 0 for disconnect.
			</Notes>
		</Command>
		<Command id="SWITCHLEVELALLINPUTTOOUTPUTS_CM">
			<Cmd>CI</Cmd>
			<API>switchInputToOutput(ALL,input,output[])</API>
			<Notes>
			CI&lt;input&gt;O&lt;output,...&gt; -
			Switch &lt;input&gt; to one or more &lt;output&gt;s for switcher level All.
			Use &lt;input&gt; 0 for disconnect.
			</Notes>
		</Command>
		<Command id="SWITCHLEVELALLINPUTSTOOUTPUTS_CM">
			<Cmd>CI</Cmd>
			<API>switchInputToOutput(ALL,input[],output[])</API>
			<Notes>
			CI&lt;input,...&gt;O&lt;output,...&gt; -
			Switch one or more &lt;input&gt;s to one or more &lt;output&gt;s for switcher level All.
			Use &lt;input&gt; 0 for disconnect.
			</Notes>
		</Command>
		<Command id="SWITCHLEVELAUDIOINPUTTOOUTPUT_CM">
			<Cmd>AI</Cmd>
			<API>switchInputToOutput(AUDIO,input,output)</API>
			<Notes>
			AI&lt;input&gt;O&lt;output&gt; -
			Switch &lt;input&gt; to &lt;output&gt; for switcher level AUDIO.
			Use &lt;input&gt; 0 for disconnect.
			</Notes>
		</Command>
		<Command id="SWITCHLEVELAUDIOINPUTTOOUTPUTS_CM">
			<Cmd>AI</Cmd>
			<API>switchInputToOutput(AUDIO,input,output[])</API>
			<Notes>
			AI&lt;input&gt;O&lt;output,...&gt; -
			Switch &lt;input&gt; to one or more &lt;output&gt;s for switcher level AUDIO.
			Use &lt;input&gt; 0 for disconnect.
			</Notes>
		</Command>
		<Command id="SWITCHLEVELAUDIOINPUTSTOOUTPUTS_CM">
			<Cmd>AI</Cmd>
			<API>switchInputToOutput(ALL,input[],output[])</API>
			<Notes>
			AI&lt;input,...&gt;O&lt;output,...&gt; -
			Switch one or more &lt;input&gt;s to one or more &lt;output&gt;s for switcher level AUDIO.
			Use &lt;input&gt; 0 for disconnect.
			</Notes>
		</Command>
		<Command id="SWITCHLEVESELECTINPUTTOOUTPUT_CM">
			<Cmd>CL</Cmd>
			<API>switchInputToOutput(sl,input,output)</API>
			<Notes>
			CL&lt;sl&gt;I&lt;input&gt;O&lt;output&gt; -
			Switch &lt;input&gt; to &lt;output&gt; 
			Where:
			&lt;sl&gt; is ALL, VIDEO, or AUDIO.
			Use &lt;input&gt; 0 for disconnect.
			</Notes>
		</Command>
		<Command id="SWITCHLEVELSELECTINPUTTOOUTPUTS_CM">
			<Cmd>CL</Cmd>
			<API>switchInputToOutput(sl,input,output[])</API>
			<Notes>
			CL&lt;sl&gt;I&lt;input&gt;O&lt;output,...&gt; -
			Switch &lt;input&gt; to one or more &lt;output&gt;s 
			Where:
			&lt;sl&gt; is ALL, VIDEO, or AUDIO.
			Use &lt;input&gt; 0 for disconnect.
			</Notes>
		</Command>
		<Command id="SWITCHLEVELSELECTINPUTSTOOUTPUTS_CM">
			<Cmd>CL</Cmd>
			<API>switchInputToOutput(sl,input[],output[])</API>
			<Notes>
			CL&lt;sl&gt;I&lt;input,...&gt;O&lt;output,...&gt; -
			Switch one or more &lt;input&gt;s to one or more &lt;output&gt;s where &lt;sl&gt; is ALL, VIDEO, or AUDIO..
			Use &lt;input&gt; 0 for disconnect.
			</Notes>
		</Command>

		<Command id="SWITCHLEVEVIDEOINPUTTOOUTPUT_CM">
			<Cmd>VI</Cmd>
			<API>switchInputToOutput(sl,input,output)</API>
			<Notes>VI&lt;sl&gt;I&lt;input&gt;O&lt;output&gt; -
				Switch &lt;input&gt; to &lt;output&gt; 
				for switcher level Video.
				Use &lt;input&gt; 0 for disconnect.
			</Notes>
		</Command>
		<Command id="SWITCHLEVELVIDEOINPUTTOOUTPUTS_CM">
			<Cmd>VI</Cmd>
			<API>switchInputToOutput(sl,input,output[])</API>
			<Notes>VI&lt;sl&gt;I&lt;input&gt;O&lt;output,...&gt; -
				Switch &lt;input&gt; to one or more &lt;output&gt;s 
				for switcher level Video.
				Use &lt;input&gt; 0 for disconnect.
			</Notes>
		</Command>
		<Command id="SWITCHLEVELVIDEOINPUTSTOOUTPUTS_CM">
			<Cmd>VI</Cmd>
			<API>switchInputToOutput(sl,input[],output[])</API>
			<Notes>VL&lt;sl&gt;I&lt;input,...&gt;O&lt;output,...&gt; -
				Switch one or more &lt;input&gt;s to one or more &lt;output&gt;s 
				for switcher level Video.
				Use &lt;input&gt; 0 for disconnect.
			</Notes>
		</Command>
		<Event id="">
			<Evt>SWITCHPRESET_EVENT</Evt>
			<Notes>
			SWITCHPRESET-&lt;preset&gt; -
			Switcher preset changed.
			Where:
			&lt;preset&gt; is 1-x and x is the maximum supported
			preset (see specific module documentation)
			</Notes>
			<EventResponse resp="SWITCHPRESET">
				<Parameters>
					<Parameter
						type="String"
						description="is 1-x and x is the maximum supported
						preset (see specific module documentation)" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>SWITCH_EVENT</Evt>
			<Notes>
			SWITCH-L&lt;sl&gt;I&lt;input&gt;O&lt;output&gt; -
			Switch connections changed.
			Where:
			&lt;sl&gt; is ALL, VIDEO, or AUDIO and &lt;input&gt;
			is 0 if there is no connection.
			</Notes>
			<EventResponse resp="SWITCH">
				<Parameters>
					<Parameter
						type="String"
						description="Switch level and is ALL, VIDEO, or AUDIO" />
					<Parameter
						type="Integer"
						description="Input port number" />
					<Parameter
						type="Integer"
						description="Output port number" />
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="Tuner">
		<Channel
			id="TUNER_BAND"
			type="Momentary">
			<Chan>40</Chan>
			<OnAPI>cycleBand()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle tuner band when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="TUNER_PRESET_GROUP"
			type="Momentary">
			<Chan>224</Chan>
			<OnAPI>cycleStationPresetGroup()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle station preset group/bank when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="TUNER_STATION_UP"
			type="Momentary">
			<Chan>225</Chan>
			<OnAPI>incrementStation()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Station is incremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="TUNER_STATION_DN"
			type="Momentary">
			<Chan>226</Chan>
			<OnAPI>decrementStation()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Station is decremented when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="TUNER_SCAN_FWD"
			type="Momentary">
			<Chan>227</Chan>
			<OnAPI>scanStation(java.lang.String)</OnAPI>
			<OffAPI>scanStation(java.lang.String)</OffAPI>
			<Notes>Momentary Function: Scans for next station while channel is activate.
			</Notes>
		</Channel>
		<Channel
			id="TUNER_SCAN_REV"
			type="Momentary">
			<Chan>228</Chan>
			<OnAPI>scanStation(java.lang.String)</OnAPI>
			<OffAPI>scanStation(java.lang.String)</OffAPI>
			<Notes>Momentary Function: Scans for previous station while channel is activate
			</Notes>
		</Channel>
		<Channel
			id="TUNER_SEEK_FWD"
			type="Momentary">
			<Chan>229</Chan>
			<OnAPI>seekStation(java.lang.String)</OnAPI>
			<OffAPI>seekStation(java.lang.String)</OffAPI>
			<Notes>Momentary Function: Seeks for next station while channel is activate
			</Notes>
		</Channel>
		<Channel
			id="TUNER_SEEK_REV"
			type="Momentary">
			<Chan>230</Chan>
			<OnAPI>seekStation(java.lang.String)</OnAPI>
			<OffAPI>seekStation(java.lang.String)</OffAPI>
			<Notes>Momentary Function: Seeks for previous station while channel is activate
			</Notes>
		</Channel>
		<Channel
			id="TUNER_OSD"
			type="Momentary">
			<Chan>234</Chan>
			<OnAPI>cycleDisplayInfo()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle on-screen or front-panel display info when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="TUNER_PREV"
			type="Momentary">
			<Chan>235</Chan>
			<OnAPI>gotoPreviousStation()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Previous station is selected when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="CHAN_UP"
			type="Momentary">
			<Chan>22</Chan>
			<OnAPI>nextStationPreset()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Next station preset is selected when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="CHAN_DN"
			type="Momentary">
			<Chan>23</Chan>
			<OnAPI>previousStationPreset()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Previous station preset is selected when channel is activated
			</Notes>
		</Channel>
		<Command id="GETBAND_CM">
			<Cmd>?BAND</Cmd>
			<API>getBand()</API>
			<Notes>
			?BAND -
			Query for band.
			Responds with:
			BAND-&lt;band&gt;
			</Notes>
			<CmdResponse>BAND</CmdResponse>
		</Command>
		<Command id="GETSTATION_CM">
			<Cmd>?XCH</Cmd>
			<API>getStation()</API>
			<Notes>
			?XCH -
			Query for station.
			Responds with:
			XCH-&lt;station&gt;
			Where:
			&lt;station&gt; is a station string such as &quot;501&quot;, &quot;103.7&quot; or &quot;5.1&quot;
			</Notes>
			<CmdResponse>XCH</CmdResponse>
		</Command>
		<Command id="GETSTATIONPRESET_CM">
			<Cmd>?TUNERPRESET</Cmd>
			<API>getStationPreset()</API>
			<Notes>
			?TUNERPRESET -
			Query for tuner preset.
			Responds with: 
			TUNERPRESET-&lt;preset&gt;
			</Notes>
			<CmdResponse>TUNERPRESET</CmdResponse>
		</Command>
		<Command id="SETBAND_CM">
			<Cmd>BAND</Cmd>
			<API></API>
			<Notes>BAND-&lt;band&gt; Set band</Notes>
		</Command>
		<Command id="SETSTATIONPRESET_CM">
			<Cmd>TUNERPRESET</Cmd>
			<API></API>
			<Notes>TUNERPRESET-&lt;preset&gt; -
			Recall tuner preset.
			Where:
			&lt;preset&gt; is between 1 and the value returned by ?STATIONPRESETCOUNT, inclusive. 
			</Notes>
		</Command>
		<Command id="GETSTATIONPRESETCOUNT_CM">
			<Cmd>?STATIONPRESETCOUNT</Cmd>
			<API>getStationPresetCount()</API>
			<Notes>
			?STATIONPRESETCOUNT -
			Query for number of valid station presets.
			Responds with:
			STATIONPRESETCOUNT-&lt;count&gt;
			</Notes>
			<CmdResponse>STATIONPRESETCOUNT</CmdResponse>
		</Command>
		<!-- <Command id="GETSTATIONPRESETPROPERTY_CM"> <Cmd>?STATIONPRESETPROPERTY</Cmd> <API></API> <Notes>?STATIONPRESETPROPERTY-&lt;index&gt; Query properties for a single station preset, responds with STATIONPRESETPROPERTY-&lt;index&gt;,&lt;displayName&gt;,&lt;station&gt;</Notes> <CmdResponse>STATIONPRESETPROPERTY</CmdResponse> </Command> <Command id="SETSTATIONPRESETPROPERTY_CM"> <Cmd>STATIONPRESETPROPERTY</Cmd> <API></API> <Notes>Set property for a single station preset, STATIONPRESETPROPERTY-&lt;index&gt;,&lt;displayName&gt;,&lt;station&gt;</Notes> </Command> <Command id="GETSTATIONPRESETPROPERTIES_CM"> <Cmd>?STATIONPRESETPROPERTIES</Cmd> <API>getStationPresetProperties()</API> <Notes>?STATIONPRESETPROPERTIES Query input properties for all station presets, responds with one STATIONPRESETPROPERTY response for each station preset. STATIONPRESETPROPERTY-&lt;index&gt;,&lt;displayName&gt;,&lt;station&gt;</Notes> <CmdResponse>STATIONPRESETPROPERTY</CmdResponse> </Command> -->
		<Command id="GETTUNERBANDPROPERTYCOUNT_CM">
			<Cmd>?TUNERBANDPROPERTYCOUNT</Cmd>
			<API>getTunerBandPropertyCount()</API>
			<Notes>
			?TUNERBANDPROPERTYCOUNT -
			Query for number of valid tuner bands.
			Responds with:
			TUNERBANDPROPERTYCOUNT-&lt;count&gt;
			</Notes>
			<CmdResponse>TUNERBANDPROPERTYCOUNT</CmdResponse>
		</Command>
		<Command id="GETTUNERBANDPROPERTY_CM">
			<Cmd>?TUNERBANDPROPERTY</Cmd>
			<API></API>
			<Notes>
			?TUNERBANDPROPERTY-&lt;index&gt; -
			Query properties for a single tuner band.
			Responds with:
			TUNERBANDPROPERTY-&lt;index&gt;,&lt;displayName&gt;,&lt;tb&gt; </Notes>
			<CmdResponse>TUNERBANDPROPERTY</CmdResponse>
		</Command>
		<Command id="GETTUNERBANDPROPERTIES_CM">
			<Cmd>?TUNERBANDPROPERTIES</Cmd>
			<API>getTunerBandProperties()</API>
			<Notes>
			?TUNERBANDPROPERTIES -
			Query input properties for all tuner bands.
			Responds with one response for each tuner band:
			TUNERBANDPROPERTY-&lt;index&gt;,&lt;displayName&gt;,&lt;tb&gt;
			</Notes>
			<CmdResponse>TUNERBANDPROPERTY</CmdResponse>
		</Command>
		<Command id="GETTUNERBANDSELECT_CM">
			<Cmd>?TUNERBANDSELECT</Cmd>
			<API>getTunerBandSelect()</API>
			<Notes>
			?TUNERBANDSELECT Query -
			for the currently selected index of valid tuner bands.
			Responds with: 
			TUNERBANDSELECT-&lt;index&gt;
			</Notes>
			<CmdResponse>TUNERBANDSELECT</CmdResponse>
		</Command>
		<Command id="STATIONPRESETSELECT_CM">
			<Cmd>STATIONPRESETSELECT</Cmd>
			<API>TODO: DLJ</API>
			<Notes>STATIONPRESETSELECT-&lt;index&gt; -
			Set the currently selected index of valid station presets.
			Responds with: 
			STATIONPRESETSELECT-&lt;index&gt;
			</Notes>
		</Command>
		<Command id="SETSTATION_CM">
			<Cmd>XCH</Cmd>
			<API>TODO: DLJ</API>
			<Notes>XCH-&lt;station&gt; -
			Set station.
			Where:
			&lt;station&gt; is a station string such as &quot;501&quot;, &quot;103.7&quot; or &quot;5.1&quot;
			</Notes>
		</Command>
		<Event id="">
			<Evt>TUNER_BAND_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="BAND">
				<Parameters>
					<Parameter
						type="String"
						description="Represents the currently selected band" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>TUNER_BANDPROPERTIES_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="TUNERBANDPROPERTIES">
				<Parameters>
					<Parameter
						type="StringArray"
						description="Represents the band properties" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>TUNER_BANDPROPERTYCOUNT_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="TUNERBANDPROPERTYCOUNT">
				<Parameters>
					<Parameter
						type="Int"
						description="Represents the band count" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>TUNER_BANDPROPERTY_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="TUNERBANDPROPERTY">
				<Parameters>
					<Parameter
						type="String"
						description="Represents the band property" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>TUNER_BANDSELECT_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="TUNERBANDSELECT">
				<Parameters>
					<Parameter
						type="Int"
						description="Represents the tuner band selected" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>TUNER_STATION_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="XCH">
				<Parameters>
					<Parameter
						type="String"
						description="Represents the station value" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>TUNER_STATIONPRESETCOUNT_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="STATIONPRESETCOUNT">
				<Parameters>
					<Parameter
						type="Int"
						description="Represents the preset count" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>TUNER_STATIONPRESET_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="TUNERPRESET">
				<Parameters>
					<Parameter
						type="Int"
						description="Represents the current preset" />
				</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="UPS">
		<Command id="GETUPSALARMS_CM">
			<Cmd>?UPSALARMS</Cmd>
			<API>getAlarms()</API>
			<Notes>
			?UPSALARMS -
			Query for alarms.
			Responds with:
			UPSALARMS-&lt;alarms&gt;
			Where:
			&lt;alarms&gt; is a CSV of alarm names
			</Notes>
			<CmdResponse>UPSALARMS</CmdResponse>
		</Command>
		<Command id="GETUPSBACKUPPROPERTY_CM">
			<Cmd>?UPSBACKUPPROPERTY</Cmd>
			<API>getBackupProperty(backupProperty)</API>
			<Notes>
			?UPSBACKUPPROPERTY-&lt;property&gt; -
			Query for the &lt;bu-prop&gt; property.
			Responds with:
			UPSBACKUPPROPERTY-&lt;bu-prop&gt;,&lt;value&gt;
			</Notes>
			<CmdResponse>UPSBACKUPPROPERTY</CmdResponse>
		</Command>
		<Command id="GETUPSBACKUPSTATUS_CM">
			<Cmd>?UPSBACKUPSTATUS</Cmd>
			<API>getBackupStatus()</API>
			<Notes>
			?UPSBACKUPSTATUS -
			Query for backup status of UPS.
			Responds with:
			UPSBACKUPSTATUS-&lt;status&gt;
			Where:
			&lt;status&gt; is one of OK, LOW or DEPLETED
			</Notes>
			<CmdResponse>UPSBACKUPSTATUS</CmdResponse>
		</Command>
		<Command id="GETUPSBACKUPTIMER_CM">
			<Cmd>?UPSBACKUPTIMER</Cmd>
			<API>getBackupTimer(backupTimer)</API>
			<Notes>
			?UPSBACKUPTIMER-&lt;bu-timer&gt; -
			Query for &lt;bu-timer&gt; value.
			Responds with:
			UPSBACKUPTIMER-&lt;bu-timer&gt;,&lt;value&gt;
			</Notes>
			<CmdResponse>UPSBACKUPTIMER</CmdResponse>
		</Command>
		<Command id="GETUPSINPUTPROPERTY_CM">
			<Cmd>?UPSINPUTPROPERTY</Cmd>
			<API>getInputProperty(inputProperty)</API>
			<Notes>
			?UPSINPUTPROPERTY-&lt;input-prop&gt; -
			Query for &lt;input-prop&gt;.
			Responds with:
			UPSINPUTPROPERTY-&lt;input-prop&gt;,&lt;value&gt;
			</Notes>
			<CmdResponse>UPSINPUTPROPERTY</CmdResponse>
		</Command>
		<Command id="GETUPSOUTLETCOUNT_CM">
			<Cmd>?UPSOUTLETCOUNT</Cmd>
			<API>getOutletCount()</API>
			<Notes>
			?UPSOUTLETCOUNT -
			Query for number of outlets.
			Responds with:
			UPSOUTLETCOUNT-&lt;outlet-count&gt;
			</Notes>
			<CmdResponse>UPSOUTLETCOUNT</CmdResponse>
		</Command>
		<Command id="GETUPSOUTLETPROPERTIES_CM">
			<Cmd>?UPSOUTLETPROPERTIES</Cmd>
			<API>getOutletProperties(outletNumber)</API>
			<Notes>
			?UPSOUTLETPROPERTIES-&lt;outletNumber&gt; -
			Query the &lt;outletNumber&gt; for all available properties.
			Responds with:
			UPSOUTLETPROPERTIES-[&lt;outletNumber&gt;,&lt;outlet-prop&gt;,&lt;value&gt;]
			for each property, CSV format
			</Notes>
			<CmdResponse>UPSOUTLETPROPERTIES</CmdResponse>
		</Command>
		<Command id="GETUPSOUTLETPROPERTY_CM">
			<Cmd>?UPSOUTLETPROPERTY</Cmd>
			<API>getOutletProperty(outletNumber,outletProperty)</API>
			<Notes>
			?UPSOUTLETPROPERTY-&lt;outletNumber&gt;,&lt;outletProperty&gt; -
			Query the &lt;outletNumber&gt; for the &lt;outletProperty&gt;.
			Responds with:
			UPSOUTLETPROPERTY-&lt;outletNumber&gt;,&lt;outletProperty&gt;,&lt;value&gt;
			</Notes>
			<CmdResponse>UPSOUTLETPROPERTY</CmdResponse>
		</Command>
		<Command id="GETUPSOUTLETSTATE_CM">
			<Cmd>?UPSOUTLETSTATE</Cmd>
			<API>getOutletState(outlet)</API>
			<Notes>
			?UPSOUTLETSTATE-&lt;outletNumber&gt; -
			Query for the state of the specified outlet.
			Responds with:
			UPSOUTLETSTATE-&lt;outletNumber&gt;,&lt;OFF/ON&gt;
			</Notes>
			<CmdResponse>UPSOUTLETSTATE</CmdResponse>
		</Command>
		<Command id="GETUPSSTATE_CM">
			<Cmd>?UPSSTATE</Cmd>
			<API>getState()</API>
			<Notes>
			?UPSSTATE -
			Gets the current state of the UPS.
			Responds with:
			UPSSTATE-&lt;state&gt;
			Where:
			&lt;state&gt; is one of SHUTDOWN, REBOOT, OUTPUT_ONLY, STARTUP, NORMAL, BATTERY, BYPASS, MANUAL_BYPASS, REDUCING, BOOSTING
			</Notes>
			<CmdResponse>UPSSTATE</CmdResponse>
		</Command>
		<Command id="GETUPSSTATUS_CM">
			<Cmd>?UPSSTATUS</Cmd>
			<API>getStatus()</API>
			<Notes>
			?UPSSTATUS -
			Query for status of UPS.
			Responds with:
			UPSSTATUS-&lt;status&gt;
			Where:
			&lt;status&gt; is one of SHUTDOWN, REBOOT, OUTPUT_ONLY, STARTUP, NORMAL, BATTERY, BYPASS, MANUAL_BYPASS, REDUCING, BOOSTING
			</Notes>
			<CmdResponse>UPSSTATUS</CmdResponse>
		</Command>
		<Command id="GETUPSTEMPERATURESCALE_CM">
			<Cmd>?UPSTEMPERATURESCALE</Cmd>
			<API>getTemperatureScale()</API>
			<Notes>
			?UPSTEMPERATURESCALE -
			Query for the temperature scale.
			Responds with:
			UPSTEMPERATURESCALE-&lt;Fahrenheit/Celsius&gt;
			</Notes>
			<CmdResponse>UPSTEMPERATURESCALE</CmdResponse>
		</Command>
		<Command id="GETUPSTESTRESULT_CM">
			<Cmd>?UPSTESTRESULT</Cmd>
			<API>getTestResult()</API>
			<Notes>
			?UPSTESTRESULT -
			Query for the results of the last UPSTEST-&lt;test&gt;,&lt;START&gt;.
			Responds with:
			UPSTESTRESULT-&lt;test&gt;,&lt;PASS/FAIL&gt;
			</Notes>
			<CmdResponse>UPSTESTRESULT</CmdResponse>
		</Command>
		<Command id="GETUPSTESTSSUPPORTED_CM">
			<Cmd>?UPSTESTSSUPPORTED</Cmd>
			<API>getTestsSupported()</API>
			<Notes>
			?UPSTESTSSUPPORTED -
			Query for supported tests.
			Responds with:
			UPSTESTSSUPPORTED-&lt;test_list&gt;
			Where:
			&lt;test_list&gt; is a CSV of supported tests
			</Notes>
			<CmdResponse>UPSTESTSSUPPORTED</CmdResponse>
		</Command>
		<Command id="SETUPSOUTLETSTATE_CM">
			<Cmd>UPSOUTLETSTATE</Cmd>
			<API>setOutletState(outlet,state)</API>
			<Notes>
			UPSOUTLETSTATE-&lt;outletNumber&gt;,&lt;state&gt; -
			Sets the outlets state.
			Where:
			&lt;outletNumber&gt; is the integer outlet number and &lt;state&gt; is ON or OFF
			</Notes>
		</Command>
		<Command id="SETUPSSTATE_CM">
			<Cmd>UPSSTATE</Cmd>
			<API>setState(state)</API>
			<Notes>
			UPSSTATE-&lt;state&gt; -
			Set UPS to the given state.
			Where:
			&lt;state&gt; is one of SHUTDOWN, REBOOT, OUTPUT_ONLY, STARTUP, NORMAL, BATTERY, BYPASS, MANUAL_BYPASS, REDUCING, BOOSTING 
			</Notes>
		</Command>
		<Command id="SETUPSSTATE_CM">
			<Cmd>UPSSTATE</Cmd>
			<API>setState(state,delay)</API>
			<Notes>
			UPSSTATE-&lt;state&gt;,&lt;delay&gt; -
			Set UPS to the given state in &lt;delay&gt; seconds.
			Where:
			&lt;state&gt; is one of SHUTDOWN, REBOOT, OUTPUT_ONLY, STARTUP, NORMAL, BATTERY, BYPASS, MANUAL_BYPASS, REDUCING, BOOSTING 
			</Notes>
		</Command>
		<Command id="SETUPSTEMPERATURESCALE_CM">
			<Cmd>UPSTEMPERATURESCALE</Cmd>
			<API>setTemperatureScale(temperatureScale)</API>
			<Notes>
			UPSTEMPERATURESCALE-&lt;temperatureScale&gt; -
			Sets the temperature scale.
			Where:
			&lt;temperatureScale&gt; is Fahrenheit or Celsius
			</Notes>
		</Command>
		<Command id="SETUPSTEST_CM">
			<Cmd>UPSTEST</Cmd>
			<API>setTest(test,testAction)</API>
			<Notes>
			UPSTEST-&lt;test&gt;,&lt;testAction&gt; -
			Start/Stop/Interrupt the specified &lt;test&gt;.
			Responds with: 
			UPSTEST-&lt;test&gt;,&lt;START/STOP/INTERRUPT&gt;
			</Notes>
		</Command>
		<Event id="">
			<Evt>UPS_UPSALARMS_EVENT</Evt>
			<Notes>
			UPSALARMS-&lt;alarms&gt; -
			Where:
			&lt;alarms&gt; is a CSV string containing the alarm names
			</Notes>
			<EventResponse resp="UPSALARMS">
				<Parameters>
					<Parameter
						type="String"
						description="&lt;alarms&gt; is a CSV string containing the alarm names" 
						/>
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>UPS_UPSBACKUPPROPERTY_EVENT</Evt>
			<Notes>
			UPSBACKUPPROPERTY-&lt;bu-prop&gt;,&lt;value&gt; -
			Data is UPSBackupProperties, &lt;bu-prop&gt; is TSE values as String in upper case (CHARGE, VOLTAGE, CURRENT, REPLACEDATE, or TEMPERATURE)
			</Notes>
			<EventResponse resp="UPSBACKUPPROPERTY">
				<Parameters>
					<Parameter
						type="String"
						description="bu-prop is a backup property name" />
				</Parameters>
				<Parameters>
					<Parameter
						type="String"
						description="value is a backup property value" />
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>UPS_UPSUPSBACKUPSTATUS_EVENT</Evt>
			<Notes>
			UPSBACKUPSTATUS-&lt;bu-status&gt; -
			Data is UPSBackupStatus, &lt;bu-status&gt; values are a String and one of (OK, LOW, or DEPLETED)
			</Notes>
			<EventResponse resp="UPSBACKUPSTATUS">
				<Parameters>
					<Parameter
						type="String"
						description="&lt;bu-status&gt; values are a String and one of (OK, LOW, or DEPLETED)" 
						/>
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>UPS_UPSUPSBACKUPTIMER_EVENT</Evt>
			<Notes>
			UPSBACKUPTIMER-&lt;bu-timer&gt;,&lt;value&gt; -
			Data is UPSBackupTimer, &lt;bu-timer&gt; values are a String and one of (TIMEONBATTERY, TIMETODEPLETED, or TIMETOLOW),
			&lt;value&gt; is seconds
			</Notes>
			<EventResponse resp="UPSBACKUPTIMER">
				<Parameters>
					<Parameter
						type="String"
						description="&lt;bu-timer&gt; values are a String and one of (TIMEONBATTERY, TIMETODEPLETED, or TIMETOLOW)" 
					/>
					<Parameter
						type="Integer"
						description="&lt;value&gt; is seconds"
					/>
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>UPS_UPSINPUTPROPERTY_EVENT</Evt>
			<Notes>
			UPSINPUTPROPERTY-&lt;input-prop&gt;,&lt;value&gt; -
			Data is UPSInputProperties, &lt;input-prop&gt; values are a String in upper case and one of
			(DELAYONTIME, DELAYOFFTIME, FREQUENCY, VOLTAGE, CURRENT, LINES, or CAPACITY),
			&lt;value&gt; is the property value
			</Notes>
			<EventResponse resp="UPSINPUTPROPERTY">
				<Parameters>
					<Parameter
						type="String"
						description="&lt;input-prop&gt; values are a String in upper case and one of (DELAYONTIME, DELAYOFFTIME, FREQUENCY, VOLTAGE, CURRENT, LINES, or CAPACITY)" 
					/>
					<Parameter
						type="String"
						description="&lt;value&gt; is the property value"
					/>
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>UPS_UPSBACKUPSUPPORTED_EVENT</Evt>
			<Notes>
			UPSBACKUPSUPPORTED-&lt;boolean&gt; -
			Response to ?UPSBACKUPSUPPORTED
			</Notes>
			<EventResponse resp="UPSBACKUPSUPPORTED">
				<Parameters>
					<Parameter 
						type="Boolean"
						description="true or false"
					/>
					</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>UPS_UPSOUTLETCOUNT_EVENT</Evt>
			<Notes>
			UPSOUTLETCOUNT-&lt;count&gt; -
			Response to ?UPSOUTLETCOUNT.
			Where:
			count&gt; is the integer number of outlets
			</Notes>
			<EventResponse resp="UPSOUTLETCOUNT">
				<Parameters>
					<Parameter type="Integer"
					description="&lt;count&gt; is the integer number of outlets"
					/>
					</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>UPS_UPSOUTLETPROPERTIES_EVENT</Evt>
			<Notes>
			UPSOUTLETPROPERTIES-&lt;outletNumber&gt;,&lt;outlet-prop&gt;,&lt;value&gt;[,&lt;outletNumber&gt;,&lt;outlet-prop&gt;,&lt;value&gt;,...] -
			Data is UPSOutletProperties, &lt;outlet-prop&gt; is TSE values is a String in upper case (OUTPUTLINES, OUTPUTFREQUENCY,
			OUTPUTVOLTAGE, OUTPUTCURRENT, OUTPUTPOWER, OUTPUTPOWERSOURCE, OUTPUTLOAD, BYPASSLINES,
			BYPASSFREQUENCY, BYPASSVOLTAGE, BYPASSCURRENT, BYPASSPOWER, BYPASSPOWERSOURCE, or BYPASSLOAD)
			</Notes>
			<EventResponse resp="UPSOUTLETPROPERTIES">
				<Parameters>
					<Parameter 
						type="Integer"
						description="&lt;outletNumber&gt; is an outlet number"
					/>
					<Parameter 
							type="String"
							description="&lt;outlet-prop&gt; is a String in upper case (OUTPUTLINES, OUTPUTFREQUENCY, OUTPUTVOLTAGE, OUTPUTCURRENT, OUTPUTPOWER, OUTPUTPOWERSOURCE, OUTPUTLOAD, BYPASSLINES, BYPASSFREQUENCY, BYPASSVOLTAGE, BYPASSCURRENT, BYPASSPOWER, BYPASSPOWERSOURCE, or BYPASSLOAD"
					/>
						<Parameter 
						type="String"
						description="&lt;value&gt; is the property value"
					/>
					</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>UPS_UPSOUTLETPROPERTY_EVENT</Evt>
			<Notes>
			UPSOUTLETPROPERTY-&lt;outletNumber&gt;,&lt;outlet-prop&gt;,&lt;value&gt; -
			Data is UPSOutletProperties, &lt;outlet-prop&gt; is TSE values as String in upper case (OUTPUTLINES, OUTPUTFREQUENCY,
			OUTPUTVOLTAGE, OUTPUTCURRENT, OUTPUTPOWER, OUTPUTPOWERSOURCE, OUTPUTLOAD, BYPASSLINES, BYPASSFREQUENCY, BYPASSVOLTAGE, 
			BYPASSCURRENT, BYPASSPOWER, BYPASSPOWERSOURCE, or BYPASSLOAD)
			</Notes>
			<EventResponse resp="UPSOUTLETPROPERTY">
				<Parameters>
					<Parameter 
						type="Integer"
						description="&lt;outletNumber&gt; is an outlet number"
					/>
					<Parameter 
							type="String"
							description="&lt;outlet-prop&gt; is a String in upper case (OUTPUTLINES, OUTPUTFREQUENCY, OUTPUTVOLTAGE, OUTPUTCURRENT, OUTPUTPOWER, OUTPUTPOWERSOURCE, OUTPUTLOAD, BYPASSLINES, BYPASSFREQUENCY, BYPASSVOLTAGE, BYPASSCURRENT, BYPASSPOWER, BYPASSPOWERSOURCE, or BYPASSLOAD"
					/>
					<Parameter 
						type="String"
						description="&lt;value&gt; is the property value"
					/>
					</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>UPS_UPSOUTLETSTATE_EVENT</Evt>
			<Notes>
			UPSOUTLETSTATE-&lt;outletNumber&gt;,&lt;state&gt; -
			Response to ?UPSOUTLETSTATE-&lt;outletNumber&gt;,&lt;state&gt;.
			Where:
			&lt;state&gt; is ON or OFF
			</Notes>
			<EventResponse resp="UPSOUTLETSTATE">
				<Parameters>
					<Parameter 
						type="Integer"
						description="&lt;outletNumber&gt; is an outlet number"
					/>
					<Parameter 
						type="String"
						description="&lt;outlet-prop&gt; is a String in upper case (OUTPUTLINES, OUTPUTFREQUENCY, OUTPUTVOLTAGE, OUTPUTCURRENT, OUTPUTPOWER, OUTPUTPOWERSOURCE, OUTPUTLOAD, BYPASSLINES, BYPASSFREQUENCY, BYPASSVOLTAGE, BYPASSCURRENT, BYPASSPOWER, BYPASSPOWERSOURCE, or BYPASSLOAD"
					/>
					<Parameter 
						type="String"
						description="&lt;state&gt; is ON or OFF"
					/>
					</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>UPS_UPSSTATE_EVENT</Evt>
			<Notes>
			UPSSTATE-&lt;state&gt;,&lt;delay&gt; -
			Data is UPSState, &lt;state&gt; is TSE values as String in upper case (SHUTDOWN, REBOOT, OUTPUT_ONLY, STARTUP, NORMAL,
			BATTERY, BYPASS, MANUAL_BYPASS, REDUCING, or BOOSTING), &lt;delay&gt; is in seconds
			</Notes>
			<EventResponse resp="UPSSTATE">
				<Parameters>
						<Parameter 
						type="String"
						description="&lt;state&gt; is TSE values as String in upper case (SHUTDOWN, REBOOT, OUTPUT_ONLY, STARTUP, NORMAL, BATTERY, BYPASS, MANUAL_BYPASS, REDUCING, or BOOSTING)"
					/>
					<Parameter 
						type="Integer"
						description="&lt;delay&gt; is in seconds"
					/>
					</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>UPS_UPSSTATUS_EVENT</Evt>
			<Notes>
			UPSSTATUS- &lt;status&gt; -
			Data is UPSStatus, &lt;status&gt; is TSE values as String in upper case (SHUTDOWN, REBOOT, OUTPUT_ONLY, STARTUP, NORMAL,
			BATTERY, BYPASS, MANUAL_BYPASS, REDUCING, or BOOSTING)
			</Notes>
			<EventResponse resp="UPSSTATUS">
				<Parameters>
						<Parameter 
						type="String"
						description="&lt;status&gt; is TSE values as String in upper case (SHUTDOWN, REBOOT, OUTPUT_ONLY, STARTUP, NORMAL, BATTERY, BYPASS, MANUAL_BYPASS, REDUCING, or BOOSTING)"
					/>
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>UPS_UPSTEMPERATURESCALE_EVENT</Evt>
			<Notes>
			UPSTEMPERATURESCALE-&lt;temperatureScale&gt; -
			Data is TemperatureScale, &lt;temperatureScale&gt; is TSE values as String in upper case (CELSIUS, OR FAHRENHEIT)
			</Notes>
			<EventResponse resp="UPSTEMPERATURESCALE">
				<Parameters>
						<Parameter 
						type="String"
						description="&lt;temperatureScale&gt; is TSE values as String in upper case (CELSIUS, OR FAHRENHEIT)"
					/>
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>UPS_UPSTEST_EVENT</Evt>
			<Notes>
			UPSTEST-&lt;test&gt;,&lt;action&gt; -
			Data is TestAction, &lt;action&gt; is TSE values as String in upper case (START, STOP or INTERRUPT)
			</Notes>
			<EventResponse resp="UPSTEST">
				<Parameters>
						<Parameter 
						type="String"
						description="&lt;test&gt; test name"/>
						<Parameter 
						type="String"
						description="&lt;action&gt; is TSE values as String in upper case (START, STOP or INTERRUPT)"/>
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>UPS_UPSTESTRESULT_EVENT</Evt>
			<Notes>
			UPSTESTRESULT-&lt;test&gt;,&lt;result&gt; -
			Data is TestResult, &lt;result&gt; is TSE values as String in upper case (PASS or FAIL)
			</Notes>
			<EventResponse resp="UPSTESTRESULT">
				<Parameters>
						<Parameter 
						type="String"
						description="&lt;test&gt; test name"/>
						<Parameter 
						type="String"
						description="&lt;result&gt; is TSE values as String in upper case (PASS or FAIL)"/>
				</Parameters>
			</EventResponse>
		</Event>
		<Event id="">
			<Evt>UPS_UPSTESTSSUPPORTED_EVENT</Evt>
			<Notes>
			UPSTESTSSUPPORTED-&lt;test_list&gt; -
			&lt;test_list&gt; is a CSV string containing each &lt;test&gt; supported
			</Notes>
			<EventResponse resp="UPSTESTSSUPPORTED">
				<Parameters>
						<Parameter 
						type="String"
						description="&lt;test_list&gt; is TSE values as String in upper case (PASS or FAIL)"/>
					</Parameters>
			</EventResponse>
		</Event>
	</Component>
	<Component id="VideoConferencer">
		<Channel
			id="PIP"
			type="Momentary">
			<Chan>194</Chan>
			<OnAPI>cyclePIP()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Cycle PIP when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="PIP_POS"
			type="Momentary">
			<Chan>191</Chan>
			<OnAPI>cyclePIPPosition()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Cycle PIP positions when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="VCONF_PRIVACY"
			type="Momentary">
			<Chan>145</Chan>
			<OnAPI>cyclePrivacy()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Cycle privacy when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="PIP_ON"
			type="Momentary">
			<Chan>195</Chan>
			<OnAPI>setPIPOn(state)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Discrete Function Channel: PIP is on while channel is active
			</Notes>
		</Channel>
		<Channel
			id="VCONF_PRIVACY_ON"
			type="Momentary">
			<Chan>146</Chan>
			<OnAPI>setPrivacyOn(state)</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Discrete Function Channel: Privacy is on while channel is active
			</Notes>
		</Channel>
		<Channel
			id="PIP_SWAP"
			type="Momentary">
			<Chan>193</Chan>
			<OnAPI>swapPIP()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Swap PIP when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="VCONF_TRAIN"
			type="Momentary">
			<Chan>147</Chan>
			<OnAPI>train()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function Channel: Train is executed when the channel is activated
			</Notes>
		</Channel>
		<Channel
			id="PIP_FB"
			type="Feedback">
			<Chan>195</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Channel: PIP is on if channel is on.</Notes>
		</Channel>
		<Channel
			id="VCONF_PRIVACY_FB"
			type="Feedback">
			<Chan>146</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>Feedback Channel: Privacy is muted if channel is on.</Notes>
		</Channel>
	</Component>
	<Component id="Volume">
		<Channel
			id="VOL_UP"
			type="Ramping">
			<Chan>24</Chan>
			<OnAPI>setVolumeRamp(java.lang.String)</OnAPI>
			<OffAPI>setVolumeRamp(java.lang.String)</OffAPI>
			<Notes>Ramping Function: Volume is ramped up while channel is active
			</Notes>
		</Channel>
		<Channel
			id="VOL_DN"
			type="Ramping">
			<Chan>25</Chan>
			<OnAPI>setVolumeRamp(java.lang.String)</OnAPI>
			<OffAPI>setVolumeRamp(java.lang.String)</OffAPI>
			<Notes>Ramping Function: Volume is ramped down while channel is active
			</Notes>
		</Channel>
		<Channel
			id="VOL_MUTE"
			type="Momentary">
			<Chan>26</Chan>
			<OnAPI>cycleVolumeMute()</OnAPI>
			<OffAPI></OffAPI>
			<Notes>Momentary Function: Cycle volume mute when channel is activated
			</Notes>
		</Channel>
		<Channel
			id="VOL_MUTE_ON"
			type="Discrete">
			<Chan>199</Chan>
			<OnAPI>setVolumeMuteOn(boolean)</OnAPI>
			<OffAPI>setVolumeMuteOn(boolean)</OffAPI>
			<Notes>Discrete Function: Volume mute is on while channel is active
			</Notes>
		</Channel>
		<Level id="VOL_LVL">
			<Lvl>1</Lvl>
			<API>setVolume(int)</API>
			<Notes>Set volume level</Notes>
			<Range dataType="integer">
				<Min>0</Min>
				<Max>255</Max>
			</Range>
		</Level>
		<Event id="">
			<Evt>VOLUME_VOLUME_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Levels>
				<EvtLevel
					type="Int"
					description="Represents the current volume level">1</EvtLevel>
			</Levels>
		</Event>
		<Event id="">
			<Evt>VOLUME_VOLUMEMUTE_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Channels>
				<EvtChan
					type="Int"
					description="Represents the mute state for the volume mute">199</EvtChan>
			</Channels>
		</Event>
		<Event id="">
			<Evt>VOLUME_VOLUMERAMP_EVENT</Evt>
			<Notes>TODO: DLJ</Notes>
			<Channels>
				<EvtChan
					type="Int"
					description="Volume Ramp Up">24</EvtChan>
				<EvtChan
					type="Int"
					description="Volume Ramp Down">25</EvtChan>
			</Channels>
		</Event>
	</Component>
	<Component id="Weather">
		<Command id="GETFORECASTCOP_CM">
			<Cmd>?FORECASTCOP</Cmd>
			<API>getChanceOfPrecipitation()</API>
			<Notes>
			?FORECASTCOP - 
			Query for forecast chance of precipitation changes.
			Responds with:
			FORECASTCOP-&lt;day 1&gt;,&lt;day 2&gt;,etc. 
			Where:
			Value list will contain one forecast chance of precipitation for each forecast day. 
			The first day is always today. Values are in percent.
			</Notes>
			<CmdResponse>FORECASTCOP</CmdResponse>
		</Command>
		<Command id="GETWEATHERCONDITION_CM">
			<Cmd>?WEATHERCONDITION</Cmd>
			<API>getCurrentCondition()</API>
			<Notes>
			?WEATHERCONDITION - 
			Query for current conditions, 
			Responds with:
			WEATHERCONDITION-&lt;condition&gt;
			Where:
			&lt;condition&gt; will be BLIZZARD, BLOWINGSNOW, CLEAR, CLOUDY, DRIZZLE, 
			DUST, FAIR, FOG, FREEZINGDRIZZLE, FREEZINGRAIN, HAZE, HUMID, ICE, 
			MOSTLYCLOUDY, MOSTLYSUNNY, PARTLYCLOUDY, RAIN, RAINSHOWERS, 
			RAINSNOWMIX, SLEET, SMOKE, SNOW, SNOWFLURRIES, SNOWSHOWERS, 
			SUNNY, THUNDERSTORMS, UNKNOWN, VERYCOLD, WINDY
			</Notes>
			<CmdResponse>WEATHERCONDITION</CmdResponse>
		</Command>
		<Command id="GETFORECASTHIGH_CM">
			<Cmd>?FORECASTHIGH</Cmd>
			<API>getForecastHighTemperature()</API>
			<Notes>
			?FORECASTHIGH - 
			Query for forecast high temperatures changes,
			Responds with:
			FORECASTHIGH-&lt;day 1&gt;,&lt;day 2&gt;, etc...
			Where:
			Value list will contain one forecast high temperature for each forecast day. 
			The first day is always today. Values are in degrees C or F depending on weather scale			
			</Notes>
			<CmdResponse>FORECASTHIGH</CmdResponse>
		</Command>
		<Command id="GETFORECASTLOW_CM">
			<Cmd>?FORECASTLOW</Cmd>
			<API>getForecastLowTemperature()</API>
			<Notes>
			?FORECASTLOW - 
			Query for forecast low temperatures changes,
			Responds with:
			FORECASTLOW-&lt;day 1&gt;,&lt;day 2&gt;, etc...
			Where:
			Value list will contain one forecast high temperature for each forecast day. 
			The first day is always today. Values are in degrees C or F depending on weather scale			
			</Notes>
			<CmdResponse>FORECASTLOW</CmdResponse>
		</Command>
		<Command id="GETWEATHERRAIN_CM">
			<Cmd>?WEATHERRAIN</Cmd>
			<API>getRainfall(dur)</API>
			<Notes>
			?WEATHERRAIN-&lt;duration&gt; - 
			Query for Rain fall, 
			Responds with:
			WEATHERRAIN-&lt;duration&gt;,&lt;value&gt; 
			Where:
			&lt;duration&gt; is DAY, WEEK, MONTH, YEAR, YTD
			&lt;value&gt; is in inches (Imperial Scale) or cm (Metric Scale).			
			</Notes>
			<CmdResponse>WEATHERRAIN</CmdResponse>
		</Command>
		<Command id="GETWEATHERALERT_CM">
			<Cmd>?WEATHERALERT</Cmd>
			<API>getWeatherAlert()</API>
			<Notes>
			?WEATHERALERT - 
			Query for Weather alert.
			Responds with:
			WEATHERALERT-&lt;alert&gt; 
			Where:
			&lt;alert&gt; is a string containing the weather alert			
			</Notes>
			<CmdResponse>WEATHERALERT</CmdResponse>
		</Command>
		<Command id="GETFORECASTCONDITION_CM">
			<Cmd>?FORECASTCONDITION</Cmd>
			<API>getWeatherConditions()</API>
			<Notes>
			?FORECASTCONDITION - 
			Query for forecast conditions. 
			Responds with:
			FORECASTCONDITION-&lt;day 1&gt;,&lt;day 2&gt;, etc.
			Where:
			Value list will contain one forecast condition for each forecast day. 
			The first day is always today. 
			Values will be BLIZZARD, BLOWINGSNOW, CLEAR, CLOUDY, DRIZZLE, DUST, FAIR, FOG, 
			FREEZINGDRIZZLE, FREEZINGRAIN, HAZE, HUMID, ICE, MOSTLYCLOUDY, MOSTLYSUNNY, PARTLYCLOUDY,
			RAIN, RAINSHOWERS, RAINSNOWMIX, SLEET, SMOKE, SNOW, SNOWFLURRIES, SNOWSHOWERS, 
			SUNNY, THUNDERSTORMS, UNKNOWN, VERYCOLD, WINDY			
			</Notes>
			<CmdResponse>FORECASTCONDITION</CmdResponse>
		</Command>
		<Command id="GETWEATHERSCALE_CM">
			<Cmd>?WEATHERSCALE</Cmd>
			<API>getWeatherScale()</API>
			<Notes>
			?WEATHERSCALE - 
			Query for the temperature scale.
			Responds with:
			WEATHERSCALE-&lt;scale&gt; 
			Where:
			&lt;scale&gt; is IMPERIAL or METRIC			
			</Notes>
			<CmdResponse>WEATHERSCALE</CmdResponse>
		</Command>
		<Command id="GETWEATHERWIND_CM">
			<Cmd>?WEATHERWIND</Cmd>
			<API>getWindInfo()</API>
			<Notes>
			?WEATHERWIND - 
			Query for the wind speed/direction.
			Responds with:
			WEATHERWIND-&lt;speed&gt;,direction&gt; 
			Where:
			&lt;speed&gt; will be in mph or kph, 
			depending on scale
			&lt;direction&gt; will be N, NNE, NE, ENE, E, ESE, SE, SSE, S, SSW, SW, WSW, W, WNW, NW, NNW			
			</Notes>
			<CmdResponse>WEATHERWIND</CmdResponse>
		</Command>
		<Command id="SETWEATHERSCALE_CM">
			<Cmd>WEATHERSCALE</Cmd>
			<API>setWeatherScale(us)</API>
			<Notes>
			WEATHERSCALE-&lt;scale&gt; - 
			Set the weather scale, 
			Where:
			&lt;scale&gt; is IMPERIAL or METRIC			
			</Notes>
		</Command>
		<Channel id="WEATHER_FORCE_READING" type="Momentary">
			<Chan>208</Chan>
			<OnAPI>queryWeatherAll()</OnAPI>
			<Notes>Momentary Function Channel: 
			Causes the weather station to update its readings when the channel is activated
			</Notes>
		</Channel>
		<Channel
			id="WEATHER_BAR_FALLING_FB"
			type="Feedback">
			<Chan>233</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Barometric pressure trend change (see chart below)
			</Notes>
		</Channel>
		<Channel
			id="WEATHER_BAR_RISING_FB"
			type="Feedback">
			<Chan>232</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Barometric pressure trend change (see chart below)
			</Notes>
		</Channel>
		<Channel
			id="WEATHER_FREEZING_FB"
			type="Feedback">
			<Chan>231</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Weather condition is freezing if channel is on. 
			Weather condition is freezing when outdoor temperature is at 
			or below 32 degrees F, 0 degrees C.
			</Notes>
		</Channel>
		<Channel
			id="WEATHER_RAINING_FB"
			type="Feedback">
			<Chan>230</Chan>
			<OnAPI></OnAPI>
			<OffAPI></OffAPI>
			<Notes>
			Feedback Channel: Weather condition is raining if channel is on. 
			Weather condition is raining when the current weather condition indicates raining.
			</Notes>
		</Channel>
		<Level id="WEATHER_BAR_LVL_FB">
			<Lvl>48</Lvl>
			<Notes>
			Barometric pressure changed, value is in inches Hg (Imperial Scale) or mm Hg/torr (Metric Scale)
			</Notes>
			<Range dataType="integer">
				<Max>255</Max>
				<Min>0</Min>
			</Range>
		</Level>
		<Level id="WEATHER_DEWPOINT_LVL_FB">
			<Lvl>47</Lvl>
			<Notes>
			Dewpoint changed, value is in degrees C or F depending on weather scale
			</Notes>
			<Range dataType="integer">
				<Max>255</Max>
				<Min>0</Min>
			</Range>
		</Level>
		<Level id="WEATHER_HEAT_INDEX_LVL_FB">
			<Lvl>46</Lvl>
			<Notes>
			Heat index temperature changed, 
			value is in degrees C or F depending on weather scale
			</Notes>
			<Range dataType="integer">
				<Max>255</Max>
				<Min>0</Min>
			</Range>
		</Level>
		<Level id="WEATHER_HI_TEMP_LVL_FB">
			<Lvl>43</Lvl>
			<Notes>
			High temperature since midnight changed, 
			value is in degrees C or F depending on weather scale
			</Notes>
			<Range dataType="integer">
				<Max>255</Max>
				<Min>0</Min>
			</Range>
		</Level>
		<Level id="INDOOR_HUMID_LVL_FB">
			<Lvl>35</Lvl>
			<Notes>
			Indoor humidity changed, value is in percent
			</Notes>
			<Range dataType="integer">
				<Max>255</Max>
				<Min>0</Min>
			</Range>
		</Level>
		<Level id="INDOOR_TEMP_LVL_FB">
			<Lvl>33</Lvl>
			<Notes>
			Indoor temperature changed, value is in degrees C or F depending on weather scale
			</Notes>
			<Range dataType="integer">
				<Max>255</Max>
				<Min>0</Min>
			</Range>
		</Level>
		<Level id="WEATHER_LO_TEMP_LVL_FB">
			<Lvl>44</Lvl>
			<Notes>
			Low temperature since midnight changed, 
			value is in degrees C or F depending on weather scale
			</Notes>
			<Range dataType="integer">
				<Max>255</Max>
				<Min>0</Min>
			</Range>
		</Level>		
		<Level id="OUTDOOR_HUMID_LVL_FB">
			<Lvl>36</Lvl>
			<Notes>
			Outdoor humidity changed, value is in percent
			</Notes>
			<Range dataType="integer">
				<Max>255</Max>
				<Min>0</Min>
			</Range>
		</Level>		
		<Level id="OUTDOOR_TEMP_LVL_FB">
			<Lvl>34</Lvl>
			<Notes>
			Outdoor temperature changed, 
			value is in degrees C or F depending on weather scale
			</Notes>
			<Range dataType="integer">
				<Max>255</Max>
				<Min>0</Min>
			</Range>
		</Level>
		<Level id="WEATHER_WIND_CHILL_LVL_FB">
			<Lvl>45</Lvl>
			<Notes>
			Windchill temperature changed, 
			value is in degrees C or F depending on weather scale
			</Notes>
			<Range dataType="integer">
				<Max>255</Max>
				<Min>0</Min>
			</Range>
		</Level>
		<Event 
			id="" 
		 	description="Weather forecast chance of precipitation changes,
			value list will contain one forecast chance of precipitation
			for each forecast day. The first day is always today.
			Values are in percent."
		>
			<Evt>FORECASTCOP</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="FORECASTCOP">
				<Parameters>
					<Parameter type="StringArray" description="FAHRENHEIT or CELSIUS" />
				</Parameters>
			</EventResponse>
		</Event>
	
		<Event 
			id="" 
		 	description="Weather condition changed, 
		 	value will be BLIZZARD, BLOWINGSNOW, CLEAR, CLOUDY, DRIZZLE, DUST, FAIR, FOG, FREEZINGDRIZZLE, FREEZINGRAIN,
			HAZE, HUMID, ICE, MOSTLYCLOUDY, MOSTLYSUNNY, PARTLYCLOUDY, RAIN, RAINSHOWERS, RAINSNOWMIX, SLEET, SMOKE,
			SNOW, SNOWFLURRIES, SNOWSHOWERS, SUNNY, THUNDERSTORMS, UNKNOWN, VERYCOLD, WINDY"
		>
			<Evt>WEATHERCONDITION</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="WEATHERCONDITION">
				<Parameters>
					<Parameter type="String" description="condition" />
				</Parameters>
			</EventResponse>
		</Event>
	
		<Event 
			id="" 
		 	description="Weather forecast high temperatures changes, value list
			will contain one forecast high temperature for each
			forecast day. The first day is always today. Values are in
			degrees C or F depending on weather scale"
		>
			<Evt>FORECASTHIGH</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="FORECASTHIGH">
				<Parameters>
					<Parameter type="StringArray" description="day" />
				</Parameters>
			</EventResponse>
		</Event>

		<Event 
			id="" 
		 	description="Weather forecast low temperatures changes, value list
			will contain one forecast low temperature for each
			forecast day. The first day is always today. Values are in
			degrees C or F depending on weather scale"
			>
			<Evt>FORECASTLOW</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="FORECASTLOW">
				<Parameters>
					<Parameter type="StringArray" description="value" />
				</Parameters>
			</EventResponse>
		</Event>
	
		<Event 
			id="" 
		 	description="Rain fall changed.
		 	Where:
		 	&lt;duration&gt; is DAY, WEEK, MONTH, YEAR, YTD and &lt;value&gt; is in inches (Imperial
			Scale) or cm (Metric Scale)."
			>
			<Evt>WEATHERRAIN</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="WEATHERRAIN">
				<Parameters>
					<Parameter type="StringArray" description="duration" />
				</Parameters>
				<Parameters>
					<Parameter type="Float" description="value" />
				</Parameters>
			</EventResponse>
		</Event>

		<Event 
			id="" 
		 	description="Weather alert.
		 	Where:
		 	&lt;alert&gt; is a string containing the weather alert"
			>
			<Evt>WEATHERALERT</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="WEATHERALERT">
				<Parameters>
					<Parameter type="String" description="alert" />
				</Parameters>
			</EventResponse>
		</Event>

		<Event 
			id="" 
		 	description="Weather forecast conditions changed, value list will contain one forecast condition for each forecast day.
			The first day is always today. Values will be BLIZZARD, BLOWINGSNOW, CLEAR, CLOUDY, DRIZZLE, DUST,
			FAIR, FOG, FREEZINGDRIZZLE, FREEZINGRAIN, HAZE, HUMID, ICE, MOSTLYCLOUDY, MOSTLYSUNNY, PARTLYCLOUDY, RAIN,
			RAINSHOWERS, RAINSNOWMIX, SLEET, SMOKE, SNOW, SNOWFLURRIES, SNOWSHOWERS, SUNNY, THUNDERSTORMS, UNKNOWN,
			VERYCOLD, WINDY"
			>
			<Evt>FORECASTCONDITION</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="FORECASTCONDITION">
				<Parameters>
					<Parameter type="StringArray" description="value" />
				</Parameters>
			</EventResponse>
		</Event>

		<Event 
			id="" 
		 	description="Weather scale changed, &lt;scale&gt; is IMPERIAL or METRIC"
			>
			<Evt>WEATHERSCALE</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="WEATHERSCALE">
				<Parameters>
					<Parameter type="String" description="value - IMPERIAL or METRIC" />
				</Parameters>
			</EventResponse>
		</Event>

		<Event 
			id="" 
		 	description="Wind speed/direction had changed. Wind speed will be
			in mph or kph, depending on scale. Direction will be N,
			NNE, NE, ENE, E, ESE, SE, SSE, S, SSW, SW, WSW, W, WNW, NW, NNW"
			>
			<Evt>WEATHERWIND</Evt>
			<Notes>TODO: DLJ</Notes>
			<EventResponse resp="WEATHERWIND">
				<Parameters>
					<Parameter type="Integer" description="speed" />
				</Parameters>
				<Parameters>
					<Parameter type="String" description="direction" />
				</Parameters>
			</EventResponse>
		</Event>
	
	</Component>
</SNAPI2Standards>